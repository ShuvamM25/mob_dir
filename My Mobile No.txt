**********************************************************************************************************
1st block
ZISU_CM_D_UP - tcode
ZISU_CM_CUSTOMER_UPLOAD - prg_name
**********************************************************************************************************
*&---------------------------------------------------------------------*
**& Report ZISU_CM_CUSTOMER_UPLOAD
**&---------------------------------------------------------------------*
**& Description :
**& Requirement Provided By :
**& Code Written By :
**& Code Written On (DD.MM.YYYY):
**& Company Name :
**& Transport Request No :
**& Transaction code :
**&---------------------------------------------------------------------*
**&---------------------------------------------------------------------*
**& CHANGE HISTORY:
**& Date:
**& Changed By:
**& Description:
**"---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Report ZISU_CM_CUSTOMER_UPLOAD
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zisu_cm_customer_upload.
TYPE-POOLS: slis.
RANGES r_date FOR sy-datum.
DATA : lv         TYPE c LENGTH 3,
       l_filename TYPE string.
DATA : gt_cm_bp_data  TYPE TABLE OF zcm_bp_data,
*       gt_CM_BP_DATA1 TYPE TABLE OF zcm_s_dma_data,
       la_cm_bp_data  TYPE  zcm_bp_data,
       ls_cm_group_ca TYPE zcm_group_ca.
DATA : ls_return TYPE  bapiret2.

TYPES: BEGIN OF ty_final,
         app_num   TYPE bu_bpext,
         bp_number TYPE bu_partner,
         sr_number TYPE crmt_object_id_db,
         con_acc   TYPE vkont_kk,
         er_mss    TYPE string,
       END OF ty_final.

DATA : gt_final    TYPE TABLE OF ty_final.
DATA: gt_fieldcat TYPE slis_t_fieldcat_alv,
      lw_fieldcat TYPE slis_fieldcat_alv.

DATA:
  lv_rc          TYPE  i,
  lv_user_action TYPE  i,
  lt_file_table  TYPE  filetable,
  ls_file_table  LIKE LINE OF lt_file_table.
*DATA : lv_FILENAME_1 TYPE string.

SELECTION-SCREEN BEGIN OF BLOCK 0001 WITH FRAME TITLE TEXT-001.
  SELECTION-SCREEN BEGIN OF BLOCK 0002 WITH FRAME TITLE TEXT-002.
    PARAMETERS : p_bp   TYPE rlgrap-filename MODIF ID m2 . "OBLIGATORY.  " FOR spfli-carrid MODIF ID m1,
  SELECTION-SCREEN END OF BLOCK 0002.
SELECTION-SCREEN END OF BLOCK 0001.

INITIALIZATION.
  SET PF-STATUS 'STATUS_MAIN'.

AT SELECTION-SCREEN.
  "Provide the functionality to download Excel Template
  CASE sy-ucomm.
    WHEN 'CUSTTEMP'.
      PERFORM download_cust_template.
  ENDCASE.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_bp.
*----------------------------------------------------------------------*


  cl_gui_frontend_services=>file_open_dialog(
      EXPORTING
        window_title        = 'Customer File'
        multiselection      = ''
        default_extension   = '*.xlsx'
        file_filter         = 'Text file (*.xlsx)|*.xlsx|All (*.*)|*.*'
      CHANGING
        file_table          = lt_file_table
        rc                  = lv_rc
        user_action         = lv_user_action
      EXCEPTIONS
        OTHERS              = 1 ).
  IF sy-subrc = 0.
    IF lv_user_action = cl_gui_frontend_services=>action_ok.
      IF lt_file_table IS NOT INITIAL.
        READ TABLE lt_file_table INTO ls_file_table INDEX 1.
        IF sy-subrc = 0.
          l_filename = ls_file_table-filename.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

*  CALL METHOD cl_gui_frontend_services=>directory_browse
*    EXPORTING
*      window_title         = 'Directory to use'
*      initial_folder       = 'Z:'
*    CHANGING
*      selected_folder      = l_filename
*    EXCEPTIONS
*      cntl_error           = 1
*      error_no_gui         = 2
*      not_supported_by_gui = 3
*      OTHERS               = 4.
*  IF sy-subrc <> 0.
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*  ENDIF.

*  ***
  p_bp = l_filename.


START-OF-SELECTION.

  DEFINE mig_fieldcat.
    CLEAR  lw_fieldcat.
           lw_fieldcat-col_pos      = &1.
           lw_fieldcat-fieldname    = &2.
           lw_fieldcat-seltext_l    = &3.
           lw_fieldcat-outputlen    = 500.
           APPEND lw_fieldcat TO gt_fieldcat.

  END-OF-DEFINITION.

  IF p_bp IS NOT INITIAL.

    PERFORM get_file_data_bp_excel.
    PERFORM create_bp.
  ENDIF.
  IF gt_final IS NOT INITIAL.
    PERFORM alv_dispaly.
  ENDIF.
*&---------------------------------------------------------------------*
*& Form Get_file_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM get_file_data_bp .

  DATA : it_excel_data TYPE TABLE OF alsmex_tabline,
         lv_row_count  TYPE i,
         ls_file_data  TYPE zcm_bp_data,
         lv_bp         TYPE bu_partner,
         lv_mandt      TYPE char100.

  DATA : lv_bp_cat  TYPE  bu_type,
         lv_bp_role TYPE  partner_role.
  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
    EXPORTING
      filename                = p_bp
      i_begin_col             = 1
      i_begin_row             = 2
      i_end_col               = 200
      i_end_row               = 9999
    TABLES
      intern                  = it_excel_data
    EXCEPTIONS
      inconsistent_parameters = 1
      upload_ole              = 2
      OTHERS                  = 3.
  IF sy-subrc <> 0.

  ENDIF.


*Populate data to internal tables and structures

  SORT it_excel_data BY row col.
  lv_row_count =  |001|.
  DESCRIBE TABLE it_excel_data LINES DATA(lv_line).


  LOOP AT it_excel_data ASSIGNING FIELD-SYMBOL(<fs_excel_data>).
    IF lv_row_count NE <fs_excel_data>-row.
      IF ls_file_data-application_number IS NOT INITIAL.
        ls_file_data-created_date = sy-datum.
        APPEND  ls_file_data TO gt_cm_bp_data.
      ELSE.
*          ELSE.
        APPEND INITIAL LINE TO gt_final ASSIGNING FIELD-SYMBOL(<fs_final>).
        <fs_final>-app_num = lv_bp.
        CONCATENATE <fs_final>-er_mss  'Duplicate Application number' INTO <fs_final>-er_mss SEPARATED BY space.
        CLEAR : lv_bp.
        CLEAR : ls_file_data.
      ENDIF.
      lv_row_count = <fs_excel_data>-row.
      CLEAR ls_file_data.
    ENDIF.
    CASE <fs_excel_data>-col.
*      WHEN 004.

      WHEN 001.
*        SELECT SINGLE bpext FROM but000 INTO lv_BP WHERE bpext = <fs_excel_data>-value.
*        IF sy-subrc EQ 0.
*          CLEAR : ls_file_data.
*        ELSE.
*          IF <fs_excel_data>-value IS NOT INITIAL.
        ls_file_data-application_number         = <fs_excel_data>-value.
        TRANSLATE ls_file_data-application_number TO UPPER CASE.
*          ELSE.
*            lv_mandt = |Application number is mandatory|.
*          ENDIF.
*        ENDIF.
      WHEN 002.
*          ls_file_data-
      WHEN 003.
        DATA : lv_ptype TYPE char4.
        lv_ptype = <fs_excel_data>-value.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lv_ptype
          IMPORTING
            output = lv_ptype.
        ls_file_data-house_hold                 = lv_ptype.

*      WHEN 4.
*        ls_file_data-pre_reg_date_no            = <fs_excel_data>-value.
*      WHEN 5.
*        ls_file_data-pre_reg_time_no            = <fs_excel_data>-value.
      WHEN 4.
        ls_file_data-mobile_no                 = <fs_excel_data>-value.
      WHEN 5.
*        CONCATENATE <fs_excel_data>-value '.' INTO <fs_excel_data>-value.
*        ls_file_data-title                      = <fs_excel_data>-value.
        DATA : lv_ttype TYPE char4.
        lv_ttype = <fs_excel_data>-value.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lv_ttype
          IMPORTING
            output = lv_ttype.
        ls_file_data-title                 = lv_ttype.
      WHEN 6.
        ls_file_data-first_name                 = <fs_excel_data>-value.
      WHEN 7.
        ls_file_data-middle_name                = <fs_excel_data>-value.
      WHEN 8.
        ls_file_data-last_name                  = <fs_excel_data>-value.
      WHEN 9.
        CONCATENATE <fs_excel_data>-value+6(4) <fs_excel_data>-value+3(2) <fs_excel_data>-value+0(2) INTO  <fs_excel_data>-value.
        ls_file_data-date_of_birth              = <fs_excel_data>-value.

      WHEN 10.
        ls_file_data-grid_code                   = <fs_excel_data>-value.
      WHEN 11.
        ls_file_data-door_no                    = <fs_excel_data>-value.
      WHEN 12.
        ls_file_data-house_no                   = <fs_excel_data>-value.
      WHEN 13.
        ls_file_data-floor_no                   = <fs_excel_data>-value.
      WHEN 14.
        ls_file_data-ward_no                   = <fs_excel_data>-value.
      WHEN 15.
        ls_file_data-street_area                    = <fs_excel_data>-value.      "landmark
      WHEN 16.
        ls_file_data-land_mark                   = <fs_excel_data>-value.
      WHEN 17.
        ls_file_data-district                   = <fs_excel_data>-value.
      WHEN 18.
        ls_file_data-postal_code                = <fs_excel_data>-value.
      WHEN 19.
        ls_file_data-grid_name          = <fs_excel_data>-value.
      WHEN 20.
*        IF <fs_excel_data>-value IS NOT INITIAL.
        ls_file_data-state                      =  'Assam'."<fs_excel_data>-value.
*        ELSE.
*          lv_mandt = |State is mandatory|.
*        ENDIF.
      WHEN 21.
        ls_file_data-mobile_alternate                = <fs_excel_data>-value.
      WHEN 22.
        ls_file_data-email_address             = <fs_excel_data>-value.
      WHEN 23.
        DATA : lv_stype TYPE char4.
        lv_stype = <fs_excel_data>-value.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lv_stype
          IMPORTING
            output = lv_stype.
        ls_file_data-scheme                 = lv_stype.


      WHEN 24.
        ls_file_data-receiving_point              =  <fs_excel_data>-value.
      WHEN 25.
        ls_file_data-photo_identity_proof              =  <fs_excel_data>-value.
      WHEN 26.
        ls_file_data-photo_id_no               =  <fs_excel_data>-value.
      WHEN 27.
        ls_file_data-address_proof      =  <fs_excel_data>-value.
      WHEN 28.
        ls_file_data-address_proof_id_no        =  <fs_excel_data>-value.
      WHEN 29.
        ls_file_data-ownership_proof        =  <fs_excel_data>-value.
      WHEN 30.
        ls_file_data-ownership_proof_id_no          =  <fs_excel_data>-value.
      WHEN 31.
        ls_file_data-bank_name          =  <fs_excel_data>-value.
      WHEN 32.
        ls_file_data-pay_date          =  <fs_excel_data>-value.
      WHEN 33.
        ls_file_data-branch_name          =  <fs_excel_data>-value.
      WHEN 34.
        ls_file_data-trans_type          =  <fs_excel_data>-value.
      WHEN 35.
        ls_file_data-ref_id          =  <fs_excel_data>-value.
      WHEN 36.
        ls_file_data-paid_upamt          =  <fs_excel_data>-value.
      WHEN 37.
        ls_file_data-bank_cle_gl          =  <fs_excel_data>-value.
      WHEN 38.
        ls_file_data-house_bank          =  <fs_excel_data>-value.
      WHEN 39.
        ls_file_data-acc_id         =  <fs_excel_data>-value.
    ENDCASE.

    IF sy-tabix EQ lv_line.
      IF ls_file_data-application_number IS NOT INITIAL.
        ls_file_data-created_date = sy-datum.
        APPEND  ls_file_data TO gt_cm_bp_data.
      ELSE.
        APPEND INITIAL LINE TO gt_final ASSIGNING <fs_final>.
        <fs_final>-app_num = lv_bp.
        CONCATENATE <fs_final>-er_mss 'Duplicate Application number' INTO <fs_final>-er_mss SEPARATED BY space.
        CLEAR : lv_bp.
      ENDIF.
    ENDIF.
  ENDLOOP.
  SORT gt_cm_bp_data  BY application_number.
  DELETE ADJACENT DUPLICATES FROM gt_cm_bp_data COMPARING application_number.
*  MODIFY ZCM_BP_DATA FROM TABLE gt_CM_BP_DATA.
*  COMMIT WORK AND WAIT.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form create_bp
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM create_bp .

  DATA : lv_new_conn  TYPE REF TO zcl_cm_utility,
         lv_posting   TYPE REF TO zcl_fica_scheme_postings,
         lv_bp        TYPE bu_partner,
         lv_sr_no     TYPE crmt_object_id_db,
         l_number     TYPE ad_pagnmbr,
         lv_cont      TYPE vkont_kk,
         lv_cont_flag TYPE char1,        " gsp
         iv_fica      TYPE char1. ",
*         lv_cust_fields TYPE zcs_adp_cust_fields,
*         lv_reg_date    TYPE datum,
*         lv_total       TYPE zde_tot_amnt_nonup.

  SELECT * FROM zscheme_sd_ip1 INTO TABLE @DATA(lt_scheme) .
  SELECT * FROM zcm_group_ca INTO TABLE @DATA(lt_gc_ca) WHERE bp_type = 'ZDOM'.
  IF gt_cm_bp_data IS NOT INITIAL.

    SELECT  application_number , bp_number , vkont , sr_number FROM zcm_bp_data INTO TABLE @DATA(lt_bp) FOR ALL ENTRIES IN
            @gt_cm_bp_data WHERE application_number = @gt_cm_bp_data-application_number.
  ENDIF.
  CREATE OBJECT lv_new_conn.
  CREATE OBJECT lv_posting.

*SORT
  DATA(lv_rows) = lines( gt_cm_bp_data ).
  LOOP AT gt_cm_bp_data ASSIGNING FIELD-SYMBOL(<fs_bp_data>).

    CLEAR : lv_bp,lv_sr_no,lv_cont,iv_fica.

    APPEND INITIAL LINE TO gt_final ASSIGNING FIELD-SYMBOL(<fs_final>).

    lv_new_conn->gt_cm_bp_data = <fs_bp_data>.
    READ TABLE lt_gc_ca INTO ls_cm_group_ca WITH KEY grid_code = <fs_bp_data>-grid_code.
    lv_new_conn->gt_cm_ca_data = ls_cm_group_ca.

    IF line_exists( lt_bp[ application_number = <fs_bp_data>-application_number ] ).
      DATA(la_bp) = lt_bp[ application_number = <fs_bp_data>-application_number ].
      IF la_bp-bp_number IS NOT INITIAL AND la_bp-vkont IS NOT INITIAL AND la_bp-sr_number IS NOT INITIAL.
        <fs_final>-bp_number = la_bp-bp_number.
        <fs_final>-app_num      = <fs_bp_data>-application_number.
        <fs_final>-sr_number    = la_bp-sr_number.
        <fs_final>-con_acc      = la_bp-vkont . "la_bp-bp_number.  Gsp
        CONCATENATE  <fs_final>-er_mss 'Duplicate Application number' INTO <fs_final>-er_mss SEPARATED BY space.
        CLEAR : la_bp.
        CONTINUE.
      ENDIF.
    ENDIF.
    IF la_bp-bp_number IS INITIAL.
      PERFORM validactions_data USING <fs_bp_data>
                                CHANGING <fs_final>-er_mss.
      IF <fs_final>-er_mss IS NOT INITIAL.
        <fs_final>-app_num      = <fs_bp_data>-application_number.
        CLEAR : la_bp.
        CONTINUE.
      ENDIF.

      CALL METHOD lv_new_conn->create_bp
        IMPORTING
          es_bp     = lv_bp
          et_return = ls_return.
      IF ls_return-message IS NOT INITIAL.
        CONCATENATE <fs_final>-er_mss ls_return-message INTO <fs_final>-er_mss SEPARATED BY space.
      ENDIF.

    ELSE.
      lv_bp = la_bp-bp_number.
    ENDIF.
    IF lv_bp IS INITIAL .
      <fs_final>-app_num      = <fs_bp_data>-application_number.
      CONCATENATE <fs_final>-er_mss ', Error in Business Partner creation' INTO <fs_final>-er_mss SEPARATED BY space.
      CONTINUE.
    ENDIF.

*    CLEAR : la_bp.   " gsp
    IF lv_bp IS NOT INITIAL.
      CLEAR lv_cont_flag.
      IF la_bp-vkont IS INITIAL. "gsp
        CALL METHOD lv_new_conn->create_contratacct
          EXPORTING
            ev_partner = lv_bp
          IMPORTING
            ev_cont    = lv_cont
            es_return  = ls_return.

        IF ls_return-message IS NOT INITIAL.
          CONCATENATE <fs_final>-er_mss ls_return-message INTO <fs_final>-er_mss SEPARATED BY space.
        ENDIF.

      ELSE.                           "gsp
        lv_cont = la_bp-vkont.       " gsp
        lv_cont_flag = 'X'.
      ENDIF.   "gsp
      IF lv_cont IS INITIAL .
        <fs_final>-bp_number    = lv_bp.
        <fs_final>-app_num      = <fs_bp_data>-application_number.
        CONCATENATE <fs_final>-er_mss 'Error in contract account creation' INTO <fs_final>-er_mss SEPARATED BY space.
        CONTINUE.
      ENDIF.
*
      IF lv_cont IS NOT INITIAL.
        IF line_exists( lt_scheme[ cust_cl = <fs_bp_data>-scheme ] ).
          DATA(la_scheme) = lt_scheme[ cust_cl = <fs_bp_data>-scheme ].
          DATA(lv_amount) =  la_scheme-tot_amnt_payup.
          DATA(lv_amc)   = <fs_bp_data>-paid_upamt."la_scheme-reg_up  + la_scheme-con_sd_up_dom + la_scheme-admin_chg +  la_scheme-gas_con_sd_upfront.
*          CONCATENATE <fs_dma_data>-reg_date_no+6(4) <fs_dma_data>-reg_date_no+3(2) <fs_dma_data>-reg_date_no+0(2) INTO lv_reg_date.
*          lv_total   = <fs_dma_data>-amt_paid_pymt1.
*          IF lv_amount GT 0 ."OR lv_total IS NOT INITIAL.
*            iv_fica = abap_true.
        ENDIF.
        IF lv_cont IS NOT INITIAL AND lv_bp IS NOT INITIAL AND lv_cont_flag IS INITIAL. " gsp
          CALL METHOD lv_posting->post_fpsec1_connection_gas
            EXPORTING
              im_sec_gpart  = lv_bp
              im_sec_vkont  = lv_cont
              im_sec_scheme = la_scheme-cust_cl
              im_sec_amc    = lv_amc
*             im_scheme_name    = la_scheme-scheme_name
*             im_totamount  = la_scheme-tot_amnt_payup
*             im_paidamount = lv_total
            IMPORTING
              ex_return     = DATA(lv_ret).
*
*
          IF lv_ret IS NOT INITIAL.
            CONCATENATE <fs_final>-er_mss  lv_ret-message INTO <fs_final>-er_mss SEPARATED BY space.
            CONTINUE.
*
*              CLEAR lv_amount.
          ENDIF.

*          payment update for initial upfront payment

          IF lv_cont IS NOT INITIAL AND lv_bp IS NOT INITIAL AND lv_cont_flag IS INITIAL. " gsp
            CALL METHOD lv_posting->post_payment_lot_query1
              EXPORTING
                im_vkont        = lv_cont
                im_gpart        = lv_bp
                im_paidamount   = <fs_bp_data>-paid_upamt
                im_bank_name    = <fs_bp_data>-bank_name
                im_payment_date = <fs_bp_data>-pay_date
                im_branch_name  = <fs_bp_data>-branch_name
                im_type_trans   = <fs_bp_data>-trans_type
                im_bvrko        = <fs_bp_data>-bank_cle_gl
                im_hbkid        = <fs_bp_data>-house_bank
                im_hktid        = <fs_bp_data>-acc_id
                im_scheme       = la_scheme-cust_cl
*               im_scheme_name  = la_scheme-scheme_name
*               im_totamount    = la_scheme-tot_amnt_payup
*               im_paidamount   = lv_total
              IMPORTING
                ex_return       = DATA(lv_ret1).
*
*
            IF lv_ret IS NOT INITIAL.
              CONCATENATE <fs_final>-er_mss  lv_ret-message INTO <fs_final>-er_mss SEPARATED BY space.
              CONTINUE.
*
*              CLEAR lv_amount.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
      CALL METHOD lv_new_conn->create_sr
        EXPORTING
          iv_bp     = lv_bp
          iv_ca     = lv_cont
*         iv_fica   = iv_fica
*         iv_cust_fields = lv_cust_fields
        IMPORTING
          es_req_no = lv_sr_no.

      IF lv_sr_no IS INITIAL.
        <fs_final>-bp_number    = lv_bp.
        <fs_final>-app_num      = <fs_bp_data>-application_number.
        <fs_final>-con_acc      = lv_cont.
      ENDIF.

      IF lv_sr_no IS INITIAL AND lv_cont IS NOT INITIAL AND lv_bp IS NOT INITIAL.  "GSP
        CONCATENATE <fs_final>-er_mss 'Error in SR creation' INTO <fs_final>-er_mss SEPARATED BY space.                          "GSP
*          CONTINUE.                                                                   "GSP
      ENDIF.
      "GSP
      "MAIL
*          IF lv_sr_no IS NOT INITIAL AND <fs_bp_data>-email_address IS NOT INITIAL.
*            CALL METHOD lv_new_conn->email_send
*              EXPORTING
*                iv_appno = <fs_dma_data>-application_number
*                iv_srreq = lv_sr_no
*                iv_crno  = lv_cont
*                iv_email = <fs_dma_data>-email_address
*                iv_cust  = abap_true.
*          ENDIF.

      "SMS
*          IF lv_sr_no IS NOT INITIAL AND <fs_bp_data>-cell_phone IS NOT INITIAL.
*            CLEAR : l_number.
*            IF sy-sysid = 'S4D' OR sy-sysid = 'S4Q'.
*              l_number  = '9818690967'."Manoj Pachava
*            ELSEIF sy-sysid = 'S4P'.
*              l_number  = <fs_dma_data>-cell_phone.
*            ENDIF.

*            CALL METHOD lv_new_conn->sms_send_customer
*              EXPORTING
*                lv_number  = l_number
*                lv_request = lv_sr_no
*                lv_ca      = lv_cont
*                lv_bp      = lv_bp.

*          ENDIF.

      <fs_bp_data>-sr_number = lv_sr_no.
      <fs_bp_data>-bp_number = lv_bp.
      <fs_bp_data>-vkont     = lv_cont.
      <fs_bp_data>-sr_number = lv_sr_no.
      <fs_bp_data>-bp_kind          = lv_new_conn->gt_cm_ca_data-bp_type.
      <fs_bp_data>-created_date   = sy-datum.


*      DATA date TYPE d.
*      IF <fs_bp_data>-date_of_birth NE '00000000'.
*        date = <fs_bp_data>-date_of_birth.
*        CLEAR <fs_bp_data>-date_of_birth.
*        <fs_bp_data>-date_of_birth = |{ date DATE = USER }|. "RAW, ISO, USER, ENVIRONMENT
*      ELSE.
*        CLEAR <fs_bp_data>-date_of_birth.
*      ENDIF.


      MODIFY zcm_bp_data FROM <fs_bp_data>.
      COMMIT WORK .
*    ELSE.
*      <fs_final>-er_mss       = |Invalid GA Code|.f
    ENDIF.
    CLEAR : la_bp. "gsp
    IF lv_bp IS NOT INITIAL AND lv_cont IS NOT INITIAL AND lv_sr_no IS NOT INITIAL.
      <fs_final>-bp_number = lv_bp.
      <fs_final>-app_num      = <fs_bp_data>-application_number.
      <fs_final>-sr_number    = lv_sr_no.
      <fs_final>-con_acc      = lv_cont.
      <fs_final>-er_mss       = |Record created successfully |.
    ELSE.
      <fs_final>-bp_number    = lv_bp.
      <fs_final>-app_num      = <fs_bp_data>-application_number.
      <fs_final>-er_mss       = <fs_final>-er_mss.
*      <fs_final>-er_mss       = |Error in creation of BP/CA/SR|.
    ENDIF.
* BOC by Prabh on 15/01/2023
    cl_progress_indicator=>progress_indicate(
      EXPORTING
         i_text               = | Total Number of records processed  { sy-tabix } / { lv_rows } |
         i_output_immediately  = 'X'
    ).
* EOC by Prabh on 15/01/2023
*    CLEAR date.
  ENDLOOP.



ENDFORM.
*&---------------------------------------------------------------------*
*& Form ALV_dispaly
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM alv_dispaly .

  DATA: ls_layout  TYPE slis_layout_alv,
        ls_variant TYPE disvariant.

  ls_layout-zebra = abap_true.
  ls_layout-colwidth_optimize = abap_true.

  CONSTANTS : lc_srreq      TYPE char50  VALUE 'SR_NUMBER',
              lc_srname     TYPE char50  VALUE 'Service Request',
              lc_error      TYPE char50  VALUE 'ER_MSS',
              lc_errname    TYPE char50  VALUE  'Remarks',
              lc_appno      TYPE char50  VALUE 'APP_NUM',
              lc_appno_name TYPE char50  VALUE 'Application Number',
              lc_bp         TYPE char50  VALUE 'BP_NUMBER',
              lc_bpname     TYPE char50  VALUE 'PARTNER',
              lc_cont       TYPE char50  VALUE 'CON_ACC',
              lc_contname   TYPE char50  VALUE 'Contract account'..

  IF p_bp IS NOT INITIAL.
    mig_fieldcat      1     lc_appno      lc_appno_name         .
    mig_fieldcat      2     lc_bp         lc_bpname  .
    mig_fieldcat      3     lc_srreq      lc_srname .
    mig_fieldcat      4     lc_cont       lc_contname   .
    mig_fieldcat      5     lc_error      lc_errname   .

  ENDIF.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program       = sy-repid
      i_callback_user_command  = 'USER_COMMAND'
      it_fieldcat              = gt_fieldcat
      is_layout                = ls_layout
      i_callback_pf_status_set = 'SET_PF_STATUS'
      i_save                   = 'A'
      is_variant               = ls_variant
    TABLES
      t_outtab                 = gt_final
    EXCEPTIONS
      program_error            = 1
      OTHERS                   = 2.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form download_cust_template
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM download_cust_template .
  DATA: lo_excel              TYPE REF TO zcl_excel,
        lo_worksheet          TYPE REF TO zcl_excel_worksheet,
        lo_style              TYPE REF TO zcl_excel_style,
        lo_style_date         TYPE REF TO zcl_excel_style,
        lo_style_editable     TYPE REF TO zcl_excel_style,
        lo_data_validation    TYPE REF TO zcl_excel_data_validation,
        lt_field_catalog      TYPE zexcel_t_fieldcatalog,
        ls_table_settings     TYPE zexcel_s_table_settings,
        ls_table_settings_out TYPE zexcel_s_table_settings,
        lv_style_guid         TYPE zexcel_cell_style,
        lv_row                TYPE char10,
        lo_border_light       TYPE REF TO zcl_excel_style_border,
        lv_validation         TYPE string,
        lo_fill               TYPE REF TO zcl_excel_style_fill,
        lo_fill_cell          TYPE REF TO zexcel_fill_type.

  FIELD-SYMBOLS: <lfs_field_catalog> TYPE zexcel_s_fieldcatalog.

  " Creates active sheet
  CREATE OBJECT: lo_excel, lo_border_light, lo_fill.

  " Get active sheet
  lo_worksheet = lo_excel->get_active_worksheet( ).
  lo_worksheet->set_title( ip_title = 'Customer' ).

  "C_STYLE_WARNING
  "Drop down for BP Type "
  lv_validation = '"ZDOM"'.
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.

*    lo_data_validation->type           = zcl_excel_data_validation=>C_STYLE_WARNING.
*  lo_style->fill->fgcolor-rgb  = zcl_excel_style_color=>c_white.
* lo_border_light->border_style = zcl_excel_style_border=>c_border_thin.
*  lo_fill->type =                   zcl_excel_style_fill=>c_fill_pattern_lightgray.
*  lo_data_validation->type           = zcl_excel_data_validation=>C_STYLE_WARNING.
*  lo_style->type =     zcl_excel_style_fill=>C_FILL_PATTERN_LIGHTGRAY.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'B'.
  lo_data_validation->cell_column_to = 'B'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  "Drop down for Premise Type "
  lv_validation = '"0014, 0015, 0016, 0017"'.
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'C'.
  lo_data_validation->cell_column_to = 'C'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = ''.
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_operator_greaterthan.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'D'.
  lo_data_validation->cell_column_to = 'D'.
  lo_data_validation->allowblank     = ' '.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  "Drop down for BP Type "Begin
  lv_validation = '"0001, 0002, 0006, 0007, 0009, 00011"'.
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'E'.
  lo_data_validation->cell_column_to = 'E'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  "Drop down for BP Type "Begin
*  lv_validation = '"0001, 0002, 0006, 0007, 0009, 00011"'.
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_date.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'I'.
  lo_data_validation->cell_column_to = 'I'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"DUL, DIB, TIN, MOR, SIV, NAZ, NAH, DIG, GOL, JOR, MAR, TIT, BAR"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'J'.
  lo_data_validation->cell_column_to = 'J'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

*   lv_validation = '"1, 2, 3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,"'.
*   lv_validation = '"26,  27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,"'.
*   lv_validation = '"  60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88,"'.
*    lv_validation = '"89,  90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100"'.
*
*  "Drop down for BP Type "Begin
*  lo_data_validation = lo_worksheet->add_new_data_validation( ).
*  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
*  lo_data_validation->formula1       = lv_validation.
*  lo_data_validation->cell_row       = 2.
*  lo_data_validation->cell_row_to    = 10000.
*  lo_data_validation->cell_column    = 'N'.
*  lo_data_validation->cell_column_to = 'N'.
*  lo_data_validation->allowblank     = 'X'.
*  lo_data_validation->showdropdown   = 'X'.
*  CLEAR: lv_validation.

  lv_validation = '"Duliajan, Dibrugarh, Tinsukia, Moran, Sivsagar, Nazira, Naharkatia, Digboi, Golaghat, Jorhat, Margherita, Titabar, Barmathurapur"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'S'.
  lo_data_validation->cell_column_to = 'S'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"01, 02, 03"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'W'.
  lo_data_validation->cell_column_to = 'W'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"FS0002, ZVOT, ZAADH, ZPAN, ZANY"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'Y'.
  lo_data_validation->cell_column_to = 'Y'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"ZLAND, ZELBL, ZTEBL, ZNOJO, ZVOT, FS0002, ZANY"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'AA'.
  lo_data_validation->cell_column_to = 'AA'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"ZINDC, ZSSC, ZPOSS, ZANY"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'AC'.
  lo_data_validation->cell_column_to = 'AC'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"RTGS, NEFT, Cheque, Cash, POS"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'AH'.
  lo_data_validation->cell_column_to = 'AH'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"0001, 0002, 0003"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'AM'.
  lo_data_validation->cell_column_to = 'AM'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

*  lv_validation  = '"ZDOM, ZCOM, ZIND"'.
  "Drop down for BP Type "end.


*
*  "Add dropdown for Meter Location
*  lo_data_validation = lo_worksheet->add_new_data_validation( ).
*  lv_validation = |"'001, '002, '003, '004"|.
*
*  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
*  lo_data_validation->formula1       = lv_validation.
*  lo_data_validation->cell_row       = 2.
*  lo_data_validation->cell_row_to    = 10000.
*  lo_data_validation->cell_column    = 'M'.
*  lo_data_validation->cell_column_to = 'M'.
*  lo_data_validation->allowblank     = 'X'.
*  lo_data_validation->showdropdown   = 'X'.


  " sheet style (white background)
*  lo_style = lo_excel->add_new_style( ).
*  lo_style->fill->filltype = zcl_excel_style_fill=>c_fill_solid.
*  lo_style->fill->fgcolor-rgb  = zcl_excel_style_color=>c_white.
*
*  lo_border_light->border_style = zcl_excel_style_border=>c_border_thin.
*  lo_style->borders->allborders = lo_border_light.
*  lv_style_guid = lo_style->get_guid( ).
*
*  lo_worksheet->zif_excel_sheet_properties~set_style( lv_style_guid ).

  " sheet style (white background)

*  lo_style->fill->filltype = zcl_excel_style_fill=>c_fill_solid.
*  lo_style->fill->fgcolor-rgb  = zcl_excel_style_color=>c_white.

  lo_style = lo_excel->add_new_style( ).
  lo_border_light->border_style = zcl_excel_style_border=>c_border_thin.
  lo_style->borders->allborders = lo_border_light.
  lv_style_guid = lo_style->get_guid( ).
  lo_worksheet->zif_excel_sheet_properties~set_style( lv_style_guid ).
  lo_style->fill->fgcolor-rgb  = zcl_excel_style_color=>c_white.

  lt_field_catalog = zcl_excel_common=>get_fieldcatalog( ip_table = gt_cm_bp_data ).


  LOOP AT lt_field_catalog ASSIGNING <lfs_field_catalog>.
    CASE <lfs_field_catalog>-fieldname.

      WHEN 'APPLICATION_NUMBER'.
        <lfs_field_catalog>-position   = 1.
        <lfs_field_catalog>-style_header   = lo_fill->c_fill_pattern_darkgray.
*        <lfs_field_catalog>-dynpfld    = abap_true.
*        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = |Application Number|.
*        lo_style->fill->fgcolor-rgb  = zcl_excel_style_color=>c_red.

      WHEN 'BP_KIND'.
        <lfs_field_catalog>-position   = 2.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = |BP Category|.
      WHEN 'HOUSE_HOLD'.
        <lfs_field_catalog>-position   = 3.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'House Hold Type'.
      WHEN 'MOBILE_NO'.
        <lfs_field_catalog>-position   = 4.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Mobile No'.
      WHEN 'TITLE'.
        <lfs_field_catalog>-position   = 5.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Title'.
      WHEN 'FIRST_NAME'.
        <lfs_field_catalog>-position   = 6.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'First name'.
      WHEN 'MIDDLE_NAME'.
        <lfs_field_catalog>-position   = 7.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Middle Name'.
      WHEN 'LAST_NAME'.
        <lfs_field_catalog>-position   = 8.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Last Name'.
      WHEN 'DATE_OF_BIRTH'.
        <lfs_field_catalog>-position   = 9.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Date of Birth'.
      WHEN 'GRID_CODE'.
        <lfs_field_catalog>-position   = 10.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Grid Code'.
      WHEN 'DOOR_NO'.
        <lfs_field_catalog>-position   = 11.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = |Door No|.
      WHEN 'HOUSE_NO'.
        <lfs_field_catalog>-position   = 12.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = |House No|.
      WHEN 'FLOOR_NO'.
        <lfs_field_catalog>-position   = 13.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Floor No'.
      WHEN 'WARD_NO'.
        <lfs_field_catalog>-position   = 14.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Ward No.'.
      WHEN 'STREET_AREA'.
        <lfs_field_catalog>-position   = 15.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Street/Area'.
      WHEN 'LAND_MARK'.
        <lfs_field_catalog>-position   = 16.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Landmark'.
      WHEN 'DISTRICT'.
        <lfs_field_catalog>-position   = 17.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'District'.
      WHEN 'POSTAL_CODE'.
        <lfs_field_catalog>-position   = 18.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Postal code'.
      WHEN 'GRID_NAME'.
        <lfs_field_catalog>-position   = 19.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Grid Name'.
      WHEN 'STATE'.
        <lfs_field_catalog>-position   = 20.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'state'.
      WHEN 'MOBILE_ALTERNATE'.
        <lfs_field_catalog>-position   = 21.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Mobile Number (Alternate)'.
      WHEN 'EMAIL_ADDRESS'.
        <lfs_field_catalog>-position   = 22.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Email Address'.
      WHEN 'SCHEME'.
        <lfs_field_catalog>-position   = 23.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Scheme ID'.
      WHEN 'RECEIVING_POINT'.
        <lfs_field_catalog>-position   = 24.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Receiving Point'.
*      WHEN 'ZUPAMT'.
*        <lfs_field_catalog>-position   = 25.
*        <lfs_field_catalog>-dynpfld    = abap_true.
*        <lfs_field_catalog>-style      = lo_style->get_guid( ).
*        <lfs_field_catalog>-scrtext_l  = 'Received Upfront Amount'.
      WHEN 'PHOTO_IDENTITY_PROOF'.
        <lfs_field_catalog>-position   = 25.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Photo Identity proof'.
      WHEN 'PHOTO_ID_NO'.
        <lfs_field_catalog>-position   = 26.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Photo Id Number'.
      WHEN 'ADDRESS_PROOF'.
        <lfs_field_catalog>-position   = 27.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Address ID Proof'.
      WHEN 'ADDRESS_PROOF_ID_NO'.
        <lfs_field_catalog>-position   = 28.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Address ID Number'.
      WHEN 'OWNERSHIP_PROOF'.
        <lfs_field_catalog>-position   = 29.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Ownership ID Proof'.
      WHEN 'OWNERSHIP_PROOF_ID_NO'.
        <lfs_field_catalog>-position   = 30.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Ownership ID Number'.
      WHEN 'BANK_NAME'.
        <lfs_field_catalog>-position   = 31.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Bank Name'.
      WHEN 'PAY_DATE'.
        <lfs_field_catalog>-position   = 32.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Date of Payment'.
      WHEN 'BRANCH_NAME'.
        <lfs_field_catalog>-position   = 33.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Branch Name'.
      WHEN 'TRANS_TYPE'.
        <lfs_field_catalog>-position   = 34.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Type of Transaction'.
      WHEN 'REF_ID'.
        <lfs_field_catalog>-position   = 35.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Reference ID'.
      WHEN 'PAID_UPAMT'.
        <lfs_field_catalog>-position   = 36.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Paid Amount'.
      WHEN 'BANK_CLE_GL'.
        <lfs_field_catalog>-position   = 37.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Bank Clearing GL'.
      WHEN 'HOUSE_BANK'.
        <lfs_field_catalog>-position   = 38.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'House Bank ID'.
      WHEN 'ACC_ID'.
        <lfs_field_catalog>-position   = 39.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Account ID'.
      WHEN OTHERS.
        <lfs_field_catalog>-dynpfld = abap_false.
    ENDCASE.
  ENDLOOP.

  ls_table_settings-table_style       = zcl_excel_table=>builtinstyle_medium2.
  ls_table_settings-nofilters         = abap_true.

  lo_worksheet->bind_table( EXPORTING
                              ip_table          = gt_cm_bp_data
                              it_field_catalog  = lt_field_catalog
                              is_table_settings = ls_table_settings
                              iv_default_descr = 'L'
                            IMPORTING
                              es_table_settings = ls_table_settings_out ).

* Create output
  PERFORM file_download USING lo_excel.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form file_download
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LO_EXCEL
*&---------------------------------------------------------------------*
FORM file_download  USING    cl_excel.
  DATA: lv_filename  TYPE string,
        lv_path      TYPE string,
        lv_fullpath  TYPE string,
        lv_message   TYPE string,
        lt_rawdata   TYPE solix_tab,
        lv_bytecount TYPE i,
        lv_xdata     TYPE xstring,
        lo_writer    TYPE REF TO zif_excel_writer,
        lo_error     TYPE REF TO zcx_excel.

  TRY.
      CREATE OBJECT lo_writer TYPE zcl_excel_writer_2007.

      lv_xdata = lo_writer->write_file( cl_excel ).

      lt_rawdata = cl_bcs_convert=>xstring_to_solix( iv_xstring  = lv_xdata ).
      lv_bytecount = xstrlen( lv_xdata ).

      CALL METHOD cl_gui_frontend_services=>file_save_dialog
        EXPORTING
          window_title              = 'Template Download'
          default_extension         = 'xlsx'
        CHANGING
          filename                  = lv_filename
          path                      = lv_path
          fullpath                  = lv_fullpath
        EXCEPTIONS
          cntl_error                = 1
          error_no_gui              = 2
          not_supported_by_gui      = 3
          invalid_default_file_name = 4
          OTHERS                    = 5. "#EC NOTEXT
      IF lv_fullpath IS NOT INITIAL.
* Get trailing blank
        cl_gui_frontend_services=>gui_download( EXPORTING bin_filesize = lv_bytecount
                                                          filename     = lv_filename
                                                          filetype     = 'BIN'
                                                 CHANGING data_tab     = lt_rawdata
                                               EXCEPTIONS OTHERS       = 1 ).
        IF sy-subrc <> 0.
          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                  WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 INTO lv_message.
          RAISE EXCEPTION TYPE zcx_excel EXPORTING error = lv_message.
        ENDIF.
      ENDIF.

    CATCH zcx_excel INTO lo_error.
      RAISE EXCEPTION lo_error.
  ENDTRY.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form Validactions_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> <FS_DMA_DATA>
*&      <-- <FS_FINAL>_ER_MSS
*&---------------------------------------------------------------------*
FORM validactions_data  USING    p_bp_data TYPE zcm_bp_data
                        CHANGING p_final.

  IF p_bp_data-remarks IS NOT INITIAL.
    CONCATENATE  p_final p_bp_data-remarks INTO p_final SEPARATED BY space.
  ENDIF.
  IF p_bp_data-application_number IS INITIAL ."AND lv_BP IS INITIAL .
    CONCATENATE  p_final 'Application number is mandatory' INTO p_final SEPARATED BY space.
  ENDIF.

*  IF p_bp_data-date_of_birth IS INITIAL.
*    CONCATENATE  p_final 'DOB is mandatory' INTO p_final SEPARATED BY space.
*  ENDIF.

*  IF p_bp_data-date_of_birth IS NOT INITIAL.
*    DATA: lv_dob TYPE string .
*    lv_dob = p_bp_data-date_of_birth.
*    IF lv_dob+2(1) CO '/.' AND
*      lv_dob+5(1) CO '/.' AND
*     lv_dob+10(1) CO '/.' .
*    ELSE.
*      CONCATENATE  p_final 'DOB format is Wrong,' INTO p_final SEPARATED BY space.
*    ENDIF.
*  ENDIF.

  IF p_bp_data-bp_kind IS INITIAL.
    CONCATENATE  p_final 'BP Category is mandatory,' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_bp_data-house_hold IS INITIAL.
    CONCATENATE  p_final 'House Hold type is mandatory,' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_bp_data-mobile_no IS INITIAL.
    CONCATENATE  p_final 'Mobile No is mandatory,' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_bp_data-mobile_no IS NOT INITIAL.
    DATA(lv_mo_length) = strlen( p_bp_data-mobile_no ).
    IF lv_mo_length <> 10.
      CONCATENATE  p_final 'Mobile No should be 10 digits,' INTO p_final SEPARATED BY space.
    ENDIF.
*    IF p_bp_data-mobile_no CN '0123456789'.
*      else.
*      CONCATENATE  p_final 'Mobile number contains inavlid characters' INTO p_final SEPARATED BY space.
*    ENDIF.
  ENDIF.

  IF p_bp_data-first_name IS INITIAL.
    CONCATENATE  p_final 'First Name is mandatory,' INTO p_final SEPARATED BY space.
  ENDIF.

*  IF p_bp_data-last_name IS INITIAL.
*    CONCATENATE  p_final 'Last Name is mandatory,' INTO p_final SEPARATED BY space.
*  ENDIF.

  IF p_bp_data-grid_code IS INITIAL.
    CONCATENATE  p_final 'Grid Code is mandatory,' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_bp_data-ward_no IS INITIAL.
    CONCATENATE  p_final 'Ward No is mandatory,' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_bp_data-district IS INITIAL.
    CONCATENATE  p_final 'District is mandatory,' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_bp_data-postal_code IS INITIAL.
    CONCATENATE  p_final 'Postal Code is mandatory,' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_bp_data-postal_code IS NOT INITIAL.
    DATA(lv_p_length) = strlen( p_bp_data-postal_code ).
    IF lv_p_length <> 6.
      CONCATENATE  p_final 'Postal code should be 6 digit,' INTO p_final SEPARATED BY space.
    ENDIF.
  ENDIF.

*  IF p_bp_data-email_address IS INITIAL.
*    CONCATENATE  p_final 'Email Address is mandatory,' INTO p_final SEPARATED BY space.
*  ENDIF.

  IF p_bp_data-email_address IS NOT INITIAL.
    DATA: iv_email TYPE string.
    iv_email =  p_bp_data-email_address.
    IF iv_email CP '+*.+*@+*.++*' OR
       iv_email CP '+*@+*.++*'.
      CONDENSE iv_email NO-GAPS.
      IF iv_email CO 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890.@-_ '.
*        CONCATENATE  p_final 'Email address is correct' INTO p_final SEPARATED BY space.
      ELSE.
        CONCATENATE  p_final 'Inavlid email address format,' INTO p_final SEPARATED BY space.
      ENDIF.
    ELSE.
      CONCATENATE  p_final 'Inavlid email address format,' INTO p_final SEPARATED BY space.
    ENDIF.
  ENDIF.

  IF p_bp_data-scheme IS INITIAL.
    CONCATENATE  p_final 'Scheme is mandatory' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_bp_data-photo_identity_proof IS INITIAL.
    CONCATENATE  p_final 'Photo Identity Proof is mandatory' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_bp_data-photo_id_no IS INITIAL.
    CONCATENATE  p_final 'Photo ID No is mandatory' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_bp_data-address_proof IS INITIAL.
    CONCATENATE  p_final 'Address Proof is mandatory' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_bp_data-address_proof_id_no IS INITIAL.
    CONCATENATE  p_final ' Address Proof ID No is mandatory' INTO p_final SEPARATED BY space.
  ENDIF.

*  IF p_bp_data-ownership_proof IS INITIAL.
*    CONCATENATE  p_final 'Ownership Proof is mandatory' INTO p_final SEPARATED BY space.
*  ENDIF.
*
*  IF p_bp_data-ownership_proof_id_no IS INITIAL.
*    CONCATENATE  p_final 'Ownership Proof ID No is mandatory' INTO p_final SEPARATED BY space.
*  ENDIF.


  IF p_bp_data-ownership_proof = 'ZGST' .

    IF p_bp_data-ownership_proof_id_no IS NOT INITIAL.
      DATA(lv_oid) = strlen( p_bp_data-ownership_proof_id_no ).
      IF lv_oid <> 15.
        CONCATENATE  p_final 'GST Number must be 15 digits,' INTO p_final SEPARATED BY space.
      ENDIF.
    ENDIF.
  ENDIF.

  IF p_bp_data-address_proof = 'ZGST'.

    IF p_bp_data-address_proof_id_no IS NOT INITIAL.
      DATA(lv_aid) = strlen( p_bp_data-address_proof_id_no ).
      IF lv_aid <> 15.
        CONCATENATE  p_final ' GST Number must be 15 digits,' INTO p_final SEPARATED BY space.
      ENDIF.
    ENDIF.
  ENDIF.

  IF  p_bp_data-photo_identity_proof = 'ZGST'.
    IF p_bp_data-photo_id_no IS NOT INITIAL.
      DATA(lv_pid) = strlen( p_bp_data-photo_id_no ).
      IF lv_pid <> 15.
        CONCATENATE  p_final 'GST Number must be 15 digits,' INTO p_final SEPARATED BY space.
      ENDIF.
    ENDIF.
  ENDIF.

  IF p_bp_data-bank_cle_gl IS INITIAL.
    CONCATENATE  p_final 'Bank Clearing GL is mandatory' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_bp_data-house_bank IS INITIAL.
    CONCATENATE  p_final 'House Bank ID is mandatory' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_bp_data-acc_id IS INITIAL.
    CONCATENATE  p_final 'Account ID is mandatory' INTO p_final SEPARATED BY space.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form get_file_data_bp_excel
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM get_file_data_bp_excel .
  DATA:lr_data    TYPE REF TO data,
       wa_data    TYPE zcm_bp_data_s,
       lv_int     TYPE i,
       lv_val     TYPE string,
       lv_remarks TYPE string.
  CONSTANTS: lv_pointer TYPE i VALUE 79.
  FIELD-SYMBOLS:<lt_data> TYPE STANDARD TABLE.
  lr_data = NEW zcl_utility_excel( )->readexcelfile( v_file = CONV string( p_bp ) ).
  ASSIGN lr_data->* TO <lt_data>.

  LOOP AT <lt_data> ASSIGNING FIELD-SYMBOL(<wa_data>).
    IF sy-tabix = 1.
      CONTINUE.
    ENDIF.
    DO lv_pointer TIMES.
      ASSIGN COMPONENT sy-index OF STRUCTURE <wa_data> TO FIELD-SYMBOL(<wa_xl_data>).
      ASSIGN COMPONENT sy-index OF STRUCTURE wa_data TO FIELD-SYMBOL(<wa_tab_data>).
      IF <wa_xl_data> IS ASSIGNED AND <wa_xl_data> IS NOT INITIAL AND <wa_tab_data> IS ASSIGNED.
        CASE sy-index.

          WHEN 001.
            TRANSLATE <wa_xl_data> TO UPPER CASE.
            <wa_tab_data> = <wa_xl_data>.
            CLEAR <wa_xl_data>.
          WHEN 003.
            DATA : lv_ptype TYPE char4.
            lv_ptype = <wa_xl_data>.
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                input  = lv_ptype
              IMPORTING
                output = lv_ptype.
            <wa_tab_data> = lv_ptype..
            CLEAR <wa_xl_data>.

          WHEN 005.
            DATA : lv_ttype TYPE char4.
            lv_ttype = <wa_xl_data>.
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                input  = lv_ttype
              IMPORTING
                output = lv_ttype.
            <wa_tab_data> = lv_ttype..
            CLEAR <wa_xl_data>.

          WHEN  009.

            CONCATENATE    <wa_xl_data>+0(4) <wa_xl_data>+5(2) <wa_xl_data>+8(2) INTO  <wa_xl_data> .
            <wa_tab_data> = <wa_xl_data>.
            CLEAR <wa_xl_data>.

          WHEN 032.

            CLEAR : lv_int.
            lv_val = <wa_xl_data>+0(4).
            CALL FUNCTION 'CONVERT_STRING_TO_INTEGER'
              EXPORTING
                p_string      = lv_val
              IMPORTING
                p_int         = lv_int
              EXCEPTIONS
                overflow      = 1
                invalid_chars = 2
                OTHERS        = 3.
            IF sy-subrc <> 0.
              CONCATENATE    <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data> .
              <wa_tab_data> = <wa_xl_data>.
            ELSE .
              CONCATENATE <wa_xl_data>+8(2) <wa_xl_data>+5(2) <wa_xl_data>+0(4) INTO  <wa_xl_data> SEPARATED BY '.'.
              <wa_tab_data> = <wa_xl_data>.
            ENDIF.
            CLEAR <wa_xl_data>.

          WHEN 023.
            DATA : lv_stype TYPE char2.
            lv_stype = <wa_xl_data>.
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                input  = lv_stype
              IMPORTING
                output = lv_stype.
            <wa_tab_data> = lv_stype..
            CLEAR <wa_xl_data>.

          WHEN 037.
            DATA : lv_gtype TYPE char10.
            lv_gtype = <wa_xl_data>.
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                input  = lv_gtype
              IMPORTING
                output = lv_gtype.
            <wa_tab_data> = lv_gtype.
            CLEAR <wa_xl_data>.

          WHEN 039.
            DATA : lv_atype TYPE char4.
            lv_atype = <wa_xl_data>.
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                input  = lv_atype
              IMPORTING
                output = lv_atype.
            <wa_tab_data> = lv_atype.
            CLEAR <wa_xl_data>.
*          WHEN 004.
*            CLEAR : lv_int,lv_val.
*            lv_val = <wa_xl_data>+0(4).
*            CALL FUNCTION 'CONVERT_STRING_TO_INTEGER'
*              EXPORTING
*                p_string      = lv_val
*              IMPORTING
*                p_int         = lv_int
*              EXCEPTIONS
*                overflow      = 1
*                invalid_chars = 2
*                OTHERS        = 3.
*            IF sy-subrc <> 0.
** Implement suitable error handling here
*
*              CONCATENATE  <wa_xl_data>+0(2) <wa_xl_data>+3(2) <wa_xl_data>+6(4)  INTO  <wa_xl_data> SEPARATED BY '.'.
*              <wa_tab_data> = <wa_xl_data>.
*
*            ELSE .
*
*              CONCATENATE <wa_xl_data>+8(2) <wa_xl_data>+5(2) <wa_xl_data>+0(4) INTO  <wa_xl_data> SEPARATED BY '.'.
*              <wa_tab_data> = <wa_xl_data>.
*
*            ENDIF.

*          WHEN 005. " Titlte
**            CONCATENATE <wa_xl_data> '.' INTO <wa_xl_data>.
*            TRANSLATE <wa_xl_data> TO UPPER CASE.
*            <wa_tab_data> = <wa_xl_data>.
*          WHEN 009.
*
*            DATA: lv_dob TYPE string .
*            lv_dob = <wa_xl_data>.
*            IF lv_dob+2(1) NE '/' AND
*              lv_dob+5(1) NE '/'.
*              CONCATENATE  lv_remarks 'DOB format is Wrong,' INTO lv_remarks SEPARATED BY space.
*            ELSE.
*              CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data> .
*              <wa_tab_data> = <wa_xl_data>.
*            ENDIF.


*
*            ELSE ."1976-02-14
*              CONCATENATE <wa_xl_data>+0(4) <wa_xl_data>+5(2) <wa_xl_data>+8(2) INTO  <wa_xl_data> .
*              <wa_tab_data> = <wa_xl_data>.
*            ENDIF.
*            CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data>.
*            <wa_tab_data> = <wa_xl_data>.


*            CONCATENATE <wa_xl_data>+8(2) <wa_xl_data>+5(2) <wa_xl_data>+0(4) INTO  <wa_xl_data> SEPARATED BY '.'.
*            <wa_tab_data> = <wa_xl_data>.

*          WHEN 49.
*            TRANSLATE <wa_xl_data> TO UPPER CASE.
*            IF <wa_xl_data> EQ 'NO'.
*              CLEAR : <wa_xl_data>.
*            ENDIF.
*            <wa_tab_data> = <wa_xl_data>.
*          WHEN 52.
*            REPLACE ALL OCCURRENCES OF REGEX '[^\d]' IN <wa_xl_data> WITH ''.
*            <wa_xl_data>        = <wa_xl_data> / 100.
*            <wa_tab_data> = <wa_xl_data>.
*          WHEN 055.
*            CLEAR : lv_int.
*            lv_val = <wa_xl_data>+0(4).
*            CALL FUNCTION 'CONVERT_STRING_TO_INTEGER'
*              EXPORTING
*                p_string      = lv_val
*              IMPORTING
*                p_int         = lv_int
*              EXCEPTIONS
*                overflow      = 1
*                invalid_chars = 2
*                OTHERS        = 3.
*            IF sy-subrc <> 0.
** Implement suitable error handling here
*              CONCATENATE  <wa_xl_data>+0(2) <wa_xl_data>+3(2) <wa_xl_data>+6(4)  INTO  <wa_xl_data> SEPARATED BY '.'.
**              CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data> SEPARATED BY '.'.
*              <wa_tab_data> = <wa_xl_data>.
*
*            ELSE .
*
*              CONCATENATE <wa_xl_data>+8(2) <wa_xl_data>+5(2) <wa_xl_data>+0(4) INTO  <wa_xl_data> SEPARATED BY '.'.
*              <wa_tab_data> = <wa_xl_data>.
*
*            ENDIF.
*            CONCATENATE <wa_xl_data>+8(2) <wa_xl_data>+5(2) <wa_xl_data>+0(4) INTO  <wa_xl_data> SEPARATED BY '.'.
*            <wa_tab_data> = <wa_xl_data>.

*          WHEN 63.
*            CLEAR : lv_int.
*            lv_val = <wa_xl_data>+0(4).
*            CALL FUNCTION 'CONVERT_STRING_TO_INTEGER'
*              EXPORTING
*                p_string      = lv_val
*              IMPORTING
*                p_int         = lv_int
*              EXCEPTIONS
*                overflow      = 1
*                invalid_chars = 2
*                OTHERS        = 3.
*            IF sy-subrc <> 0.
** Implement suitable error handling here
**              CONCATENATE  <wa_xl_data>+0(2) <wa_xl_data>+3(2) <wa_xl_data>+6(4)  INTO  <wa_xl_data> SEPARATED BY '.'.
*              CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data> .
*              <wa_tab_data> = <wa_xl_data>.
*
*            ELSE .
*
*              CONCATENATE <wa_xl_data>+8(2) <wa_xl_data>+5(2) <wa_xl_data>+0(4) INTO  <wa_xl_data> SEPARATED BY '.'.
*              <wa_tab_data> = <wa_xl_data>.
*
*            ENDIF.
**            CONCATENATE <wa_xl_data>+8(2) <wa_xl_data>+5(2) <wa_xl_data>+0(4) INTO  <wa_xl_data> SEPARATED BY '.'.
***            CONCATENATE <wa_xl_data>+0(4) <wa_xl_data>+5(2) <wa_xl_data>+8(2)   INTO  <wa_xl_data>.
**            <wa_tab_data> = <wa_xl_data>.
*          WHEN 67.
*            REPLACE ALL OCCURRENCES OF  ',' IN  <wa_xl_data>  WITH ''.
*            <wa_tab_data> = <wa_xl_data>.
*          WHEN 69.
*            CLEAR : lv_int.
*            lv_val = <wa_xl_data>+0(4).
*            CALL FUNCTION 'CONVERT_STRING_TO_INTEGER'
*              EXPORTING
*                p_string      = lv_val
*              IMPORTING
*                p_int         = lv_int
*              EXCEPTIONS
*                overflow      = 1
*                invalid_chars = 2
*                OTHERS        = 3.
*            IF sy-subrc <> 0.
** Implement suitable error handling here
**               CONCATENATE  <wa_xl_data>+0(2) <wa_xl_data>+3(2) <wa_xl_data>+6(4)  INTO  <wa_xl_data> SEPARATED BY '.'.
*              CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data> .
*              <wa_tab_data> = <wa_xl_data>.
*
*            ELSE .
*
*              CONCATENATE <wa_xl_data>+0(4) <wa_xl_data>+5(2) <wa_xl_data>+8(2)   INTO  <wa_xl_data> .
*              <wa_tab_data> = <wa_xl_data>.
*
*            ENDIF.
*
**            CONCATENATE <wa_xl_data>+8(2) <wa_xl_data>+5(2) <wa_xl_data>+0(4) INTO  <wa_xl_data> SEPARATED BY '.'.
***            CONCATENATE <wa_xl_data>+0(4) <wa_xl_data>+5(2) <wa_xl_data>+8(2)   INTO  <wa_xl_data>.
**            <wa_tab_data> = <wa_xl_data>.
**            CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data>.
**            <wa_tab_data> = <wa_xl_data>.
*          WHEN 72.
*            CLEAR : lv_int.
*            lv_val = <wa_xl_data>+0(4).
*            CALL FUNCTION 'CONVERT_STRING_TO_INTEGER'
*              EXPORTING
*                p_string      = lv_val
*              IMPORTING
*                p_int         = lv_int
*              EXCEPTIONS
*                overflow      = 1
*                invalid_chars = 2
*                OTHERS        = 3.
*            IF sy-subrc <> 0.
** Implement suitable error handling here
*              CONCATENATE  <wa_xl_data>+0(2) <wa_xl_data>+3(2) <wa_xl_data>+6(4)  INTO  <wa_xl_data> SEPARATED BY '.'.
**              CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data> SEPARATED BY '.'.
*              <wa_tab_data> = <wa_xl_data>.
*
*            ELSE .
*
*              CONCATENATE <wa_xl_data>+8(2) <wa_xl_data>+5(2) <wa_xl_data>+0(4) INTO  <wa_xl_data> SEPARATED BY '.'.
*              <wa_tab_data> = <wa_xl_data>.
*
*            ENDIF.
**            CONCATENATE <wa_xl_data>+0(4) <wa_xl_data>+5(2) <wa_xl_data>+8(2)   INTO  <wa_xl_data>.
**            <wa_tab_data> = <wa_xl_data>.
**            CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data>.
**            <wa_tab_data> = <wa_xl_data>.
*          WHEN 76.
*            REPLACE ALL OCCURRENCES OF  ',' IN  <wa_xl_data>  WITH ''.
*            <wa_tab_data> = <wa_xl_data>.
*          WHEN 78.
*            CLEAR : lv_int.
*            lv_val = <wa_xl_data>+0(4).
*            CALL FUNCTION 'CONVERT_STRING_TO_INTEGER'
*              EXPORTING
*                p_string      = lv_val
*              IMPORTING
*                p_int         = lv_int
*              EXCEPTIONS
*                overflow      = 1
*                invalid_chars = 2
*                OTHERS        = 3.
*            IF sy-subrc <> 0.
** Implement suitable error handling here
*              CONCATENATE  <wa_xl_data>+0(2) <wa_xl_data>+3(2) <wa_xl_data>+6(4)  INTO  <wa_xl_data> SEPARATED BY '.'.
**              CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data> SEPARATED BY '.'.
*              <wa_tab_data> = <wa_xl_data>.
*
*            ELSE .
*
*              CONCATENATE <wa_xl_data>+8(2) <wa_xl_data>+5(2) <wa_xl_data>+0(4) INTO  <wa_xl_data> SEPARATED BY '.'.
*              <wa_tab_data> = <wa_xl_data>.
*
*            ENDIF.
**            CONCATENATE <wa_xl_data>+0(4) <wa_xl_data>+5(2) <wa_xl_data>+8(2)   INTO  <wa_xl_data>.
**            <wa_tab_data> = <wa_xl_data>.
**            CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data>.
**            <wa_tab_data> = <wa_xl_data>.
          WHEN OTHERS.
            <wa_tab_data> = <wa_xl_data>.
        ENDCASE.
      ENDIF.
    ENDDO.
    " Registration date no and KYC Date should be mapped
*    wa_data-kyc_date = wa_data-reg_date_no.
    APPEND INITIAL LINE TO gt_cm_bp_data ASSIGNING FIELD-SYMBOL(<fs_bp_data>).
    MOVE-CORRESPONDING wa_data TO <fs_bp_data>.
    IF <fs_bp_data>-application_number IS NOT INITIAL.
      <fs_bp_data>-created_date = sy-datum.
      <fs_bp_data>-remarks = lv_remarks.
      CLEAR:lv_remarks.
    ELSE.
*      APPEND INITIAL LINE TO gt_final ASSIGNING <fs_final>.
*      <fs_final>-app_num = lv_bp.
*      <fs_final>-er_mss  = |Duplicate Application number|.
*      CLEAR : lv_bp.
    ENDIF.
    CLEAR wa_data.
  ENDLOOP.
  SORT gt_cm_bp_data  BY application_number.
  DELETE ADJACENT DUPLICATES FROM gt_cm_bp_data COMPARING application_number.
  DELETE gt_cm_bp_data WHERE created_date IS INITIAL.
ENDFORM.


**********************************************************************************************************
2nd block
ZISU_CM_D_MI - tcode
ZISU_CM_R_PO_TO_MOVEIN - prg_name
**********************************************************************************************************

*&---------------------------------------------------------------------*
*& Report ZISU_CM_R_PO_TO_MOVEIN
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Report ZISU_CM_R_PO_TO_MOVEIN
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zisu_cm_r_po_to_movein.

TYPE-POOLS: slis.
TABLES : crms4d_serv_h,zcm_bp_data.
RANGES r_date FOR sy-datum.
DATA : lv         TYPE c LENGTH 3,
       l_filename TYPE string.
DATA : gt_dma_data TYPE TABLE OF zcm_bp_data,
       la_dma_data TYPE  zcm_bp_data.

DATA: iv_meterread TYPE p LENGTH 10 DECIMALS 3 .

TYPES : BEGIN          OF      ty_fica_data,
          partner     TYPE    bu_partner,                "1
          sr_request  TYPE    crmt_object_id_db,         "2
          date_cre    TYPE    sy-datum,                  "3
          grid_code   TYPE    char50,                    "4
          plant       TYPE    werks,                     "5
          dist        TYPE    char50,                    "6
          ward        TYPE    char50,                    "7
*          plant        TYPE    werks, "zzplant , "char50,
*          dist         TYPE    char50,
*          ca           TYPE    char50,
          app_no      TYPE    char50,                    "8
          status      TYPE    char50,                    "9
          sub_status  TYPE    char50,                    "10
*          vrn_name     TYPE    char50,
*          ven_manu     TYPE    zz1_vendornumber,
*          po_manual    TYPE    zz1_ponumber,
*          vendor       TYPE    zz1_vendornumber,
*          po           TYPE    ebeln, "zz1_ponumber,
          dev_loc     TYPE    text40, " KTEXT ,           "11
          matnr       TYPE    matnr,                      "12
          baujj       TYPE    baujj,                      "13
*          datab        TYPE    datab,
          herst       TYPE    herst,                      "14
          typbz       TYPE    typbz,                      "15
          serge       TYPE    serge,                      "16
          eadat       TYPE    eadat,                      "17
          e_zwstand   TYPE    e_zwstand,                  "18
*          extra_po     TYPE    bu_id_type,
*          extra_gi_po  TYPE    bu_id_type,
*          extra_gi_pi  TYPE    bu_id_type,
          vol_corr_fa TYPE    e_zuszahlzw, "e_zuszahlzw,  "19
*          tf_no        TYPE    char50,
          move_dt     TYPE    sy-datum,                   "20
          move_read   TYPE    char50,                     "21
*          no_burner    TYPE    char50,
*          meter_card   TYPE    char50,
*          rubb_date    TYPE    sy-datum , "char10,
*          drs_loc      TYPE    char50,
*          drs_no       TYPE    char50,
*          loopno       TYPE    char50,
*          srm_no       TYPE    char50,
**          srm_cap      TYPE    char50,
*          riser_iso    TYPE    char1,
*          pipe_conn    TYPE    char1,
*          pipe_conn_ri TYPE    char1,
*          iso_inst     TYPE    char1,
*          house_pipe   TYPE    char1,
*          remark       TYPE     char50,"Siva-S4DK907687- 24-05-2023

          bank_name	  TYPE banka,                    "22
          pay_date    TYPE datum,                    "23
          branch_name	TYPE char25,                   "24
          trans_type  TYPE infof_kk,                 "25
          ref_id      TYPE  char30,                   "26
*          paid_upamt   TYPE  zde_tot_amnt_nonup,
          bank_cle_gl	TYPE bvrko_kk,                 "27
          house_bank  TYPE  hbkid,                    "28
          acc_id      TYPE hktid,                    "29
          ip_date     TYPE stardat_kk,               "30
          conv_date   TYPE    char20,
          remark      TYPE     char_1536,              "31

        END            OF      ty_fica_data.

CONSTANTS : lc_srreq       TYPE char50  VALUE 'SR_REQUEST',
            lc_srname      TYPE char50  VALUE 'Service Request',
            lc_datecre     TYPE char50  VALUE 'DATE_CRE',
            lc_datename    TYPE char50  VALUE 'Date of Creation',
            lc_bp          TYPE char50  VALUE 'PARTNER',
            lc_bpname      TYPE char50  VALUE 'Partner',
            lc_gc          TYPE char50  VALUE 'Grid_code',
            lc_gcode       TYPE char50  VALUE 'Grid Code',
            lc_wa          TYPE char50  VALUE 'ward',
            lc_waname      TYPE char50  VALUE 'ward',
            lc_dist        TYPE char50  VALUE 'DIST',
            lc_dist_name   TYPE char50  VALUE 'District',
            lc_app         TYPE char50  VALUE 'APP_NO',
            lc_appname     TYPE char50  VALUE 'Application Number',
            lc_movein      TYPE char50  VALUE 'MOVE_DT',
            lc_moveinnm    TYPE char50  VALUE 'Conversion/Move in date',
            lc_moverd      TYPE char50  VALUE 'MOVE_READ',
            lc_moverdnm    TYPE char50  VALUE 'Move in Read',
            lc_srmno       TYPE char50  VALUE 'SRM_NO',
            lc_srmnonm     TYPE char50  VALUE 'SRM No',
            lc_status      TYPE char50  VALUE 'STATUS',
            lc_statnam     TYPE char50  VALUE 'Status',
            lc_substatus   TYPE char50  VALUE 'SUB_STATUS',
            lc_substanam   TYPE char50  VALUE 'Sub status',
            lc_plant       TYPE char50  VALUE 'PLANT',
            lc_plannam     TYPE char50  VALUE 'Plant',
            lc_remark      TYPE char100  VALUE 'REMARK', "Siva-S4DK907687- 24-05-2023
            lc_remarnam    TYPE char100 VALUE 'Remarks', "Siva-S4DK907687- 24-05-2023
            lc_dev_lo      TYPE char50  VALUE 'DEV_LOC',
            lc_devnam      TYPE char50  VALUE 'Device located',
            lc_matnr       TYPE char50  VALUE 'MATNR',
            lc_mtrnam      TYPE char50  VALUE 'Material No',
            lc_baujj       TYPE char50  VALUE 'BAUJJ',
            lc_baujjnam    TYPE char50  VALUE 'Year of Make',
            lc_herst       TYPE char50  VALUE 'HERST',
            lc_herstnam    TYPE char50  VALUE 'Meter Manufacturer name',
            lc_typbz       TYPE char50  VALUE 'TYPBZ',
            lc_typbznam    TYPE char50  VALUE 'Meter Model',
            lc_serge       TYPE char50  VALUE 'SERGE',
            lc_sergenam    TYPE char50  VALUE 'Meter Serial No',
            lc_eadat       TYPE char50  VALUE 'EADAT',
            lc_eadatnam    TYPE char50  VALUE 'Meter Installation date',
            lc_ezwstand    TYPE char50  VALUE 'E_ZWSTAND',
            lc_ezwnam      TYPE char50  VALUE 'Meter reading',

            lc_volcr       TYPE char50  VALUE 'VOL_CORR_FA',
            lc_volcrnam    TYPE char50  VALUE 'Volume Correction Factor',
            lc_vfrom       TYPE char50  VALUE 'VALID_FROM',
            lc_vfromnam    TYPE char50  VALUE 'Valid From',
            lc_mtloc       TYPE char50  VALUE 'METER_LOC',
            lc_mtlocnam    TYPE char50  VALUE 'Meter Location',
            lc_risiso      TYPE char50  VALUE 'RISER_ISO',
            lc_risisonam   TYPE char50  VALUE 'Riser Isolation Valve Installed',
            lc_picon       TYPE char50  VALUE 'PIPE_CONN',
            lc_piconnam    TYPE char50  VALUE 'Pipe Connected up to Metering unit',
            lc_piconri     TYPE char50  VALUE 'PIPE_CONN_RI',
            lc_picorinam   TYPE char100 VALUE 'Pipe Connected from metering unit up to isolation valve',
            lc_isoinst     TYPE char50  VALUE 'ISO_INST',
            lc_isointnam   TYPE char50  VALUE 'Isolation valve Installed',
            lc_hopipe      TYPE char50  VALUE 'HOUSE_PIPE',
            lc_hopipenam   TYPE char50  VALUE 'Hose Pipe Installed',
            lc_bank_na     TYPE char100 VALUE 'BANK_NAME',
            lc_bank_name   TYPE char100 VALUE 'Bank Name',
            lc_pay_dt      TYPE char100 VALUE 'PAY_DATE',
            lc_pay_date    TYPE char100 VALUE 'Date of Payment',
            lc_br_name     TYPE char100 VALUE 'BRANCH_NAME',
            lc_branch_name TYPE char100 VALUE 'Branch Name',
            lc_tran_ty     TYPE char100 VALUE 'TRANS_TYPE',
            lc_trans_type  TYPE char100 VALUE 'Type of Transaction',
            lc_rf_id       TYPE char100 VALUE 'REF_ID',
            lc_refe_id     TYPE char100 VALUE 'Reference ID',
            lc_bk_gl       TYPE char100 VALUE 'BANK_CLE_GL',
            lc_bank_gl     TYPE char100 VALUE 'Bank Clearing GL',
            lc_hou_ba      TYPE char100 VALUE 'HOUSE_BANK',
            lc_house_bank  TYPE char100 VALUE 'House Bank ID',
            lc_ac_id       TYPE char100 VALUE 'ACC_ID',
            lc_account_id  TYPE char100 VALUE 'Account ID',
            lc_ip_da       TYPE char100 VALUE 'IP_DATE',
            lc_ip_date     TYPE char100 VALUE 'Installment Plan Starting Date'.

*            lc_tfno      TYPE char50  VALUE 'TF_NO',
*            lc_tfnam     TYPE char50  VALUE 'TF No'.
.
DATA: gt_outtab TYPE TABLE OF ty_fica_data,
      la_outtab TYPE  ty_fica_data.
DATA : g_sec TYPE char1.
DATA:
  lv_rc          TYPE  i,
  lv_user_action TYPE  i,
  lt_file_table  TYPE  filetable,
  ls_file_table  LIKE LINE OF lt_file_table.

DATA: gt_fieldcat   TYPE slis_t_fieldcat_alv,
      lw_fieldcat   TYPE slis_fieldcat_alv,
      lv_poinv_flag TYPE boolean. "Siva-S4DK907687- 24-05-2023


SELECTION-SCREEN BEGIN OF BLOCK 0001 WITH FRAME TITLE TEXT-001.
  PARAMETERS:
    p1 RADIOBUTTON GROUP 1 DEFAULT 'X' USER-COMMAND cm1,
    p2 RADIOBUTTON GROUP 1.


  SELECTION-SCREEN BEGIN OF BLOCK 0002 WITH FRAME TITLE TEXT-002.

*&--- Business Partner
    SELECT-OPTIONS:  s_post     FOR   sy-datum MODIF ID m2, "OBLIGATORY,
                     s_tras     FOR   crms4d_serv_h-object_id MODIF ID m2,
                     s_app      FOR   zcm_bp_data-application_number MODIF ID m2 ,
                     s_gcode      FOR   zcm_bp_data-grid_code MODIF ID m2.
    PARAMETERS:      p_gc TYPE rlgrap-filename MODIF ID m1  . " FOR spfli-carrid MODIF ID m1,
*                p_otfile TYPE rlgrap-filename MODIF ID m2.
  SELECTION-SCREEN END OF BLOCK 0002.
SELECTION-SCREEN END OF BLOCK 0001.

AT SELECTION-SCREEN OUTPUT.

  IF p1 IS NOT INITIAL.
    lv = 'M1'.
  ELSE.
    lv = 'M2'.
  ENDIF.

  LOOP AT SCREEN.
    IF screen-group1 = lv.
      screen-active = '0'.
    ENDIF.
    MODIFY SCREEN.
  ENDLOOP.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_gc.
*----------------------------------------------------------------------*


*  CALL METHOD cl_gui_frontend_services=>directory_browse
*    EXPORTING
*      window_title         = 'Directory to use'
*      initial_folder       = 'Z:'
*    CHANGING
*      selected_folder      = l_filename
*    EXCEPTIONS
*      cntl_error           = 1
*      error_no_gui         = 2
*      not_supported_by_gui = 3
*      OTHERS               = 4.
*  IF sy-subrc <> 0.
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*  ENDIF.

  cl_gui_frontend_services=>file_open_dialog(
    EXPORTING
      window_title      = 'Customer File'
      multiselection    = ''
      default_extension = '*.xlsx'
      file_filter       = 'Text file (*.xlsx)|*.xlsx|All (*.*)|*.*'
    CHANGING
      file_table        = lt_file_table
      rc                = lv_rc
      user_action       = lv_user_action
    EXCEPTIONS
      OTHERS            = 1 ).
  IF sy-subrc = 0.
    IF lv_user_action = cl_gui_frontend_services=>action_ok.
      IF lt_file_table IS NOT INITIAL.
        READ TABLE lt_file_table INTO ls_file_table INDEX 1.
        IF sy-subrc = 0.
          l_filename = ls_file_table-filename.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

  p_gc = l_filename.

START-OF-SELECTION.

  DEFINE mig_fieldcat.
    CLEAR lw_fieldcat.
 lw_fieldcat-col_pos = &1.
 lw_fieldcat-fieldname = &2.
 lw_fieldcat-tabname    = 'GT_OUTTAB'.
 lw_fieldcat-seltext_l = &3.
 APPEND lw_fieldcat TO gt_fieldcat.

  END-OF-DEFINITION.

  IF p1 IS NOT INITIAL.
    CLEAR: p_gc,l_filename.
  ENDIF.
  IF p_gc  IS NOT INITIAL .
*    PERFORM get_file_data.   "" Commented by Tanveer
    PERFORM get_file_data_excel.
  ELSE.
    PERFORM get_data.
  ENDIF.
  PERFORM alv_gruid.
*&---------------------------------------------------------------------*
*& Form Get_file_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM get_file_data .

  DATA : it_excel_data TYPE TABLE OF alsmex_tabline,
         lv_row_count  TYPE i,
         ls_file_data  TYPE ty_fica_data.


  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
    EXPORTING
      filename                = p_gc
      i_begin_col             = 1
      i_begin_row             = 2
      i_end_col               = 99
      i_end_row               = 9999
    TABLES
      intern                  = it_excel_data
    EXCEPTIONS
      inconsistent_parameters = 1
      upload_ole              = 2
      OTHERS                  = 3.
  IF sy-subrc <> 0.

* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.


*Populate data to internal tables and structures

  SORT it_excel_data BY row col.
  lv_row_count =  |001|.
  DESCRIBE TABLE it_excel_data LINES DATA(lv_line).

  LOOP AT it_excel_data ASSIGNING FIELD-SYMBOL(<fs_excel_data>).
    IF lv_row_count NE <fs_excel_data>-row.
      APPEND  ls_file_data TO gt_outtab.
      lv_row_count = <fs_excel_data>-row.
      CLEAR ls_file_data.

    ELSE.

    ENDIF.
    CASE <fs_excel_data>-col.
      WHEN 001.
        ls_file_data-partner                  = <fs_excel_data>-value.
      WHEN 002.
        ls_file_data-sr_request               = <fs_excel_data>-value.
      WHEN 003.
        CONCATENATE <fs_excel_data>-value+6(4)  <fs_excel_data>-value+3(2) <fs_excel_data>-value+0(2)   INTO ls_file_data-date_cre .
      WHEN 004.
        ls_file_data-grid_code                       = <fs_excel_data>-value.
      WHEN 005.
        ls_file_data-ward                    = <fs_excel_data>-value.
      WHEN 006.
        ls_file_data-plant                     = <fs_excel_data>-value.
      WHEN 007.
        ls_file_data-dist                       = <fs_excel_data>-value.
      WHEN 008.
        ls_file_data-app_no                   = <fs_excel_data>-value.
      WHEN 009.
        ls_file_data-status                   = <fs_excel_data>-value.
      WHEN 010.
        ls_file_data-sub_status               = <fs_excel_data>-value.
*      WHEN 011.
*        ls_file_data-matnr                 = <fs_excel_data>-value.
*      WHEN 012.
*        REPLACE ALL OCCURRENCES OF REGEX '[^\d]' IN <fs_excel_data>-value WITH ''.
*        ls_file_data-ven_manu                 = <fs_excel_data>-value.
*      WHEN 013.
*        REPLACE ALL OCCURRENCES OF REGEX '[^\d]' IN <fs_excel_data>-value WITH ''.
*        ls_file_data-po_manual                = <fs_excel_data>-value.
*      WHEN 014.
*        REPLACE ALL OCCURRENCES OF REGEX '[^\d]' IN <fs_excel_data>-value WITH ''.
*        ls_file_data-vendor                   = <fs_excel_data>-value.
*      WHEN 015.
*        REPLACE ALL OCCURRENCES OF REGEX '[^\d]' IN <fs_excel_data>-value WITH ''.
*        ls_file_data-po                       = <fs_excel_data>-value.
      WHEN 011.
        ls_file_data-dev_loc                  = <fs_excel_data>-value.
      WHEN 012.
        ls_file_data-matnr                    = <fs_excel_data>-value.
      WHEN 013.
        ls_file_data-baujj                    = <fs_excel_data>-value.
      WHEN 014.
        ls_file_data-herst                    = <fs_excel_data>-value.
      WHEN 015.
        ls_file_data-typbz                    = <fs_excel_data>-value.
      WHEN 016.
        ls_file_data-serge                    = <fs_excel_data>-value.
      WHEN 017.
        CONCATENATE <fs_excel_data>-value+6(4)  <fs_excel_data>-value+3(2) <fs_excel_data>-value+0(2)   INTO <fs_excel_data>-value.
        ls_file_data-eadat                    = <fs_excel_data>-value.
      WHEN 018.
        ls_file_data-e_zwstand                = <fs_excel_data>-value.
*      WHEN 024.
*        ls_file_data-extra_po                 = <fs_excel_data>-value.
*      WHEN 025.
*        ls_file_data-extra_gi_po              = <fs_excel_data>-value.
*      WHEN 026.
*        ls_file_data-extra_gi_pi              = <fs_excel_data>-value.
      WHEN 019.
        ls_file_data-vol_corr_fa              = <fs_excel_data>-value.
*      WHEN 028.
*        ls_file_data-tf_no                    = <fs_excel_data>-value.
      WHEN 020.
        CONCATENATE <fs_excel_data>-value+6(4)  <fs_excel_data>-value+3(2) <fs_excel_data>-value+0(2)   INTO <fs_excel_data>-value.
        ls_file_data-conv_date                = <fs_excel_data>-value.
        ls_file_data-move_dt                  = <fs_excel_data>-value.
      WHEN 021.
        ls_file_data-move_read                = <fs_excel_data>-value.
      WHEN 022.
        ls_file_data-bank_name               = <fs_excel_data>-value.
      WHEN 023.
        ls_file_data-pay_date                 = <fs_excel_data>-value.
      WHEN 024.
        ls_file_data-branch_name                = <fs_excel_data>-value.
      WHEN 025.
        ls_file_data-trans_type               = <fs_excel_data>-value.
      WHEN 026.
        ls_file_data-ref_id                = <fs_excel_data>-value.
      WHEN 027.
        ls_file_data-bank_cle_gl                = <fs_excel_data>-value.
      WHEN 028.
        ls_file_data-house_bank                 = <fs_excel_data>-value.
      WHEN 029.
        ls_file_data-acc_id                 = <fs_excel_data>-value.
      WHEN 030.
        ls_file_data-ip_date                = <fs_excel_data>-value.
      WHEN 031.
        ls_file_data-remark                   = <fs_excel_data>-value.
    ENDCASE.

    IF sy-tabix EQ lv_line.
      APPEND  ls_file_data TO gt_outtab.
    ENDIF.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form update_sr
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM update_sr .

  CONSTANTS : lc_g TYPE char1 VALUE 'S'.
  DATA : lt_retune TYPE TABLE OF bapiret2.

  DATA : lv_new_conn    TYPE REF TO zcl_cm_utility,
         lv_posting     TYPE REF TO zcl_fica_scheme_postings,
         lv_part        TYPE crmt_partner_no,
*         lv_guid        TYPE crmt_object_guid,
         iv_part_fc     TYPE comt_partner_fct,
         lv_code        TYPE crm_qcode,
         iv_cat_id      TYPE crm_erms_cat_as_id,
         lv_status      TYPE crm_j_status,
         iv_status_prof TYPE crm_j_stsma,
         lv_guid        TYPE crmt_object_guid,
         lv_sucess      TYPE char1,
         lv_reg_date    TYPE datum.

  DATA : lv_moveincndata  TYPE bapiisumoveincr_c,
         lv_movininput    TYPE bapiisumoveincr_i,
         lv_movedoc       TYPE bapiisumoveincr_i-moveindocnumber,
*        lt_retune        TYPE TABLE of BAPIRET2,
         lt_contractdata  TYPE TABLE OF bapiisucontract,
         lt_contractdatax TYPE TABLE OF bapiisucontractx,
         lt_meterread     TYPE TABLE OF bapieablu,
         la_meterread     TYPE bapieablu,
*         ls_cust_fields   TYPE zcs_adp_cust_fields,
         lv_total         TYPE zde_tot_amnt_nonup,
         lv_floc          TYPE tplnr. ",
*         it_table         TYPE zcs_pm_fpe1_mass_ty.


  CONSTANTS : lc_cat_id_ven  TYPE crm_erms_cat_as_id VALUE 'D2FP',
              lc_cat_id_plum TYPE crm_erms_cat_as_id VALUE 'D3EP', "'PLUMBING_METER_INSTALL_PENDING_4_DOM',
              lc_cat_id      TYPE crm_erms_cat_as_id VALUE 'D4CP', "'GAS_IN_CONVERSION_PENDING_6_DOM',
*              lc_cat_grund   TYPE crm_erms_cat_as_id VALUE 'D6GP' , "'GROUND CONNECTION PENDING_5_DOM',
*              lc_cat_mi      TYPE crm_erms_cat_as_id VALUE 'GAS_IN_CONVERSION_PENDING_6_DOM',
              lc_bis         TYPE biszeitsch VALUE '99991231'.
*              lc_INACT    TYPE CRM_J_INACT  VALUE abap_tr
  CLEAR : g_sec.


  CREATE OBJECT lv_posting.


  DEFINE mig_status.
    lv_guid  = &1.
*    ls_cust_fields = &2.
    lv_status = &2.
    iv_status_prof = &3.
    lv_code = &4.
    iv_cat_id = &5.
    CALL METHOD lv_new_conn->status_change
    EXPORTING
      iv_ref_guid    = ls_head-header_guid
*      iv_cust_fields = ls_cust_fields
      iv_status      = lv_status
      iv_status_prof = iv_status_prof
      iv_code        = lv_code
      iv_cat_id      = iv_cat_id
     IMPORTING
      ev_sucess      = lv_sucess.
  END-OF-DEFINITION.
  IF gt_outtab IS NOT INITIAL.


    CREATE OBJECT lv_new_conn.
*
*
    SELECT header_guid  , object_id , process_type , sold_to_party
      FROM crms4d_serv_h INTO TABLE @DATA(lt_header)
      FOR ALL ENTRIES IN @gt_outtab WHERE object_id = @gt_outtab-sr_request.

    IF lt_header IS NOT INITIAL.

      SELECT * FROM zcm_bp_data INTO TABLE @DATA(lt_dca) FOR ALL ENTRIES IN @lt_header
         WHERE bp_number = @lt_header-sold_to_party.
      SELECT object_id , number_int , sort , codegruppe , code  , cat_id FROM crms4d_srv_subj INTO TABLE @DATA(lt_sub) FOR ALL ENTRIES IN
             @lt_header WHERE object_id   = @lt_header-object_id.
      DELETE lt_sub WHERE number_int NE |000000| .
      DELETE lt_sub WHERE   code IS INITIAL.
      IF lt_dca IS NOT INITIAL.
        SELECT anlage , vstelle FROM eanl INTO TABLE @DATA(lt_eanl)  FOR ALL ENTRIES IN @lt_dca WHERE vstelle = @lt_dca-vstelle.
        SELECT ablbelnr,anlage, ablesgr, adatsoll FROM eablg INTO TABLE @DATA(lt_eablg) FOR ALL ENTRIES IN @lt_eanl WHERE anlage = @lt_eanl-anlage AND ( ablesgr = '21' OR ablesgr = '22' ).
        SORT lt_eablg BY adatsoll anlage ablbelnr DESCENDING.
        SELECT * FROM zcm_group_ca INTO TABLE @DATA(lt_grp_ca) FOR ALL ENTRIES IN @lt_dca WHERE bp_type = @lt_dca-bp_kind . "AND bp_grouping = @lt_dca-ga_code.
*          if lt_ean,,l is NOT INITIAL.
        SELECT vstelle , haus  FROM evbs INTO  TABLE @DATA(lt_evbs) FOR ALL ENTRIES IN @lt_eanl WHERE vstelle = @lt_eanl-vstelle.

        SELECT tplnr , fltyp , tplma FROM iflot INTO TABLE @DATA(lt_iflot) FOR ALL ENTRIES IN @lt_evbs WHERE tplma EQ @lt_evbs-haus AND fltyp EQ @lc_g.
        IF lt_iflot IS NOT INITIAL.
          SELECT equnr , bis , devloc , amcg_cap_grp FROM egerh INTO TABLE @DATA(lt_egerh) FOR ALL ENTRIES IN @lt_iflot WHERE bis = @lc_bis AND devloc = @lt_iflot-tplnr.

          IF lt_egerh IS NOT INITIAL.
            SELECT equnr , matnr , serge FROM equi INTO TABLE @DATA(lt_msn) FOR ALL ENTRIES IN @lt_egerh WHERE equnr = @lt_egerh-equnr.

          ENDIF.
        ENDIF.

        SELECT vkont , vktyp FROM fkkvk INTO TABLE @DATA(lt_fkkvk) FOR ALL ENTRIES IN @lt_dca WHERE vkont = @lt_dca-vkont.
        SELECT vkont , bupla , gsber  FROM fkkvkp INTO TABLE @DATA(lt_fkkvkp) FOR ALL ENTRIES IN @lt_dca WHERE vkont = @lt_dca-vkont.
        SELECT partner , bu_group FROM but000 INTO TABLE @DATA(lt_but000) FOR ALL ENTRIES IN @lt_dca WHERE partner = @lt_dca-bp_number.
        SELECT stand, ktext FROM t499s INTO TABLE @DATA(lt_t499s) FOR ALL ENTRIES IN @gt_outtab WHERE ktext =  @gt_outtab-dev_loc.

        SELECT * FROM crmc_erms_cat_ca INTO TABLE @DATA(lt_cat) .
        SELECT * FROM crmc_erms_cat_hi INTO TABLE @DATA(lt_cat_hi) .
        SELECT * FROM crmc_erms_cat_cd INTO TABLE @DATA(lt_cat_dis) .
*        SELECT * FROM zcm_status_map INTO TABLE @DATA(lt_status_map).

*        SELECT * FROM crmv_erms_cat_ca INTO TABLE @DATA(lt_cat_dis) WHERE lang = 'E' AND asp_id = 'AGP_DOM_NEWCONN'.
*        SELECT * FROM zagcl_networks INTO TABLE @data(lt_isu_mru) WHERE bp_type = 'ZDOM' AND grid_code = @lt_dca-GRID_CODE AND ward_no = @lt_dca-ward_no.
        SELECT * FROM zscheme_sd_ip1 INTO TABLE @DATA(lt_scheme) .
        SELECT * FROM crmc_qpct INTO TABLE @DATA(it_code_grp) WHERE katalogart = 'ZS' AND codegruppe = 'AGCLDONC'.
*        SELECT * FROM zdma_po_assign INTO TABLE @DATA(lt_po_assign) FOR ALL ENTRIES IN @gt_outtab WHERE plant = @gt_outtab-plant.
*>Start of C1
*        IF gt_outtab IS NOT INITIAL.
*          SELECT * FROM ekko INTO TABLE @DATA(lt_ekko) FOR ALL ENTRIES IN @gt_outtab WHERE ebeln = @gt_outtab-po."_manual.
*          "AND KDATB <=  sy-datum AND KDATE >= sy-datum.
*          IF sy-subrc = 0.
*            SORT lt_ekko BY ebeln.
*          ENDIF.
*        ENDIF.
*<End of C1
        SELECT  vertrag , anlage , vkonto FROM ever INTO TABLE @DATA(lt_ever) FOR ALL ENTRIES IN @lt_dca WHERE anlage = @lt_dca-anlage
                                                                                                               AND auszdat EQ @lc_bis.
*        SELECT * FROM zfica_rate_dom INTO TABLE @DATA(lt_fica_rate) .
*        DELETE lt_fica_rate WHERE to_date LT sy-datum.
*         SELECT LIFNR FROM LFA1 INTO TABLE @DATA(lt_LFA1) FOR ALL ENTRIES IN
      ENDIF.
*      CREATE OBJECT lv_new_conn.
      LOOP AT  gt_outtab ASSIGNING FIELD-SYMBOL(<fs_output>).
        CLEAR:  <fs_output>-remark.
        CLEAR : la_meterread,lv_moveincndata,lv_movininput,lv_movedoc,lv_code,lv_guid,lv_status,iv_status_prof,lv_code,iv_cat_id,lv_sucess,lv_floc."ls_cust_fields.
        lv_poinv_flag = abap_false."Siva-S4DK907687- 24-05-2023
        REFRESH : lt_meterread,lt_retune,lt_contractdata,lt_contractdatax,lt_meterread.

*        IF <fs_output>-extra_po GT 1.
*          <fs_output>-remark = |Extra kitchen is greater than 1|.
*          CONTINUE.
*        ENDIF.
*
*        IF <fs_output>-extra_gi_po GT 2.
*          <fs_output>-remark = |Extra Geyser is greater than 2|.
*          CONTINUE.
*        ENDIF.
        TRANSLATE <fs_output>-sub_status TO UPPER CASE .
        IF line_exists( it_code_grp[ code = <fs_output>-sub_status ] ).
          DATA(la_cpde_grp) =  it_code_grp[ code = <fs_output>-sub_status ].
          TRANSLATE la_cpde_grp-kurztext TO UPPER CASE.
          IF line_exists( lt_cat[ cat_id = la_cpde_grp-kurztext ] ).
            DATA(la_cat)       =  lt_cat[ cat_id = la_cpde_grp-kurztext ].
            IF line_exists( lt_cat_dis[ cat_guid = la_cat-cat_guid ] ).
              DATA(la_cat_dis)   =  lt_cat_dis[ cat_guid = la_cat-cat_guid ].
*              la_outtab-sub_status     = la_cat_dis-cat_label.
              <fs_output>-sub_status = la_cat_dis-cat_label.
            ENDIF.
          ENDIF.
*          IF line_exists( lt_cat_dis[ cat_id = la_cpde_grp-kurztext ] ).
*            DATA(la_cat_dis) =  lt_cat_dis[ cat_id = la_cpde_grp-kurztext ].
*            <fs_output>-sub_status = la_cat_dis-cat_label.
*          ENDIF.

        ELSE.
          <fs_output>-remark = |Invalid status|.
          CONTINUE.
        ENDIF.

        TRANSLATE <fs_output>-sub_status TO UPPER CASE.
        CONDENSE <fs_output>-sub_status NO-GAPS.
        IF line_exists( lt_header[ object_id = <fs_output>-sr_request ] ).
          DATA(ls_head) = lt_header[ object_id = <fs_output>-sr_request ].
          IF line_exists( lt_dca[ bp_number = ls_head-sold_to_party ] ).
            DATA(ls_dca) = lt_dca[ bp_number = ls_head-sold_to_party  ].
            IF line_exists( lt_ever[ anlage = ls_dca-anlage ] ).
              <fs_output>-remark = |Move in already exists |.
              CONTINUE.
            ENDIF.

            lv_new_conn->gt_cm_bp_data = ls_dca.


            IF line_exists( lt_scheme[ cust_cl = ls_dca-scheme ] ).
              DATA(la_scheme) = lt_scheme[ cust_cl = ls_dca-scheme ].

            ENDIF.

            IF line_exists( lt_sub[ object_id = <fs_output>-sr_request ] ).
              DATA(la_sub)       =  lt_sub[ object_id = <fs_output>-sr_request ].
              IF line_exists( lt_cat[ cat_id = la_sub-cat_id ] ).
                la_cat       =  lt_cat[ cat_id = la_sub-cat_id ].
                IF line_exists( lt_cat_dis[ cat_guid = la_cat-cat_guid ] ).
                  la_cat_dis   =  lt_cat_dis[ cat_guid = la_cat-cat_guid ].
                  la_outtab-sub_status     = la_cat_dis-cat_label.
                  DATA(la_cat_hi)       =  lt_cat_hi[ node_guid = la_cat-cat_guid ].
                  IF line_exists( lt_cat_dis[ cat_guid = la_cat_hi-pare_guid ] ).
                    DATA(la_cat_dis_pi)   =  lt_cat_dis[ cat_guid = la_cat_hi-pare_guid ].
                    la_outtab-status     =   la_cat_dis_pi-cat_label.
                    CONDENSE la_outtab-status NO-GAPS.
                    TRANSLATE la_outtab-status TO UPPER CASE.
                  ENDIF.
                ENDIF.
              ENDIF.
            ENDIF.
            IF   la_outtab-status EQ |TECHNICALFEASIBILITY|.
              CASE <fs_output>-sub_status .

                WHEN 'D2TF' .
                  lv_code         = |D3EP| . "|NF3D|.
                  iv_cat_id       = |D3EP| . "|AFT_SOM_TIME_6_DOM|.
                  lv_status       = |E0002|.
                  iv_status_prof  = |ZNCSTATU|.

                  mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.

                  IF lv_sucess IS NOT INITIAL.
                    <fs_output>-remark = TEXT-003.
                    <fs_output>-sub_status = 'Technically Feasible'.
                  ENDIF.


                WHEN 'D2TN' .
                  lv_code         = |D2TN| . "|NF3D|.
                  iv_cat_id       = |D2TN| . "|AFT_SOM_TIME_6_DOM|.
                  lv_status       = |E0006|.
                  iv_status_prof  = |ZNCSTATU|.

*                  mig_status ls_head-header_guid ls_cust_fields lv_status iv_status_prof lv_code iv_cat_id.
                  mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.

                  IF lv_sucess IS NOT INITIAL.
                    <fs_output>-remark = TEXT-003.
                    <fs_output>-sub_status = 'Technically not Feasible'.
                  ENDIF.

                WHEN  OTHERS.
                  <fs_output>-remark = TEXT-006.
              ENDCASE.


            ELSEIF la_outtab-status EQ |COSTESTIMATION| .  "line_exists( lt_sub[ object_id = <fs_output>-sr_request  cat_id       = lc_cat_id_plum ] ).
              CASE <fs_output>-sub_status .

                WHEN 'D3NA' OR 'D3AC'.
                  IF ls_dca-vstelle IS INITIAL.
                    CALL METHOD lv_new_conn->create_premise_connection
                      EXPORTING
                        iv_partner = ls_dca-bp_number
                      IMPORTING
                        ev_premise = DATA(iv_premise).

                    IF iv_premise IS INITIAL.
                      CONCATENATE <fs_output>-remark 'Error in Premise Creation, check premise type' INTO <fs_output>-remark.
                      CONTINUE.
                    ENDIF.

                  ELSE.
                    iv_premise = ls_dca-vstelle.
                  ENDIF.
                  IF iv_premise IS NOT INITIAL .
                    IF ls_dca-anlage IS INITIAL.

                      DATA(ls_but000_p) = lt_but000[ partner = ls_dca-bp_number ].

                      CALL METHOD lv_new_conn->create_installation
                        EXPORTING
                          iv_premise     = iv_premise
                          iv_bp_grouping = ls_but000_p-bu_group
                          iv_bp_type     = ls_dca-bp_kind
                          iv_ward_no     = ls_dca-ward_no
                        IMPORTING
                          ev_inst        = DATA(iv_inst).
                    ELSE.
                      iv_inst = ls_dca-anlage.
                    ENDIF.
                    IF iv_inst IS NOT INITIAL.

                      IF <fs_output>-sub_status = 'D3NA'.
                        lv_code =  |D3NA|. "|PM4D|.
                        iv_cat_id = |D3NA| . "|PLUMBING_METER_INSTALL_PENDING_4_DOM|.
                        lv_status       = |E0002|.
                        iv_status_prof  = |ZNCSTATU|.

                      ELSEIF <fs_output>-sub_status = 'D3AC'.
                        lv_code =  |D3AC|. "|PM4D|.
                        iv_cat_id = |D3AC| . "|PLUMBING_METER_INSTALL_PENDING_4_DOM|.
                        lv_status       = |E0002|.
                        iv_status_prof  = |ZNCSTATU|.
                      ENDIF.


                      mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.

                      IF lv_poinv_flag = abap_true AND lv_sucess IS NOT INITIAL.
                        DATA(lv_po_validity_msg_tf) = <fs_output>-remark.
                        CLEAR <fs_output>-remark.
                        CONCATENATE   TEXT-003 lv_po_validity_msg_tf INTO <fs_output>-remark SEPARATED BY space.
                      ELSEIF lv_sucess IS NOT INITIAL.

                        SELECT SINGLE aufnr FROM aufk INTO @DATA(lv_aufnr) WHERE refnr = @ls_dca-sr_number.
                        IF lv_aufnr IS NOT INITIAL.
                          CONCATENATE <fs_output>-remark  TEXT-003  ' with SO Number -  ' lv_aufnr ' and with Instaltion no - '  iv_inst INTO <fs_output>-remark.
                          IF <fs_output>-sub_status = 'D3NA'.
                            <fs_output>-sub_status = 'No Additional cost (without AMC)'.
                          ELSE.
                            <fs_output>-sub_status = 'D3AC'.
                            <fs_output>-sub_status = 'Additional cost confirmed by customer (With AMC)'.
                          ENDIF.
                        ELSE.
                          CONCATENATE <fs_output>-remark  TEXT-003  'without SO Number' INTO <fs_output>-remark.
                          IF <fs_output>-sub_status = 'D3NA'.
                            <fs_output>-sub_status = 'No Additional cost (without AMC)'.
                          ELSE.
                            <fs_output>-sub_status = 'D3AC'.
                            <fs_output>-sub_status = 'Additional cost confirmed by customer (With AMC)'.
                          ENDIF.
*                              <fs_output>-sub_status = 'Technically not Feasible'.
                        ENDIF.
                        CLEAR:lv_aufnr.
                      ENDIF.
                    ELSE.
                      <fs_output>-remark = TEXT-005.
                    ENDIF.
                  ELSE.
                    <fs_output>-remark = TEXT-004.
                  ENDIF.

*
*
                WHEN 'D3CN' .
                  lv_code         = |D3CN| . "|NF3D|.
                  iv_cat_id       = |D3CN| . "|AFT_SOM_TIME_6_DOM|.
                  lv_status       = |E0006|.
                  iv_status_prof  = |ZNCSTATU|.

*                  mig_status ls_head-header_guid ls_cust_fields lv_status iv_status_prof lv_code iv_cat_id.
                  mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.

                  IF lv_sucess IS NOT INITIAL.
                    <fs_output>-remark = TEXT-003.
                    <fs_output>-sub_status = 'Customer not agreed with AMC'.
                  ENDIF.

*
                WHEN  OTHERS.
                  <fs_output>-remark = TEXT-006.
              ENDCASE.

            ELSEIF la_outtab-status EQ |COMMISSIONING|.  "line_exists( lt_sub[ object_id = <fs_output>-sr_request  cat_id       = lc_cat_id_plum ] ).
              CASE <fs_output>-sub_status .

                WHEN 'D4PT' .
                  lv_code         = |D4PT| . "|NF3D|.
                  iv_cat_id       = |D4PT| . "|AFT_SOM_TIME_6_DOM|.
                  lv_status       = |E0002|.
                  iv_status_prof  = |ZNCSTATU|.

                  mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.

                  IF lv_sucess IS NOT INITIAL.
                    <fs_output>-remark = TEXT-003.
                    <fs_output>-sub_status = 'Pressure test report'.
                  ENDIF.


                WHEN 'D4MI'." OR 'METERINSTALLED(AREANOTCHARGED/AIRRFC)'.   " D4MI At CRM Level
                  IF line_exists( lt_t499s[ ktext = <fs_output>-dev_loc ] ).
                    DATA(la_t499s) = lt_t499s[ ktext = <fs_output>-dev_loc ].
                  ENDIF.
                  IF ls_dca-bp_kind IS INITIAL.
                    ls_dca-bp_kind =  |ZDOM|.
                  ENDIF.

                  IF line_exists( lt_evbs[ vstelle = ls_dca-vstelle ] ).
                    DATA(ls_evbs) = lt_evbs[ vstelle = ls_dca-vstelle ].
                    IF line_exists( lt_iflot[ tplma = ls_evbs-haus ] ).
                      DATA(ls_iflot) = lt_iflot[ tplma = ls_evbs-haus ].
                      IF line_exists( lt_egerh[ devloc = ls_iflot-tplnr ] ).
                        DATA(ls_egerh) = lt_egerh[ devloc = ls_iflot-tplnr ].
                        <fs_output>-remark = |Device already exists|.
                        CONTINUE.
                      ENDIF.
                    ENDIF.
                  ENDIF.

                  DATA: l_length_dig TYPE i.
                  DATA: lv_flag4   TYPE c,
                        lv_4digits TYPE c VALUE '4'.

                  DATA: lv_meteread  TYPE p LENGTH 10 DECIMALS 3,
                        lv_charfield TYPE cha_class_view-sollwert,
                        lv_digits    TYPE cha_class_data-stellen,
                        lv_char21    TYPE cha_class_data-sollwert,
                        lv_var1      TYPE char5,
                        lv_var2      TYPE char5,
                        l_length     TYPE char5.

                  CLEAR: lv_meteread ,
                         lv_flag4,
                         lv_charfield,
                         lv_4digits,
                         lv_digits   ,
                         lv_char21   ,
                         lv_var1     ,
                         lv_var2     .

                  SPLIT <fs_output>-e_zwstand AT '.' INTO lv_var1 lv_var2 .
                  l_length_dig = strlen(  lv_var2 ).
*                  CONDENSE l_length_dig.
                  IF l_length_dig GT 3.
                    <fs_output>-remark = 'Please Check the input Meter Reading'.
                    CONDENSE <fs_output>-remark.
                    CONTINUE.
                  ENDIF.

                  iv_meterread = <fs_output>-e_zwstand.
                  CLEAR: <fs_output>-e_zwstand.
                  <fs_output>-e_zwstand = iv_meterread.
                  CONDENSE <fs_output>-e_zwstand NO-GAPS.
                  <fs_output>-vol_corr_fa = '1.150000'.
*

                  CALL FUNCTION 'ZISU_DM_DEV_CREATE_INSTL'
                    EXPORTING
                      i_bpkind    = ls_dca-bp_kind
                      i_city2     = ls_dca-district "ls_dca-district
                      i_anlage    = ls_dca-anlage
                      i_matnr     = <fs_output>-matnr
                      i_msn       = <fs_output>-serge
                      i_datab     = <fs_output>-eadat           "valid_from
                      i_herst     = <fs_output>-herst
                      i_typbz     = <fs_output>-typbz
                      i_baujj     = <fs_output>-baujj
                      i_eadat     = <fs_output>-eadat
                      i_e_zwstand = <fs_output>-e_zwstand
                      i_pmloc     = la_t499s-stand
                      i_vcf       = <fs_output>-vol_corr_fa
                    TABLES
                      et_return   = lt_retune.

                  IF line_exists( lt_retune[ type = |E| ] ).  "gsp
                    DATA(la_remarks) = lt_retune[ type = |E| ] .
                    <fs_output>-remark = la_remarks-message.
                    CONTINUE.
                  ELSE.
                    IF line_exists( lt_retune[ type = |I| ] ).  "gsp
                      DATA(la_remarks1) = lt_retune[ type = |I| ] . "gsp
                      IF la_remarks1-message EQ |Entries for date and year are not consistent|.
                        <fs_output>-remark = 'Device installation failed due to invalid date'.
                        CLEAR la_remarks1.
                        CONTINUE.
                      ENDIF.
                    ENDIF.
*                    ENDIF.
                  ENDIF.
                  CLEAR : la_t499s.

                  IF line_exists( lt_retune[ type = |S| ] ).  "gsp
                    la_remarks1 = lt_retune[ type = |S| ] .
                    lv_code =  |D4MI|. "|PM4D|.
                    iv_cat_id = |D4MI| . "|PLUMBING_METER_INSTALL_PENDING_4_DOM|.
                    lv_status       = |E0002|.
                    iv_status_prof  = |ZNCSTATU|.
                    mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.
                    IF lv_sucess IS NOT INITIAL.

                      <fs_output>-remark = TEXT-003.
                      <fs_output>-sub_status = 'Meter Installation Done'.

                    ENDIF.
                  ENDIF.

                WHEN 'D4CM'.
                  IF line_exists( lt_fkkvk[ vkont = ls_dca-vkont ] ).
                    DATA(ls_fkkvk) = lt_fkkvk[ vkont = ls_dca-vkont ].
                    DATA(ls_fkkvkp) = lt_fkkvkp[ vkont = ls_dca-vkont ].
                    DATA(ls_but000) = lt_but000[ partner = ls_dca-bp_number ].
                  ENDIF.

                  lv_movininput-moveindate = <fs_output>-conv_date.
                  lv_movininput-partner    = <fs_output>-partner.
                  lv_movininput-partnergroup = ls_but000-bu_group .
                  lv_movininput-partnercategory = |1|.
                  lv_movininput-cont_acct       = ls_dca-vkont.
                  lv_movininput-acct_cat        = ls_fkkvk-vktyp.
                  APPEND INITIAL LINE TO lt_contractdata ASSIGNING FIELD-SYMBOL(<fs_contdata>).
                  <fs_contdata>-installation  = ls_dca-anlage.
                  <fs_contdata>-bus_area      = ls_fkkvkp-gsber.
                  <fs_contdata>-bupla         = ls_fkkvkp-bupla.
                  <fs_contdata>-joint_invoice         = '3'.
                  CONCATENATE 'Contract for BP' <fs_output>-partner INTO <fs_contdata>-contr_txt SEPARATED BY space.
                  APPEND INITIAL LINE TO lt_contractdatax ASSIGNING FIELD-SYMBOL(<fs_contdatax>).
                  <fs_contdatax>-installation  = abap_true.
                  <fs_contdatax>-bus_area      = abap_true.
                  <fs_contdatax>-bupla      = abap_true.
                  <fs_contdatax>-joint_invoice      = abap_true.


                  <fs_contdatax>-contr_txt  =  abap_true.


                  IF line_exists( lt_eablg[ anlage = ls_dca-anlage ] ).
                    DATA(ls_eablg) = lt_eablg[ anlage = ls_dca-anlage ]."and ( ablesgr = '21' ) ]." or ablesgr = '22' ) ].
*                     IF ls_eablg IS INITIAL.
*                        IF ls_eablg-ablesgr = '' OR
                    IF ls_eablg-ablesgr = '22'.
                      <fs_output>-remark = |Device is not installed, hence cannot perform Move-In|.
                      CONTINUE.
                    ENDIF.
                  ELSE.
                    <fs_output>-remark = |Device is not installed, hence cannot perform Move-In|.
                    CONTINUE.
                  ENDIF.

                  IF <fs_output>-conv_date = '00000000'.
                    <fs_output>-remark  = |Please enter Commissioning Date|.
                    CONTINUE.
                  ENDIF.

*                  ********  AMC Amount received validation check start ************

*                  SELECT * FROM dfkkop WHERE vkont = ls_dca-vkont and hvorg = '6500' AND tvorg = 'AMCD' AND augrd NE '05' AND augst = '9'.
*                  IF sy-subrc NE 0.
*                    <fs_output>-remark  = |AMC amount is not received from the customer.|.
*                    CONTINUE.
*                  ENDIF.


*                  ********  AMC Amount received validation check start ************

                  DATA: lv_move_read TYPE p LENGTH 10 DECIMALS 3.

*
                  SPLIT <fs_output>-move_read AT '.' INTO lv_var1 lv_var2 .
                  l_length_dig = strlen(  lv_var2 ).

                  IF l_length_dig GT 3.
                    <fs_output>-remark = 'Please Check the input Meter Reading'.
                    CONDENSE <fs_output>-remark.
                    CONTINUE.  ""
                  ENDIF.

                  lv_move_read = <fs_output>-move_read.
                  <fs_output>-move_read = lv_move_read.
                  CONDENSE <fs_output>-move_read NO-GAPS.

*                  ls_cust_fields-zz1_moveinread_srh = <fs_output>-move_read.

                  IF line_exists( lt_evbs[ vstelle = ls_dca-vstelle ] ).
                    ls_evbs = lt_evbs[ vstelle = ls_dca-vstelle ].
                    IF line_exists( lt_iflot[ tplma = ls_evbs-haus ] ).
                      ls_iflot = lt_iflot[ tplma = ls_evbs-haus ].
                      IF line_exists( lt_egerh[ devloc = ls_iflot-tplnr ] ).
                        ls_egerh = lt_egerh[ devloc = ls_iflot-tplnr ].
                        IF line_exists( lt_msn[ equnr = ls_egerh-equnr ] ).
                          DATA(ls_msn) = lt_msn[ equnr = ls_egerh-equnr ].
                          la_meterread-material    =     ls_msn-matnr.
                          la_meterread-serialno    =     ls_msn-equnr.
                          la_meterread-register    =     |001|.
                          la_meterread-mrreason    =     |06|.
                          la_meterread-actualmrdate =    <fs_output>-conv_date.
                          la_meterread-readingresult =   <fs_output>-move_read.
                          APPEND la_meterread TO lt_meterread.
                        ENDIF.
                      ENDIF.
                    ENDIF.
                  ENDIF.

                  SELECT  superior_functional_location FROM zcm_cont_assign INTO TABLE @DATA(lt_floc) WHERE grid_code = @ls_dca-grid_code.
* DATA(ls_eablg) = lt_eablg[ anlage = ls_dca-anlage ].
                  IF lt_floc IS NOT INITIAL.
                    DATA(ls_sup) = lt_floc[ 1 ].
                    lv_floc = ls_sup-superior_functional_location.
                  ENDIF.

                  IF <fs_output>-bank_cle_gl IS INITIAL.
                    <fs_output>-remark = 'Please provide Bank Clearing GL'.
                    CONDENSE <fs_output>-remark.
                    CONTINUE.  ""
                  ELSEIF <fs_output>-house_bank IS INITIAL.
                    <fs_output>-remark = 'Please provide House Bank ID'.
                    CONDENSE <fs_output>-remark.
                    CONTINUE.  ""
                  ELSEIF <fs_output>-acc_id IS INITIAL.
                    <fs_output>-remark = 'Please provide account ID'.
                    CONDENSE <fs_output>-remark.
                    CONTINUE.  ""
                  ELSEIF <fs_output>-ip_date IS INITIAL.
                    <fs_output>-remark = 'Please provide Installment Plan Starting Date'.
                    CONDENSE <fs_output>-remark.
                    CONTINUE.  ""
                  ENDIF.

                  CALL FUNCTION 'BAPI_ISUMOVEIN_CREATEFROMDATA'
                    EXPORTING
                      moveincreatecontroldata = lv_moveincndata
                      moveincreateinputdata   = lv_movininput
                    IMPORTING
                      moveindocnumber         = lv_movedoc
                    TABLES
                      treturn                 = lt_retune
                      tcontractdata           = lt_contractdata
                      tcontractdatax          = lt_contractdatax
                      tmeterreadingresults    = lt_meterread.

                  IF lv_movedoc IS NOT INITIAL.
                    <fs_output>-remark  = |Move in created|.
                    <fs_output>-sub_status = 'Commissioning Done'.
                    CALL METHOD lv_new_conn->change_conn_inst_change_dom
                      EXPORTING
                        lv_anlage       = ls_dca-anlage
                        lv_move_in_date = lv_movininput-moveindate
                        lv_haus         = ls_dca-haus
                        iv_srm          = lv_floc
                        iv_cust_cl      = la_scheme-cust_cl.
**                        lv_total   = ls_dca-amt_paid_pymt1.
*
*
                    CALL METHOD lv_posting->post_payment_lot_query23
                      EXPORTING
                        im_vkont        = ls_dca-vkont
                        im_gpart        = ls_dca-bp_number
                        im_paidamount   = ls_dca-paid_upamt
                        im_bank_name    = <fs_output>-bank_name
                        im_payment_date = <fs_output>-pay_date
                        im_branch_name  = <fs_output>-branch_name
                        im_type_trans   = <fs_output>-trans_type
                        im_bvrko        = <fs_output>-bank_cle_gl
                        im_hbkid        = <fs_output>-house_bank
                        im_hktid        = <fs_output>-acc_id
                        im_scheme       = la_scheme-cust_cl
                      IMPORTING
                        ex_return       = DATA(lv_ret).
*
                    CALL METHOD lv_posting->post_fpr1
                      EXPORTING
                        im_vkont       = ls_dca-vkont
                        im_gpart       = ls_dca-bp_number
                        im_ipstartdate = lv_movininput-moveindate
                        im_scheme      = la_scheme-cust_cl
                      IMPORTING
                        ex_return      = DATA(lv_ret1).


                  ENDIF.
*
*
*****************                  SR staus change**********************************
                  lv_code = |D4CM|.
                  iv_cat_id = |D4CM|.
                  lv_status     = |E0006|.
                  iv_status_prof    = |ZNCSTATU|.

                  mig_status ls_head-header_guid  lv_status iv_status_prof lv_code iv_cat_id.

                WHEN  OTHERS.
                  <fs_output>-remark = TEXT-006.
              ENDCASE.

*            ELSE.

*                ENDIF.
            ELSE.
              <fs_output>-remark = |Check the input status|.
            ENDIF.

          ELSE.
            <fs_output>-remark = |Check the Partner|.
          ENDIF.
*        ELSE.
        ELSE.
          <fs_output>-remark = |Please check the SR Request|.
        ENDIF.

      ENDLOOP.
    ENDIF.

    g_sec = abap_true.

    PERFORM alv_gruid.
*    MESSAGE  TEXT-003 TYPE 'I'.
    LEAVE TO SCREEN 0.


  ENDIF.
*ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form alv_gruid
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM alv_gruid .

  DATA: ls_layout  TYPE slis_layout_alv,
        ls_variant TYPE disvariant.

*  ls_variant-variant  = |DEFAULT|.
  ls_layout-zebra = abap_true.
  ls_layout-colwidth_optimize = abap_true.

  REFRESH : gt_fieldcat.

  mig_fieldcat      1     lc_bp         lc_bp         .
  mig_fieldcat      2     lc_srreq      lc_srname     .
  mig_fieldcat      3     lc_datecre    lc_datename   .
  mig_fieldcat      4     lc_gc         lc_gc         .
  mig_fieldcat      5     lc_plant      lc_plannam   .
  mig_fieldcat      6     lc_dist      	lc_dist_name  .
  mig_fieldcat      7     lc_wa         lc_waname     .
  mig_fieldcat      8     lc_app        lc_appname  .
  mig_fieldcat      9     lc_status     lc_statnam  .
  mig_fieldcat     10     lc_substatus  lc_substanam  .
*  mig_fieldcat     11     lc_vendorn    lc_vennamen  .
  "mig_fieldcat     12     lc_venmanu    lc_venman  .
  "mig_fieldcat     13     lc_poman      lc_pomanname  .
  "mig_fieldcat     14     lc_vendor      lc_venname    .
  "mig_fieldcat     15     lc_po         lc_poname  .
*  mig_fieldcat     12     lc_vendor      lc_venman.
*  mig_fieldcat     13     lc_po         lc_pomanname.
*  mig_fieldcat     14     lc_venmanu    lc_venname.
*  mig_fieldcat     15     lc_poman      lc_poname.
  mig_fieldcat     11     lc_dev_lo     lc_devnam.
  mig_fieldcat     12     lc_matnr      lc_mtrnam     .
  mig_fieldcat     13     lc_baujj      lc_baujjnam   .
*  mig_fieldcat     19     lc_vfrom      lc_vfromnam   .
  mig_fieldcat     14     lc_herst      lc_herstnam   .
  mig_fieldcat     15     lc_typbz      lc_typbznam   .
  mig_fieldcat     16     lc_serge      lc_sergenam   .
  mig_fieldcat     17     lc_eadat      lc_eadatnam   .
  mig_fieldcat     18     lc_ezwstand   lc_ezwnam     .
*  mig_fieldcat     20     lc_mtloc      lc_mtlocnam     .
*  mig_fieldcat     24     lc_extpo      lc_extnam     .
*  mig_fieldcat     25     lc_extgipo    lc_extginam   .
*  mig_fieldcat     26     lc_extgipi    lc_extgpinam  .
  mig_fieldcat     19     lc_volcr      lc_volcrnam   .
*  mig_fieldcat     28     lc_tfno       lc_tfnam   .
  mig_fieldcat     20     lc_movein     lc_moveinnm  .
  mig_fieldcat     21     lc_moverd     lc_moverdnm  .
  mig_fieldcat     22     lc_bank_na    lc_bank_name  .
  mig_fieldcat     23     lc_pay_dt     lc_pay_date  .
  mig_fieldcat     24     lc_br_name    lc_branch_name  .
  mig_fieldcat     25     lc_tran_ty     lc_trans_type   .
  mig_fieldcat     26     lc_rf_id      lc_refe_id  .
  mig_fieldcat     27     lc_bk_gl     lc_bank_gl  .
  mig_fieldcat     28     lc_hou_ba      lc_house_bank  .
  mig_fieldcat     29     lc_ac_id     lc_account_id .
  mig_fieldcat     30      lc_ip_da     lc_ip_date  .

  IF g_sec IS NOT INITIAL.
    mig_fieldcat     31     lc_remark     lc_remarnam    .
  ENDIF.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program       = sy-repid
      i_callback_user_command  = 'USER_COMMAND'
      it_fieldcat              = gt_fieldcat
      is_layout                = ls_layout
      i_callback_pf_status_set = 'SET_PF_STATUS'
      i_save                   = 'A'
      is_variant               = ls_variant
    TABLES
      t_outtab                 = gt_outtab
    EXCEPTIONS
      program_error            = 1
      OTHERS                   = 2.

  IF sy-subrc EQ 0.
*    IF sy-subrc <> 0.
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*  ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form get_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM get_data .
  CONSTANTS : lc_cat_id TYPE crm_erms_cat_as_id VALUE 'D2FP',
              lc_i      TYPE char1 VALUE 'S',
              lc_bis    TYPE biszeitsch VALUE '99991231'.
  SELECT object_id , header_guid , posting_date , sold_to_party
    INTO TABLE @DATA(lt_obj) FROM crms4d_serv_h WHERE object_id     IN @s_tras
                                               AND    posting_date  IN @s_post
                                               AND process_type = 'ZNCD'.

  IF lt_obj IS  INITIAL AND s_app IS NOT INITIAL.
    SELECT application_number, bp_kind , grid_code ,ward_no, district , bp_number ,vstelle ,vkont, sr_number FROM zcm_bp_data INTO TABLE @DATA(lt_dca)
         WHERE application_number   IN @s_app
            AND grid_code IN @s_gcode.
    IF lt_dca IS NOT INITIAL.
      SELECT object_id , header_guid , posting_date , sold_to_party
         INTO TABLE @lt_obj FROM crms4d_serv_h
        FOR ALL ENTRIES IN @lt_dca WHERE object_id  =   @lt_dca-sr_number.
    ENDIF.
  ENDIF.


  IF lt_obj IS NOT INITIAL.

    SELECT object_id , number_int , sort , codegruppe , code  , cat_id FROM crms4d_srv_subj INTO TABLE @DATA(lt_sub) FOR ALL ENTRIES IN
             @lt_obj WHERE object_id   = @lt_obj-object_id.
    DELETE lt_sub WHERE number_int NE |000000| .
    DELETE lt_sub WHERE   code IS INITIAL.
    SELECT application_number, bp_kind , grid_code ,ward_no, district , bp_number ,vstelle ,vkont
      FROM zcm_bp_data INTO TABLE @lt_dca FOR ALL ENTRIES IN  @lt_obj
           WHERE application_number IN @s_app
          AND grid_code IN @s_gcode AND
    bp_number   = @lt_obj-sold_to_party
.

    IF lt_dca IS NOT INITIAL.
      SELECT anlage , vstelle FROM eanl INTO TABLE @DATA(lt_eanl)  FOR ALL ENTRIES IN @lt_dca WHERE vstelle = @lt_dca-vstelle.
*          if lt_ean,,l is NOT INITIAL.
      SELECT vstelle , haus  FROM evbs INTO  TABLE @DATA(lt_evbs) FOR ALL ENTRIES IN @lt_eanl WHERE vstelle = @lt_eanl-vstelle.

      SELECT tplnr , fltyp , tplma FROM iflot INTO TABLE @DATA(lt_iflot) FOR ALL ENTRIES IN @lt_evbs WHERE tplma EQ @lt_evbs-haus AND fltyp EQ @lc_i.
      IF lt_iflot IS NOT INITIAL.
        SELECT equnr , bis , einbdat , devloc , amcg_cap_grp FROM egerh INTO TABLE @DATA(lt_egerh) FOR ALL ENTRIES IN @lt_iflot WHERE bis = @lc_bis AND devloc = @lt_iflot-tplnr.
        SELECT tplnr , stort FROM iloa INTO TABLE @DATA(lt_iloa) FOR ALL ENTRIES IN @lt_iflot WHERE tplnr = @lt_iflot-tplnr.
        IF lt_iloa IS NOT INITIAL.
          SELECT stand, ktext FROM t499s INTO TABLE @DATA(lt_t499s) FOR ALL ENTRIES IN @lt_iloa WHERE stand =  @lt_iloa-stort.
        ENDIF.
        IF lt_egerh IS NOT INITIAL.
          SELECT equnr , matnr , baujj, herst, typbz, serge FROM equi INTO TABLE @DATA(lt_msn) FOR ALL ENTRIES IN @lt_egerh WHERE equnr = @lt_egerh-equnr.

        ENDIF.
      ENDIF.

*      SELECT vkont , vktyp FROM fkkvk INTO TABLE @DATA(lt_fkkvk) FOR ALL ENTRIES IN @lt_dca WHERE vkont = @lt_dca-vkont.




      SELECT bp_type , bp_grouping , plant , grid_code  FROM zcm_group_ca INTO TABLE @DATA(lt_plant) FOR ALL ENTRIES IN @lt_dca WHERE bp_type = @lt_dca-bp_kind.
*      IF lt_plant IS NOT INITIAL.
**        SELECT * FROM zdma_po_assign INTO TABLE @DATA(lt_po_assign) FOR ALL ENTRIES IN @lt_plant WHERE plant = @lt_plant-plant.
*
*        IF lt_po_assign IS NOT INITIAL.
*          SELECT lifnr , name1 FROM lfa1 INTO TABLE @DATA(lt_lfa1) FOR ALL ENTRIES IN   @lt_po_assign WHERE lifnr = @lt_po_assign-vendor.
*        ENDIF.
*      ENDIF.
*    ENDIF.
*    lt_plant
      SELECT * FROM crmc_erms_cat_ca INTO TABLE @DATA(lt_cat) .
      SELECT * FROM crmc_erms_cat_hi INTO TABLE @DATA(lt_cat_hi) .
      SELECT * FROM crmc_erms_cat_cd INTO TABLE @DATA(lt_cat_dis) .

    ENDIF.

    LOOP AT lt_obj ASSIGNING FIELD-SYMBOL(<fs_obj>).
*    TRY .c
*    CLEAR : la_address.
*    IF line_exists( lt_sub[ object_id = <fs_obj>-object_id  cat_id       = lc_CAT_ID ] )..
      IF line_exists( lt_dca[ bp_number   = <fs_obj>-sold_to_party  ] ).
        DATA(la_dca) = lt_dca[ bp_number   = <fs_obj>-sold_to_party ].
*        IF line_exists( lt_address[ addrnumber =  la_partner-addr_nr ] ).
*          DATA(la_address) = lt_address[ addrnumber =  la_partner-addr_nr ].
*        APPEND INITIAL LINE TO gt_outtab ASSIGNING FIELD-SYMBOL(la_outtab).

        IF line_exists( lt_sub[ object_id = <fs_obj>-object_id ] ).
          DATA(la_sub)       =  lt_sub[ object_id = <fs_obj>-object_id ].
          IF line_exists( lt_cat[ cat_id = la_sub-cat_id ] ).
            DATA(la_cat)       =  lt_cat[ cat_id = la_sub-cat_id ].
            IF line_exists( lt_cat_dis[ cat_guid = la_cat-cat_guid ] ).
              DATA(la_cat_dis)   =  lt_cat_dis[ cat_guid = la_cat-cat_guid ].
              la_outtab-sub_status     = la_cat_dis-cat_label.

*        DATA(la_sub)       =  lt_sub[ object_id = <fs_obj>-object_id ].
              DATA(la_cat_hi)       =  lt_cat_hi[ node_guid = la_cat-cat_guid ].
*          IF la_cat_hi-pare_guid IS NOT INITIAL.
              IF line_exists( lt_cat_dis[ cat_guid = la_cat_hi-pare_guid ] ).
                DATA(la_cat_dis_pi)   =  lt_cat_dis[ cat_guid = la_cat_hi-pare_guid ].
                la_outtab-status     =   la_cat_dis_pi-cat_label.
*              CASE la_outtab-status .
*              	WHEN 'Assign to Contractor'.
*              	WHEN .
*              	WHEN OTHERS.
*              ENDCASE.
*              WHEN la_outtab-status .


              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.

        IF la_outtab-status EQ |Technical feasibility| OR la_outtab-status EQ |Cost Estimation| OR
                  la_outtab-status EQ |Commissioning|." OR   la_outtab-status EQ |Ready For Conversion/Gas in|.
          IF la_outtab-sub_status EQ |D4CM|.
            CLEAR : la_cat_dis_pi,la_cat,la_sub,la_cat_dis,la_outtab,la_dca.
            CONTINUE.
          ENDIF.

        ELSE.
          CONTINUE.
          CLEAR : la_cat_dis_pi,la_cat,la_sub,la_cat_dis,la_outtab,la_dca.
        ENDIF.

*      IF la_dca-ga_code EQ 'CVK'.
*        IF line_exists( lt_plant[ pngrb_ga_code  = la_dca-ga_code pngrb_district = la_dca-pngrb_dist ] ).
*          DATA(la_plant) = lt_plant[ pngrb_ga_code = la_dca-ga_code pngrb_district = la_dca-pngrb_dist ].
*          la_outtab-plant = la_plant-plant.
*        ENDIF.

*      ELSE.
*        IF line_exists( lt_plant[ pngrb_ga_code  = la_dca-ga_code ] ).
*          la_plant = lt_plant[ pngrb_ga_code = la_dca-ga_code ].
*          la_outtab-plant = la_plant-plant.
*        ENDIF.
*      ENDIF.

        CLEAR : la_cat_dis_pi,la_cat,la_sub,la_cat_dis.
*      IF <fs_obj>-zz1_ponumber_srh IS NOT INITIAL AND <fs_obj>-zz1_vendornumber_srh IS NOT INITIAL.
**        la_outtab-PO_manual            = <fs_obj>-zz1_ponumber_srh.
**        la_outtab-ven_manu       = <fs_obj>-zz1_vendornumber_srh.
*
*      ELSE.
*        LOOP AT lt_po_assign ASSIGNING FIELD-SYMBOL(<fs_po_assign>) WHERE plant = la_outtab-plant.
*          IF sy-datum BETWEEN <fs_po_assign>-from_date AND <fs_po_assign>-to_date.
*            la_outtab-ven_manu    = <fs_po_assign>-vendor.
*            la_outtab-po_manual   = <fs_po_assign>-po.
*            EXIT.
*          ENDIF.
*
*        ENDLOOP.
*      ENDIF.
*      IF la_outtab-po_manual IS NOT INITIAL AND <fs_obj>-zz1_ponumber_srh IS INITIAL.
*        IF line_exists( lt_lfa1[ lifnr = la_outtab-ven_manu ] ).
*          DATA(la_lfa1) = lt_lfa1[ lifnr = la_outtab-ven_manu ].
*          la_outtab-vrn_name = la_lfa1-name1.
*        ENDIF.
*      ELSE.
*        IF line_exists( lt_lfa1[ lifnr = <fs_obj>-zz1_vendornumber_srh ] ).
*          la_lfa1 = lt_lfa1[ lifnr = <fs_obj>-zz1_vendornumber_srh ].
*          la_outtab-vrn_name = la_lfa1-name1.
*        ENDIF.
*      ENDIF.
*
**      IF la_outtab- IS NOT INITIAL.
*
*
**      IF line_exists( lt_fkkvk[ vkont = ls_dca-vkont ] ).
**      DATA(ls_fkkvk) = lt_fkkvk[ vkont = ls_dca-vkont ].
**      ENDIF.


        la_outtab-sr_request    = <fs_obj>-object_id.
        la_outtab-partner       = <fs_obj>-sold_to_party.
        la_outtab-date_cre      = <fs_obj>-posting_date.
        la_outtab-grid_code     = la_dca-grid_code.
        la_outtab-plant         = '2100'.
        la_outtab-dist          = la_dca-district.
        la_outtab-ward            = la_dca-ward_no.
        la_outtab-app_no        = la_dca-application_number.


*      IF <fs_obj>-zz1_vendornumber_srh IS INITIAL .
*      la_outtab-vendor        = <fs_obj>-zz1_vendornumber_srh.
*      la_outtab-po            = <fs_obj>-zz1_ponumber_srh.
**      ENDIF.
*      la_outtab-tf_no         = <fs_obj>-zz1_tfnumber_srh.
*      la_outtab-no_burner     = <fs_obj>-zz1_noofburners_srh.
*      la_outtab-riser_iso     = <fs_obj>-zz1_isolationvalveinst_srh.
*      la_outtab-extra_po      = <fs_obj>-zz1_extrakitchenpoint_srh.
*      la_outtab-extra_gi_po   = <fs_obj>-zz1_geyserpoint_srh.
*      la_outtab-extra_gi_pi   = <fs_obj>-zz1_geyserpoint_srh.         " needed to check
*      la_outtab-pipe_conn     = <fs_obj>-zz1_pipeconnectedfromm_srh.
*      la_outtab-pipe_conn_ri  = <fs_obj>-zz1_pipeconnectedfromm_srh . "zz1_pepipelength_srh.
*      la_outtab-iso_inst      = <fs_obj>-zz1_isolationvalveinst_srh . "zz1_riserisolvalveinst_srh.
*      la_outtab-house_pipe    = <fs_obj>-zz1_hosepipeinstalled_srh.
*      la_outtab-rubb_date     = <fs_obj>-zz1_rubbertubeexpiryda_srh.

*        CLEAR : la_sub,
*        DATA(la_cat_dis)   =  lt_cat_dis[ CAT_ID = la_sub-cat_id ].
*      la_outtab-status     = |Ready For Conversion/Gas in|.
*      la_outtab-sub_status = |Gas in/Conversion Pending|.
*        CLEAR : la_cat_dis_pi,la_cat,la_sub,la_cat_dis.

        IF line_exists( lt_evbs[ vstelle = la_dca-vstelle ] ).
          DATA(ls_evbs) = lt_evbs[ vstelle = la_dca-vstelle ].


          IF line_exists( lt_iflot[ tplma = ls_evbs-haus ] ).
            DATA(ls_iflot) = lt_iflot[ tplma = ls_evbs-haus ].
            IF line_exists( lt_egerh[ devloc = ls_iflot-tplnr ] ).
              DATA(ls_egerh) = lt_egerh[ devloc = ls_iflot-tplnr ].
              IF line_exists( lt_msn[ equnr = ls_egerh-equnr ] ).
                DATA(ls_msn) = lt_msn[ equnr = ls_egerh-equnr ].
                la_outtab-matnr       =     ls_msn-matnr.
                la_outtab-serge       =     ls_msn-serge.
                la_outtab-baujj       =     ls_msn-baujj.
                la_outtab-herst       =     ls_msn-herst.
                la_outtab-typbz       =     ls_msn-typbz.
                la_outtab-eadat       =     ls_egerh-einbdat.
                la_outtab-vol_corr_fa =     |1.00|.

                IF line_exists( lt_iloa[ tplnr = ls_iflot-tplnr ] ).
                  DATA(la_iloa) = lt_iloa[ tplnr = ls_iflot-tplnr ].
                  IF line_exists( lt_t499s[ stand = la_iloa-stort ] ).
                    DATA(la_t499s) = lt_t499s[ stand = la_iloa-stort ].
                  ENDIF.
                  la_outtab-dev_loc = la_t499s-ktext.
                ENDIF.
*                        la_outtab-actualmrdate =    <fs_outtab>-move_dt.
*                        la_outtab-readingresult =   <fs_outtab>-move_read.
*                        APPEND la_meterread TO lt_meterread.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.

        IF la_outtab-move_read IS INITIAL.
          la_outtab-move_read = '0.000'.
        ENDIF.

        IF la_outtab-e_zwstand IS INITIAL.
          la_outtab-e_zwstand = '0.000'.
        ENDIF.
        CONDENSE: la_outtab-e_zwstand,
                  la_outtab-move_read.

        APPEND la_outtab TO gt_outtab.
        CLEAR : la_outtab.
*        ENDIF.
      ENDIF.
*    ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.

FORM set_pf_status USING rt_extab TYPE slis_t_extab.
  SET PF-STATUS 'STATUS_MAIN'.
ENDFORM.
*siva 22/06/2022
*----------------------------------------------------------*
*       FORM USER_COMMAND                                  *
*----------------------------------------------------------*
*       --> R_UCOMM                                        *
*       --> RS_SELFIELD                                    *
*----------------------------------------------------------*
FORM user_command USING r_ucomm LIKE sy-ucomm
                  rs_selfield TYPE slis_selfield.
* Check function code
  DATA ref1 TYPE REF TO cl_gui_alv_grid.
  DATA sytabix TYPE sy-tabix.
*--call
  IF p_gc IS NOT INITIAL.
    CASE r_ucomm.

      WHEN  'SAVE'.
        IF p_gc IS NOT INITIAL.
          PERFORM update_sr.
        ELSE.
          LEAVE TO SCREEN 0..
        ENDIF.

    ENDCASE.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form get_file_data_excel
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM get_file_data_excel .

  DATA:lr_data TYPE REF TO data,
       wa_data TYPE ty_fica_data,
       lv_int  TYPE i,
       lv_val  TYPE string.


  DATA: lv_meteread  TYPE p LENGTH 10 DECIMALS 3,
        lv_charfield TYPE cha_class_view-sollwert,
        lv_digits    TYPE cha_class_data-stellen,
        lv_char21    TYPE cha_class_data-sollwert,     "string.
        lv_var1      TYPE char5,
        lv_var2      TYPE char5,
        l_length     TYPE char5.

  CONSTANTS: lv_pointer TYPE i VALUE 42.
  FIELD-SYMBOLS:<lt_data> TYPE STANDARD TABLE..
  lr_data = NEW zcl_utility_excel( )->readexcelfile( v_file = CONV string( p_gc ) ).
  ASSIGN lr_data->* TO <lt_data>.

  DATA lv_exp TYPE p DECIMALS 3.

  LOOP AT <lt_data> ASSIGNING FIELD-SYMBOL(<wa_data>).

    IF sy-tabix = 1.
      CONTINUE.
    ENDIF.
    DO lv_pointer TIMES.
      ASSIGN COMPONENT sy-index OF STRUCTURE <wa_data> TO FIELD-SYMBOL(<wa_xl_data>).
      ASSIGN COMPONENT sy-index OF STRUCTURE wa_data TO FIELD-SYMBOL(<wa_tab_data>).
      IF <wa_xl_data> IS ASSIGNED AND <wa_xl_data> IS NOT INITIAL AND <wa_tab_data> IS ASSIGNED.
        CASE sy-index.
          WHEN 003.
            CLEAR : lv_int.
            lv_val = <wa_xl_data>+0(4).
            CALL FUNCTION 'CONVERT_STRING_TO_INTEGER'
              EXPORTING
                p_string      = lv_val
              IMPORTING
                p_int         = lv_int
              EXCEPTIONS
                overflow      = 1
                invalid_chars = 2
                OTHERS        = 3.
            IF sy-subrc <> 0.
* Implement suitable error handling here

              CONCATENATE  <wa_xl_data>+0(2) <wa_xl_data>+3(2) <wa_xl_data>+6(4)  INTO  <wa_xl_data> SEPARATED BY '.'.
*              CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data> SEPARATED BY '.'.
              <wa_tab_data> = <wa_xl_data>.

            ELSE .

              CONCATENATE <wa_xl_data>+8(2) <wa_xl_data>+5(2) <wa_xl_data>+0(4) INTO  <wa_xl_data> SEPARATED BY '.'.
              <wa_tab_data> = <wa_xl_data>.

            ENDIF.
*            CONCATENATE <wa_xl_data>+0(4) <wa_xl_data>+5(2) <wa_xl_data>+8(2) INTO  <wa_xl_data>.
*            <wa_tab_data> = <wa_xl_data>.
*          WHEN 012. " Titlte
*            REPLACE ALL OCCURRENCES OF REGEX '[^\d]' IN <wa_xl_data> WITH ''.
*            <wa_tab_data> = <wa_xl_data>.
*
*          WHEN 013. " Titlte
*            REPLACE ALL OCCURRENCES OF REGEX '[^\d]' IN <wa_xl_data> WITH ''.
*            <wa_tab_data> = <wa_xl_data>.
*
*          WHEN 014. " Titlte
*            REPLACE ALL OCCURRENCES OF REGEX '[^\d]' IN <wa_xl_data> WITH ''.
*            <wa_tab_data> = <wa_xl_data>.
*
*          WHEN 015. " Titlte
*            REPLACE ALL OCCURRENCES OF REGEX '[^\d]' IN <wa_xl_data> WITH ''.
*            <wa_tab_data> = <wa_xl_data>.
*
*
          WHEN '017'.

            CLEAR : lv_int.
            lv_val = <wa_xl_data>+0(4).
            CALL FUNCTION 'CONVERT_STRING_TO_INTEGER'
              EXPORTING
                p_string      = lv_val
              IMPORTING
                p_int         = lv_int
              EXCEPTIONS
                overflow      = 1
                invalid_chars = 2
                OTHERS        = 3.
            IF sy-subrc <> 0.
* Implement suitable error handling here

              CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data> .
              <wa_tab_data> = <wa_xl_data>.

            ELSE .

              CONCATENATE <wa_xl_data>+0(4) <wa_xl_data>+5(2) <wa_xl_data>+8(2)   INTO  <wa_xl_data> .
              <wa_tab_data> = <wa_xl_data>.

            ENDIF.
*
*            CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data>.
*            <wa_tab_data> = <wa_xl_data>.
          WHEN 018 ."OR 021.

            IF <wa_xl_data> CA 'E'.
              DATA(lv_flag) = abap_true.
            ENDIF.

*            DATA: gv_spl(20) TYPE c VALUE 'E-'.
*            REPLACE ALL OCCURENCES OF gv_spl IN <wa_xl_data> WITH ''.
            CONDENSE <wa_xl_data> NO-GAPS.
            lv_digits = 3.
            IF lv_flag = abap_true.
              lv_char21 = <wa_xl_data>.
              CALL FUNCTION 'QSS0_FLTP_TO_CHAR_CONVERSION'
                EXPORTING
                  i_number_of_digits       = lv_digits
                  i_fltp_value             = lv_char21    "<wa_xl_data>
                  i_value_not_initial_flag = 'X'
                  i_screen_fieldlength     = 16
                IMPORTING
                  e_char_field             = lv_charfield.
*            CONDENSE lv_charfield.
              <wa_tab_data> = lv_charfield.
              CONDENSE <wa_tab_data>.
            ELSE.   " For more than 3 decimal digits, the value should be displayed with 0.000

****              SPLIT <wa_xl_data> AT '.' INTO lv_var1 lv_var2 .
****              l_length = strlen( lv_var2 ).
****              CONDENSE l_length.
****              IF l_length GT lv_digits.
****
****                <wa_tab_data> = '0.000'.
****                CONDENSE <wa_tab_data>.
****              ELSE.
****
              <wa_tab_data> = <wa_xl_data>.
              CONDENSE <wa_tab_data>.
****            ENDIF.
            ENDIF.

            CLEAR: lv_flag, lv_char21, lv_charfield, l_length.

          WHEN 020 OR 030.
            CLEAR : lv_int.
            lv_val = <wa_xl_data>+0(4).
            CALL FUNCTION 'CONVERT_STRING_TO_INTEGER'
              EXPORTING
                p_string      = lv_val
              IMPORTING
                p_int         = lv_int
              EXCEPTIONS
                overflow      = 1
                invalid_chars = 2
                OTHERS        = 3.
            IF sy-subrc <> 0.
* Implement suitable error handling here

              CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data> .
              <wa_tab_data> = <wa_xl_data>.

            ELSE .

              CONCATENATE <wa_xl_data>+0(4) <wa_xl_data>+5(2) <wa_xl_data>+8(2)   INTO  <wa_xl_data> .
              <wa_tab_data> = <wa_xl_data>.

            ENDIF.
*            CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data>.
*            <wa_tab_data> = <wa_xl_data>.


          WHEN 027.
            DATA : lv_gtype TYPE char10.
            lv_gtype = <wa_xl_data>.
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                input  = lv_gtype
              IMPORTING
                output = lv_gtype.
            <wa_tab_data> = lv_gtype.
            CLEAR <wa_xl_data>.

*          WHEN 032.
*            CLEAR : lv_int.
*            lv_val = <wa_xl_data>+0(4).
*            CALL FUNCTION 'CONVERT_STRING_TO_INTEGER'
*              EXPORTING
*                p_string      = lv_val
*              IMPORTING
*                p_int         = lv_int
*              EXCEPTIONS
*                overflow      = 1
*                invalid_chars = 2
*                OTHERS        = 3.
*            IF sy-subrc <> 0.
** Implement suitable error handling here
*
*              CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data> .
*              <wa_tab_data> = <wa_xl_data>.
*
*            ELSE .
*
*              CONCATENATE <wa_xl_data>+8(2) <wa_xl_data>+5(2) <wa_xl_data>+0(4) INTO  <wa_xl_data>.
*              <wa_tab_data> = <wa_xl_data>.
*
*            ENDIF.
**            CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data>.
**            <wa_tab_data> = <wa_xl_data>.
*
          WHEN OTHERS.
            <wa_tab_data> = <wa_xl_data>.
        ENDCASE.
      ENDIF.
    ENDDO.
    " Registration date no and KYC Date should be mapped
    wa_data-conv_date = wa_data-move_dt.
    APPEND INITIAL LINE TO gt_outtab ASSIGNING FIELD-SYMBOL(<fs_fica_data>).
    MOVE-CORRESPONDING wa_data TO <fs_fica_data>.
*    IF <fs_dma_data>-application_number IS NOT INITIAL.
*      <fs_dma_data>-created_date = sy-datum.
*    ELSE.
**      APPEND INITIAL LINE TO gt_final ASSIGNING <fs_final>.
**      <fs_final>-app_num = lv_bp.
**      <fs_final>-er_mss  = |Duplicate Application number|.
**      CLEAR : lv_bp.
*    ENDIF.
    CLEAR wa_data.
  ENDLOOP.
*  SORT gt_dma_data  BY application_number.
*  DELETE ADJACENT DUPLICATES FROM gt_dma_data COMPARING application_number.
*  DELETE gt_dma_data WHERE created_date IS INITIAL.

ENDFORM.

*********************************************************************************************************
3rd block
ZISU_CM_C_UP - tcode
ZISU_CM_C_CUSTOMER_UPLOAD - prg_name
*********************************************************************************************************

*&---------------------------------------------------------------------*
*& Report ZISU_CM_CI_CUSTOMER_UPLOAD
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zisu_cm_c_customer_upload.

TYPE-POOLS: slis.
*TABLES : crms4d_serv_h.
RANGES r_date FOR sy-datum.
DATA : lv         TYPE c LENGTH 3,
       l_filename TYPE string.
DATA : gt_dma_data    TYPE TABLE OF zcm_bp_data_c,
*       gt_dma_data1 TYPE TABLE OF zcm_s_dma_data_ins,
       la_dma_data    TYPE  zcm_bp_data_c,
       ls_cm_group_ca TYPE zcm_group_ca.

TYPES: BEGIN OF ty_final,
         app_num   TYPE bu_bpext,
         bp_number TYPE bu_partner,
         sr_number TYPE crmt_object_id_db,
         con_acc   TYPE vkont_kk,
         er_mss    TYPE string,
       END OF ty_final.

DATA : gt_final    TYPE TABLE OF ty_final.
DATA: gt_fieldcat TYPE slis_t_fieldcat_alv,
      lw_fieldcat TYPE slis_fieldcat_alv.

DATA:
  lv_rc          TYPE  i,
  lv_user_action TYPE  i,
  lt_file_table  TYPE  filetable,
  ls_file_table  LIKE LINE OF lt_file_table.
*DATA : lv_FILENAME_1 TYPE string.

SELECTION-SCREEN BEGIN OF BLOCK 0001 WITH FRAME TITLE TEXT-001.
  SELECTION-SCREEN BEGIN OF BLOCK 0002 WITH FRAME TITLE TEXT-002.
    PARAMETERS : p_bp   TYPE rlgrap-filename MODIF ID m2 . "OBLIGATORY.  " FOR spfli-carrid MODIF ID m1,
  SELECTION-SCREEN END OF BLOCK 0002.
SELECTION-SCREEN END OF BLOCK 0001.

INITIALIZATION.
  SET PF-STATUS 'STATUS_MAIN'.

AT SELECTION-SCREEN.
  "Provide the functionality to download Excel Template
  CASE sy-ucomm.
    WHEN 'CUSTTEMP'.
      PERFORM download_cust_template.
  ENDCASE.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_bp.
*----------------------------------------------------------------------*


  cl_gui_frontend_services=>file_open_dialog(
      EXPORTING
        window_title        = 'Customer File'
        multiselection      = ''
        default_extension   = '*.xlsx'
        file_filter         = 'Text file (*.xlsx)|*.xlsx|All (*.*)|*.*'
      CHANGING
        file_table          = lt_file_table
        rc                  = lv_rc
        user_action         = lv_user_action
      EXCEPTIONS
        OTHERS              = 1 ).
  IF sy-subrc = 0.
    IF lv_user_action = cl_gui_frontend_services=>action_ok.
      IF lt_file_table IS NOT INITIAL.
        READ TABLE lt_file_table INTO ls_file_table INDEX 1.
        IF sy-subrc = 0.
          l_filename = ls_file_table-filename.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

*  CALL METHOD cl_gui_frontend_services=>directory_browse
*    EXPORTING
*      window_title         = 'Directory to use'
*      initial_folder       = 'Z:'
*    CHANGING
*      selected_folder      = l_filename
*    EXCEPTIONS
*      cntl_error           = 1
*      error_no_gui         = 2
*      not_supported_by_gui = 3
*      OTHERS               = 4.
*  IF sy-subrc <> 0.
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*  ENDIF.

*  ***
  p_bp = l_filename.


START-OF-SELECTION.

  DEFINE mig_fieldcat.
    CLEAR  lw_fieldcat.
           lw_fieldcat-col_pos      = &1.
           lw_fieldcat-fieldname    = &2.
           lw_fieldcat-seltext_l    = &3.
           lw_fieldcat-outputlen    = 500.
           APPEND lw_fieldcat TO gt_fieldcat.

  END-OF-DEFINITION.

  IF p_bp IS NOT INITIAL.
*    CLEAR :
*    BREAK-POINT.
**    PERFORM get_file_data_bp. " Commented by Prabh on 130123
    PERFORM get_file_data_bp_excel.
    PERFORM create_bp.
  ENDIF.
  IF gt_final IS NOT INITIAL.
    PERFORM alv_dispaly.
  ENDIF.
*&---------------------------------------------------------------------*
*& Form Get_file_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM get_file_data_bp .

  DATA : it_excel_data TYPE TABLE OF alsmex_tabline,
         lv_row_count  TYPE i,
         ls_file_data  TYPE zcm_bp_data_c,
         lv_bp         TYPE bu_partner,
         lv_mandt      TYPE char100.

  DATA : lv_bp_cat  TYPE  bu_type,
         lv_bp_role TYPE  partner_role.
  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
    EXPORTING
      filename                = p_bp
      i_begin_col             = 1
      i_begin_row             = 2
      i_end_col               = 200
      i_end_row               = 9999
    TABLES
      intern                  = it_excel_data
    EXCEPTIONS
      inconsistent_parameters = 1
      upload_ole              = 2
      OTHERS                  = 3.
  IF sy-subrc <> 0.

  ENDIF.


*Populate data to internal tables and structures

  SORT it_excel_data BY row col.
  lv_row_count =  |001|.
  DESCRIBE TABLE it_excel_data LINES DATA(lv_line).


  LOOP AT it_excel_data ASSIGNING FIELD-SYMBOL(<fs_excel_data>).
    IF lv_row_count NE <fs_excel_data>-row.
      IF ls_file_data-application_number IS NOT INITIAL.
        ls_file_data-created_date = sy-datum.
        APPEND  ls_file_data TO gt_dma_data.
      ELSE.
*          ELSE.
        APPEND INITIAL LINE TO gt_final ASSIGNING FIELD-SYMBOL(<fs_final>).
        <fs_final>-app_num = lv_bp.
        <fs_final>-er_mss  = |Duplicate Application number|.
        CLEAR : lv_bp.
        CLEAR : ls_file_data.
      ENDIF.
      lv_row_count = <fs_excel_data>-row.
      CLEAR ls_file_data.
    ENDIF.
    CASE <fs_excel_data>-col.
*      WHEN 004.

      WHEN 001.
*        SELECT SINGLE bpext FROM but000 INTO lv_BP WHERE bpext = <fs_excel_data>-value.
*        IF sy-subrc EQ 0.
*          CLEAR : ls_file_data.
*        ELSE.
*          IF <fs_excel_data>-value IS NOT INITIAL.
        ls_file_data-application_number         = <fs_excel_data>-value.
        TRANSLATE ls_file_data-application_number TO UPPER CASE.
*            lv_mandt = |Application number is mandatory|.
*          ENDIF.
*        ENDIF.
      WHEN 002.
*        ls_file_data-bp_kind                  =  <fs_excel_data>-value.
      WHEN 003.
*        ls_file_data-house_hold                 = <fs_excel_data>-value.
        DATA : lv_ptype TYPE char4.
        lv_ptype = <fs_excel_data>-value.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lv_ptype
          IMPORTING
            output = lv_ptype.
        ls_file_data-house_hold                 = lv_ptype.
      WHEN 004.
        ls_file_data-mobile_no                  = <fs_excel_data>-value.
      WHEN 005.
        CONCATENATE <fs_excel_data>-value '.' INTO <fs_excel_data>-value.
        ls_file_data-title                      = <fs_excel_data>-value.
      WHEN 006.
        ls_file_data-name_org1                 = <fs_excel_data>-value.
      WHEN 007.
        ls_file_data-name_org2                = <fs_excel_data>-value.
      WHEN 008.
        ls_file_data-legal_org                  = <fs_excel_data>-value.
      WHEN 009.
        ls_file_data-auth_first_name                  = <fs_excel_data>-value.
      WHEN 010.
        ls_file_data-auth_middle_name                  = <fs_excel_data>-value.
      WHEN 011.
        ls_file_data-auth_last_name                  = <fs_excel_data>-value.
      WHEN 012.
        ls_file_data-grid_code                   = <fs_excel_data>-value.
      WHEN 013.
        ls_file_data-ward_no                    = <fs_excel_data>-value.
      WHEN 014.
        ls_file_data-street_area                 = <fs_excel_data>-value.
      WHEN 015.
        ls_file_data-land_mark                    = <fs_excel_data>-value.
      WHEN 016.
        ls_file_data-district                    = <fs_excel_data>-value.      "landmark
      WHEN 017.
        ls_file_data-postal_code                = <fs_excel_data>-value.
      WHEN 018.
        ls_file_data-grid_name                    = <fs_excel_data>-value.
      WHEN 019.
        ls_file_data-state                   = <fs_excel_data>-value.
      WHEN 020.
        ls_file_data-mobile_alternate           = <fs_excel_data>-value.
      WHEN 021.
        ls_file_data-email_address                   = <fs_excel_data>-value.
      WHEN 022.
        ls_file_data-photo_identity_proof                = <fs_excel_data>-value.
      WHEN 023.
        ls_file_data-photo_id_no                = <fs_excel_data>-value.
      WHEN 024.
        ls_file_data-address_proof          = <fs_excel_data>-value.
      WHEN 025.
        ls_file_data-address_proof_id_no          = <fs_excel_data>-value.
      WHEN 026.
        ls_file_data-ownership_proof                = <fs_excel_data>-value.
      WHEN 027.
        ls_file_data-ownership_proof_id_no                = <fs_excel_data>-value.
      WHEN 028.
        ls_file_data-big_burner          = <fs_excel_data>-value.
      WHEN 029.
        ls_file_data-med_burner          = <fs_excel_data>-value.
      WHEN 030.
        ls_file_data-sm_burner          = <fs_excel_data>-value.
      WHEN 031.
        ls_file_data-cant_burner          = <fs_excel_data>-value.
      WHEN 032.
        ls_file_data-period_cons          = <fs_excel_data>-value.
      WHEN 033.
        ls_file_data-bank_name          = <fs_excel_data>-value.
      WHEN 034.
        ls_file_data-pay_date          = <fs_excel_data>-value.
      WHEN 035.
        ls_file_data-branch_name          = <fs_excel_data>-value.
      WHEN 036.
        ls_file_data-trans_type          = <fs_excel_data>-value.
      WHEN 037.
        ls_file_data-ref_id          = <fs_excel_data>-value.
      WHEN 038.
        ls_file_data-paid_upamt         = <fs_excel_data>-value.
      WHEN 039.
        ls_file_data-bank_cle_gl         = <fs_excel_data>-value.
      WHEN 040.
        ls_file_data-house_bank          = <fs_excel_data>-value.
      WHEN 041.
        ls_file_data-acc_id          = <fs_excel_data>-value.
    ENDCASE.

    IF sy-tabix EQ lv_line.
      IF ls_file_data-application_number IS NOT INITIAL.
        ls_file_data-created_date = sy-datum.
        APPEND  ls_file_data TO gt_dma_data.
      ELSE.
        APPEND INITIAL LINE TO gt_final ASSIGNING <fs_final>.
        <fs_final>-app_num = lv_bp.
        <fs_final>-er_mss  = |Duplicate Application number|.
        CLEAR : lv_bp.
      ENDIF.
    ENDIF.
  ENDLOOP.
  SORT gt_dma_data  BY application_number.
  DELETE ADJACENT DUPLICATES FROM gt_dma_data COMPARING application_number.
*  MODIFY ZCM_CI_BP_DATA FROM TABLE gt_dma_data.
*  COMMIT WORK AND WAIT.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form create_bp
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM create_bp .

  DATA : lv_new_conn  TYPE REF TO zcl_cm_utility,
         lv_posting   TYPE REF TO zcl_fica_scheme_postings,
         lv_bp        TYPE bu_partner,
         lv_sr_no     TYPE crmt_object_id_db,
         l_number     TYPE ad_pagnmbr,
         lv_cont      TYPE vkont_kk,
         lv_cont_flag TYPE char1,
         iv_fica      TYPE char1,
*         lv_cust_fields TYPE zcs_adp_cust_fields,
         lv_reg_date  TYPE datum,
         lv_total     TYPE zde_tot_amnt_nonup.

*  SELECT * FROM zscheme_sd_ip1 INTO TABLE @DATA(lt_scheme) .
  SELECT * FROM zcm_group_ca INTO TABLE @DATA(lt_gc_ca) FOR ALL ENTRIES IN @gt_dma_data WHERE bp_type = @gt_dma_data-bp_kind.
  IF gt_dma_data IS NOT INITIAL.

    SELECT  application_number , bp_number , vkont , sr_number FROM zcm_bp_data_c INTO TABLE @DATA(lt_dma) FOR ALL ENTRIES IN
            @gt_dma_data WHERE application_number = @gt_dma_data-application_number.
  ENDIF.
  CREATE OBJECT lv_new_conn.
*  CREATE OBJECT lv_posting.

*SORT
  DATA(lv_rows) = lines( gt_dma_data ).
  LOOP AT gt_dma_data ASSIGNING FIELD-SYMBOL(<fs_bp_data>).
*    BREAK-POINT.

    CLEAR : lv_bp,lv_sr_no,lv_cont,iv_fica.

    APPEND INITIAL LINE TO gt_final ASSIGNING FIELD-SYMBOL(<fs_final>).

*    IF line_exists( lt_gc_ca[ bp_type = <fs_bp_data>-cust_category pngrb_ga_code = <fs_bp_data>-ga_code ] ).
*      IF <fs_bp_data>-ga_code EQ 'CVK'.
*        IF line_exists( lt_gc_ca[ bp_type = <fs_bp_data>-cust_category pngrb_ga_code = <fs_bp_data>-ga_code pngrb_district = <fs_bp_data>-pngrb_dist ] ).
*          lv_new_conn->gs_gc_code = lt_gc_ca[ bp_type = <fs_bp_data>-cust_category pngrb_ga_code = <fs_bp_data>-ga_code  pngrb_district = <fs_bp_data>-pngrb_dist ].
*        ELSE.
*          <fs_final>-bp_number = lv_bp.
*          <fs_final>-app_num      = <fs_bp_data>-application_number.
*          <fs_final>-sr_number    = lv_sr_no.
*          <fs_final>-con_acc      = lv_cont.
*          <fs_final>-er_mss       = |Check Pngrb District  |.
*          CONTINUE.
*        ENDIF.
*      ELSE.
*        lv_new_conn->gs_gc_code = lt_gc_ca[ bp_type = <fs_bp_data>-cust_category pngrb_ga_code = <fs_bp_data>-ga_code ].
*      ENDIF.
*    ENDIF.

    lv_new_conn->gt_cm_bp_data_c = <fs_bp_data>.
    READ TABLE lt_gc_ca INTO ls_cm_group_ca WITH KEY grid_code = <fs_bp_data>-grid_code.
    lv_new_conn->gt_cm_ca_data = ls_cm_group_ca.

    IF line_exists( lt_dma[ application_number = <fs_bp_data>-application_number ] ).
      DATA(la_dma) = lt_dma[ application_number = <fs_bp_data>-application_number ].
      IF la_dma-bp_number IS NOT INITIAL AND la_dma-vkont IS NOT INITIAL.
        <fs_final>-bp_number = la_dma-bp_number.
        <fs_final>-app_num      = <fs_bp_data>-application_number.
        <fs_final>-sr_number    = la_dma-sr_number.
        <fs_final>-con_acc      = la_dma-bp_number.
        <fs_final>-er_mss       = |Duplicate Application number|.
        CLEAR : la_dma.
        CONTINUE.
*          ELSE.
*        if .
      ENDIF.
    ENDIF.
    IF la_dma-bp_number IS INITIAL.
      PERFORM validations_data USING <fs_bp_data>
                                CHANGING <fs_final>-er_mss.
      IF <fs_final>-er_mss IS NOT INITIAL.
        <fs_final>-app_num      = <fs_bp_data>-application_number.
        CLEAR : la_dma.
        CONTINUE.
      ENDIF.


      CALL METHOD lv_new_conn->create_bp_c
        IMPORTING
          es_bp = lv_bp.
    ELSE.
      lv_bp = la_dma-bp_number.
    ENDIF.
    IF lv_bp IS INITIAL .
      <fs_final>-app_num      = <fs_bp_data>-application_number.
      <fs_final>-er_mss =    |Error in Business Partner creation |.
      CONTINUE.
    ENDIF.

    CLEAR : la_dma.
    IF lv_bp IS NOT INITIAL.

*      CLEAR lv_cont_flag.
      IF la_dma-vkont IS INITIAL. "gsp
        CALL METHOD lv_new_conn->create_contratacct_c
          EXPORTING
            ev_partner = lv_bp
          IMPORTING
            ev_cont    = lv_cont.
      ELSE.                           "gsp
        lv_cont = la_dma-vkont.       " gsp
        lv_cont_flag = 'X'.
      ENDIF.   "gsp
      IF lv_cont IS INITIAL .
        <fs_final>-bp_number    = lv_bp.
        <fs_final>-app_num      = <fs_bp_data>-application_number.
        <fs_final>-er_mss =    |Error in contract account creation |.
        CONTINUE.
      ENDIF.

      IF lv_cont IS NOT INITIAL.

        CALL METHOD lv_new_conn->create_sr_c
          EXPORTING
            iv_bp     = lv_bp
            iv_ca     = lv_cont
*           iv_fica   = iv_fica
*           iv_cust_fields = lv_cust_fields
          IMPORTING
            es_req_no = lv_sr_no.

      ENDIF.

      <fs_bp_data>-sr_number = lv_sr_no.
      <fs_bp_data>-bp_number = lv_bp.
      <fs_bp_data>-vkont     = lv_cont.
      <fs_bp_data>-sr_number = lv_sr_no.
      <fs_bp_data>-bp_kind          = lv_new_conn->gt_cm_ca_data-bp_type.
      <fs_bp_data>-created_date   = sy-datum.
      MODIFY zcm_bp_data_c FROM <fs_bp_data>.
      COMMIT WORK .


    ENDIF.
    IF lv_bp IS NOT INITIAL AND lv_cont IS NOT INITIAL . "AND lv_sr_no IS NOT INITIAL.
      <fs_final>-bp_number = lv_bp.
      <fs_final>-app_num      = <fs_bp_data>-application_number.
      <fs_final>-sr_number    = lv_sr_no.
      <fs_final>-con_acc      = lv_cont.
      <fs_final>-er_mss       = |Record created successfully |.
    ELSE.
      <fs_final>-bp_number = lv_bp.
      <fs_final>-app_num      = <fs_bp_data>-application_number.
      <fs_final>-er_mss       = |Error in creation of BP/CA/SR|.
    ENDIF.

    cl_progress_indicator=>progress_indicate(
      EXPORTING
         i_text               = | Total Number of records processed  { sy-tabix } / { lv_rows } |
         i_output_immediately  = 'X'
    ).

  ENDLOOP.



ENDFORM.
*&---------------------------------------------------------------------*
*& Form ALV_dispaly
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM alv_dispaly .

  DATA: ls_layout  TYPE slis_layout_alv,
        ls_variant TYPE disvariant.

  ls_layout-zebra = abap_true.
  ls_layout-colwidth_optimize = abap_true.

  CONSTANTS : lc_srreq      TYPE char50  VALUE 'SR_NUMBER',
              lc_srname     TYPE char50  VALUE 'Service Request',
              lc_error      TYPE char50  VALUE 'ER_MSS',
              lc_errname    TYPE char50  VALUE  'Remarks',
              lc_appno      TYPE char50  VALUE 'APP_NUM',
              lc_appno_name TYPE char50  VALUE 'Application Number',
              lc_bp         TYPE char50  VALUE 'BP_NUMBER',
              lc_bpname     TYPE char50  VALUE 'PARTNER',
              lc_cont       TYPE char50  VALUE 'CON_ACC',
              lc_contname   TYPE char50  VALUE 'Contract account'..

  IF p_bp IS NOT INITIAL.
    mig_fieldcat      1     lc_appno      lc_appno_name         .
    mig_fieldcat      2     lc_bp         lc_bpname  .
    mig_fieldcat      3     lc_srreq      lc_srname .
    mig_fieldcat      4     lc_cont       lc_contname   .
    mig_fieldcat      5     lc_error      lc_errname   .

  ENDIF.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program       = sy-repid
      i_callback_user_command  = 'USER_COMMAND'
      it_fieldcat              = gt_fieldcat
      is_layout                = ls_layout
      i_callback_pf_status_set = 'SET_PF_STATUS'
      i_save                   = 'A'
      is_variant               = ls_variant
    TABLES
      t_outtab                 = gt_final
    EXCEPTIONS
      program_error            = 1
      OTHERS                   = 2.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form download_cust_template
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM download_cust_template .
  DATA: lo_excel              TYPE REF TO zcl_excel,
        lo_worksheet          TYPE REF TO zcl_excel_worksheet,
        lo_style              TYPE REF TO zcl_excel_style,
        lo_style_date         TYPE REF TO zcl_excel_style,
        lo_style_editable     TYPE REF TO zcl_excel_style,
        lo_data_validation    TYPE REF TO zcl_excel_data_validation,
        lt_field_catalog      TYPE zexcel_t_fieldcatalog,
        ls_table_settings     TYPE zexcel_s_table_settings,
        ls_table_settings_out TYPE zexcel_s_table_settings,
        lv_style_guid         TYPE zexcel_cell_style,
        lv_row                TYPE char10,
        lo_border_light       TYPE REF TO zcl_excel_style_border,
        lv_validation         TYPE string.

  FIELD-SYMBOLS: <lfs_field_catalog> TYPE zexcel_s_fieldcatalog.

  " Creates active sheet
  CREATE OBJECT: lo_excel, lo_border_light.

  " Get active sheet
  lo_worksheet = lo_excel->get_active_worksheet( ).
  lo_worksheet->set_title( ip_title = 'Customer' ).


*  short validations can be entered as string (<254Char)
*  DATA(lv_validation_string) = '"ZDOM, ZCOM, ZNDE, ZIND"'.

  "create validation object
*  lo_data_validation = lo_worksheet->add_new_data_validation( ).
*
*  "Add dropdown for BP Type
  lv_validation = '"ZCOM"'.
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
*  lo_data_validation->type           = zcl_excel_data_validation=>C_STYLE_WARNING.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'B'.
  lo_data_validation->cell_column_to = 'B'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.
*  "Add dropdown for Type of Establishment
  lv_validation = '"0009, 0020, 0021, 0022, 0023, 0024, 0025, 0026, 0027, 0028, 0029, 0030, 0031, 0032, 0033, 0049"'.
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
*  lo_data_validation->type           = zcl_excel_data_validation=>C_STYLE_WARNING.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'C'.
  lo_data_validation->cell_column_to = 'C'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"0003, 0005"'.
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
*  lo_data_validation->type           = zcl_excel_data_validation=>C_STYLE_WARNING.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'E'.
  lo_data_validation->cell_column_to = 'E'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"11, 12, 13, 14, 15, 16, 17, 18, 19"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'H'.
  lo_data_validation->cell_column_to = 'H'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"DUL, DIB, TIN, MOR, SIV, NAZ, NAH, DIG, GOL, JOR, MAR, TIT, BAR"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'L'.
  lo_data_validation->cell_column_to = 'L'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"Duliajan, Dibrugarh, Tinsukia, Moran, Sivsagar, Nazira, Naharkatia, Digboi, Golaghat, Jorhat, Margherita, Titabar, Barmathurapur"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'R'.
  lo_data_validation->cell_column_to = 'R'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"ZPAN, ZVOT, ZAADH, ZCIN, ZGST"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'V'.
  lo_data_validation->cell_column_to = 'V'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

   lv_validation = '"ZPLOW, ZLEAS, ZNOJO, ZTRAD, ZPOA, ZGPAN, ZELBL, ZCIN, ZGST"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'X'.
  lo_data_validation->cell_column_to = 'X'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"ZPLOW, ZLEAS, ZNOJO, ZTRAD, ZPOA, ZGPAN, ZELBL, ZCIN, ZGST"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'Z'.
  lo_data_validation->cell_column_to = 'Z'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"RTGS, NEFT, Cheque, DD, POS"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'AJ'.
  lo_data_validation->cell_column_to = 'AJ'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

*  "Add dropdown for Meter Location
*  lo_data_validation = lo_worksheet->add_new_data_validation( ).
*  lv_validation_string = |"'001, '002, '003, '004"|.
*
*  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
*  lo_data_validation->formula1       = lv_validation_string.
*  lo_data_validation->cell_row       = 2.
*  lo_data_validation->cell_row_to    = 10000.
*  lo_data_validation->cell_column    = 'M'.
*  lo_data_validation->cell_column_to = 'M'.
*  lo_data_validation->allowblank     = 'X'.
*  lo_data_validation->showdropdown   = 'X'.


  " sheet style (white background)
*  lo_style = lo_excel->add_new_style( ).
*  lo_style->fill->filltype = zcl_excel_style_fill=>c_fill_solid.
*  lo_style->fill->fgcolor-rgb  = zcl_excel_style_color=>c_white.
*
*  lo_border_light->border_style = zcl_excel_style_border=>c_border_thin.
*  lo_style->borders->allborders = lo_border_light.
*  lv_style_guid = lo_style->get_guid( ).
*
*  lo_worksheet->zif_excel_sheet_properties~set_style( lv_style_guid ).

  " sheet style (white background)
  lo_style = lo_excel->add_new_style( ).
  lo_style->fill->filltype = zcl_excel_style_fill=>c_fill_solid.
  lo_style->fill->fgcolor-rgb  = zcl_excel_style_color=>c_white.

  lo_border_light->border_style = zcl_excel_style_border=>c_border_thin.
  lo_style->borders->allborders = lo_border_light.
  lv_style_guid = lo_style->get_guid( ).

  lo_worksheet->zif_excel_sheet_properties~set_style( lv_style_guid ).

  lt_field_catalog = zcl_excel_common=>get_fieldcatalog( ip_table = gt_dma_data ).


  LOOP AT lt_field_catalog ASSIGNING <lfs_field_catalog>.
    CASE <lfs_field_catalog>-fieldname.

      WHEN 'APPLICATION_NUMBER'.
        <lfs_field_catalog>-position   = 1.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = |Application Number|.
      WHEN 'BP_KIND'.
        <lfs_field_catalog>-position   = 2.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = |BP Category|.
      WHEN 'HOUSE_HOLD'.
        <lfs_field_catalog>-position   = 3.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Type of Establishment'.
      WHEN 'MOBILE_NO'.
        <lfs_field_catalog>-position   = 4.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Mobile No'.
      WHEN 'TITLE'.
        <lfs_field_catalog>-position   = 5.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Title'.
      WHEN 'NAME_ORG1'.
        <lfs_field_catalog>-position   = 6.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Name1 of an Organization'.
      WHEN 'NAME_ORG2'.
        <lfs_field_catalog>-position   = 7.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Name2 of an Organization'.
      WHEN 'LEGAL_ORG'.
        <lfs_field_catalog>-position   = 8.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Legal Entity of Organization'.
      WHEN 'AUTH_FIRST_NAME'.
        <lfs_field_catalog>-position   = 9.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Authorized person First Name'.
      WHEN 'AUTH_MIDDLE_NAME'.
        <lfs_field_catalog>-position   = 10.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Authorized person Middle Name'.
      WHEN 'AUTH_LAST_NAME'.
        <lfs_field_catalog>-position   = 11.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Authorized person Last Name'.
      WHEN 'GRID_CODE'.
        <lfs_field_catalog>-position   = 12.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Grid Code'.
      WHEN 'WARD_NO'.
        <lfs_field_catalog>-position   = 13.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Ward No.'.
      WHEN 'STREET_AREA'.
        <lfs_field_catalog>-position   = 14.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Street/Area'.
      WHEN 'LAND_MARK'.
        <lfs_field_catalog>-position   = 15.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Landmark'.
      WHEN 'DISTRICT'.
        <lfs_field_catalog>-position   = 16.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'District'.
      WHEN 'POSTAL_CODE'.
        <lfs_field_catalog>-position   = 17.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Postal code'.
      WHEN 'GRID_NAME'.
        <lfs_field_catalog>-position   = 18.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Grid Name'.
      WHEN 'STATE'.
        <lfs_field_catalog>-position   = 19.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'state'.
      WHEN 'MOBILE_ALTERNATE'.
        <lfs_field_catalog>-position   = 20.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Mobile Number (Alternate)'.
      WHEN 'EMAIL_ADDRESS'.
        <lfs_field_catalog>-position   = 21.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Email Address'.
      WHEN 'PHOTO_IDENTITY_PROOF'.
        <lfs_field_catalog>-position   = 22.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Photo Identity Proof'.
      WHEN 'PHOTO_ID_NO'.
        <lfs_field_catalog>-position   = 23.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Photo ID Number'.
      WHEN 'ADDRESS_PROOF'.
        <lfs_field_catalog>-position   = 24.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Address ID Proof'.
      WHEN 'ADDRESS_PROOF_ID_NO'.
        <lfs_field_catalog>-position   = 25.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Address ID Number'.
      WHEN 'OWNERSHIP_PROOF'.
        <lfs_field_catalog>-position   = 26.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Ownership ID Proof'.
      WHEN 'OWNERSHIP_PROOF_ID_NO'.
        <lfs_field_catalog>-position   = 27.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Ownership ID Number'.
      WHEN 'BIG_BURNER'.
        <lfs_field_catalog>-position   = 28.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Big Halwa Bhatti Count'.
      WHEN 'MED_BURNER'.
        <lfs_field_catalog>-position   = 29.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Medium Halwa Bhatti Count'.
      WHEN 'SM_BURNER'.
        <lfs_field_catalog>-position   = 30.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Small Halwa Bhatti Count'.
      WHEN 'CANT_BURNER'.
        <lfs_field_catalog>-position   = 31.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Canteen Burner Count'.
      WHEN 'PERIOD_CONS'.
        <lfs_field_catalog>-position   = 32.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Periodic Consumption'.
      WHEN 'BANK_NAME'.
        <lfs_field_catalog>-position   = 33.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Bank Name'.
      WHEN 'PAY_DATE'.
        <lfs_field_catalog>-position   = 34.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Date of Payment'.
      WHEN 'BRANCH_NAME'.
        <lfs_field_catalog>-position   = 35.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Branch Name'.
      WHEN 'TRANS_TYPE'.
        <lfs_field_catalog>-position   = 36.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Type of Transaction'.
      WHEN 'REF_ID'.
        <lfs_field_catalog>-position   = 37.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Reference ID'.
      WHEN 'PAID_UPAMT'.
        <lfs_field_catalog>-position   = 38.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Paid Amount'.
      WHEN 'BANK_CLE_GL'.
        <lfs_field_catalog>-position   = 39.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Bank Clearing GL'.
      WHEN 'HOUSE_BANK'.
        <lfs_field_catalog>-position   = 40.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'House Bank ID'.
      WHEN 'ACC_ID'.
        <lfs_field_catalog>-position   = 41.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Account ID'.

      WHEN OTHERS.
        <lfs_field_catalog>-dynpfld = abap_false.
    ENDCASE.
  ENDLOOP.

  ls_table_settings-table_style       = zcl_excel_table=>builtinstyle_medium2.
  ls_table_settings-nofilters         = abap_true.

  lo_worksheet->bind_table( EXPORTING
                              ip_table          = gt_dma_data
                              it_field_catalog  = lt_field_catalog
                              is_table_settings = ls_table_settings
                              iv_default_descr = 'L'
                            IMPORTING
                              es_table_settings = ls_table_settings_out ).

* Create output
  PERFORM file_download USING lo_excel.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form file_download
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LO_EXCEL
*&---------------------------------------------------------------------*
FORM file_download  USING    cl_excel.
  DATA: lv_filename  TYPE string,
        lv_path      TYPE string,
        lv_fullpath  TYPE string,
        lv_message   TYPE string,
        lt_rawdata   TYPE solix_tab,
        lv_bytecount TYPE i,
        lv_xdata     TYPE xstring,
        lo_writer    TYPE REF TO zif_excel_writer,
        lo_error     TYPE REF TO zcx_excel.

  TRY.
      CREATE OBJECT lo_writer TYPE zcl_excel_writer_2007.

      lv_xdata = lo_writer->write_file( cl_excel ).

      lt_rawdata = cl_bcs_convert=>xstring_to_solix( iv_xstring  = lv_xdata ).
      lv_bytecount = xstrlen( lv_xdata ).

      CALL METHOD cl_gui_frontend_services=>file_save_dialog
        EXPORTING
          window_title              = 'Template Download'
          default_extension         = 'xlsx'
        CHANGING
          filename                  = lv_filename
          path                      = lv_path
          fullpath                  = lv_fullpath
        EXCEPTIONS
          cntl_error                = 1
          error_no_gui              = 2
          not_supported_by_gui      = 3
          invalid_default_file_name = 4
          OTHERS                    = 5. "#EC NOTEXT
      IF lv_fullpath IS NOT INITIAL.
* Get trailing blank
        cl_gui_frontend_services=>gui_download( EXPORTING bin_filesize = lv_bytecount
                                                          filename     = lv_filename
                                                          filetype     = 'BIN'
                                                 CHANGING data_tab     = lt_rawdata
                                               EXCEPTIONS OTHERS       = 1 ).
        IF sy-subrc <> 0.
          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                  WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 INTO lv_message.
          RAISE EXCEPTION TYPE zcx_excel EXPORTING error = lv_message.
        ENDIF.
      ENDIF.

    CATCH zcx_excel INTO lo_error.
      RAISE EXCEPTION lo_error.
  ENDTRY.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form Validactions_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> <FS_DMA_DATA>
*&      <-- <FS_FINAL>_ER_MSS
*&---------------------------------------------------------------------*
FORM validations_data  USING    p_dma_data TYPE zcm_bp_data_c
                        CHANGING p_final.

  IF p_dma_data-remarks IS NOT INITIAL.
    CONCATENATE  p_final p_dma_data-remarks INTO p_final SEPARATED BY space.
  ENDIF.
*
  IF p_dma_data-application_number IS INITIAL ."AND lv_BP IS INITIAL .
    CONCATENATE  p_final 'Application Number is mandatory' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-bp_kind IS INITIAL.
    CONCATENATE  p_final 'BP Category is mandatory,' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-house_hold IS INITIAL.
    CONCATENATE  p_final 'Type Of Establishment is mandatory,' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-mobile_no IS INITIAL.
    CONCATENATE  p_final 'Mobile No is mandatory,' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-mobile_no IS NOT INITIAL.
    DATA(lv_mo_length) = strlen( p_dma_data-mobile_no ).
    IF lv_mo_length <> 10.
      CONCATENATE  p_final 'Mobile No should be 10 digits,' INTO p_final SEPARATED BY space.
    ENDIF.
*    IF p_dma_data-mobile_no CN '0123456789'.
*      else.
*      CONCATENATE  p_final 'Mobile number contains inavlid characters' INTO p_final SEPARATED BY space.
*    ENDIF.
  ENDIF.

  IF p_dma_data-name_org1 IS INITIAL.
    CONCATENATE  p_final 'Name of the organization is mandatory,' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-legal_org IS INITIAL.
    CONCATENATE  p_final 'Legal Entity of an organization is mandatory,' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-grid_code IS INITIAL.
    CONCATENATE  p_final 'Grid Code is mandatory,' INTO p_final SEPARATED BY space.
  ENDIF.

*  IF p_dma_data-ward_no IS INITIAL.
*    CONCATENATE  p_final 'Ward No is mandatory,' INTO p_final SEPARATED BY space.
*  ENDIF.

  IF p_dma_data-district IS INITIAL.
    CONCATENATE  p_final 'District is mandatory,' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-postal_code IS INITIAL.
    CONCATENATE  p_final 'Postal Code is mandatory,' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-postal_code IS NOT INITIAL.
    DATA(lv_p_length) = strlen( p_dma_data-postal_code ).
    IF lv_p_length <> 6.
      CONCATENATE  p_final 'Postal code should be 6 digit,' INTO p_final SEPARATED BY space.
    ENDIF.
  ENDIF.

  IF p_dma_data-email_address IS INITIAL.
    CONCATENATE  p_final 'Email Address is mandatory,' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-email_address IS NOT INITIAL.
    DATA: iv_email TYPE string.
    iv_email =  p_dma_data-email_address.
    IF iv_email CP '+*.+*@+*.++*' OR
       iv_email CP '+*@+*.++*'.
      CONDENSE iv_email NO-GAPS.
      IF iv_email CO 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890.@-_ '.
*        CONCATENATE  p_final 'Email address is correct' INTO p_final SEPARATED BY space.
      ELSE.
        CONCATENATE  p_final 'Inavlid email address format,' INTO p_final SEPARATED BY space.
      ENDIF.
    ELSE.
      CONCATENATE  p_final 'Inavlid email address format,' INTO p_final SEPARATED BY space.
    ENDIF.
  ENDIF.

  IF p_dma_data-photo_identity_proof IS INITIAL.
    CONCATENATE  p_final 'Photo Identity Proof is mandatory' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-photo_id_no IS INITIAL.
    CONCATENATE  p_final 'Photo ID No is mandatory' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-address_proof IS INITIAL.
    CONCATENATE  p_final 'Address Proof is mandatory' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-address_proof_id_no IS INITIAL.
    CONCATENATE  p_final ' Address Proof ID No is mandatory' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-ownership_proof IS INITIAL.
    CONCATENATE  p_final 'Ownership Proof is mandatory' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-ownership_proof_id_no IS INITIAL.
    CONCATENATE  p_final 'Ownership Proof ID No is mandatory' INTO p_final SEPARATED BY space.
  ENDIF.


  IF p_dma_data-ownership_proof = 'ZGST' .

    IF p_dma_data-ownership_proof_id_no IS NOT INITIAL.
      DATA(lv_oid) = strlen( p_dma_data-ownership_proof_id_no ).
      IF lv_oid <> 15.
        CONCATENATE  p_final 'GST Number must be 15 digits,' INTO p_final SEPARATED BY space.
      ENDIF.
    ENDIF.
  ENDIF.

  IF p_dma_data-address_proof = 'ZGST'.

    IF p_dma_data-address_proof_id_no IS NOT INITIAL.
      DATA(lv_aid) = strlen( p_dma_data-address_proof_id_no ).
      IF lv_aid <> 15.
        CONCATENATE  p_final ' GST Number must be 15 digits,' INTO p_final SEPARATED BY space.
      ENDIF.
    ENDIF.
  ENDIF.

  IF  p_dma_data-photo_identity_proof = 'ZGST'.
    IF p_dma_data-photo_id_no IS NOT INITIAL.
      DATA(lv_pid) = strlen( p_dma_data-photo_id_no ).
      IF lv_pid <> 15.
        CONCATENATE  p_final 'GST Number must be 15 digits,' INTO p_final SEPARATED BY space.
      ENDIF.
    ENDIF.
  ENDIF.

*  IF p_dma_data-cust_category EQ |ZIND|.
*    IF p_dma_data-pay_term IS NOT INITIAL.
*      SELECT SINGLE text FROM te052t INTO @DATA(lv_text) WHERE spras = 'E' AND zahlkond = @p_dma_data-pay_term.
*      IF sy-subrc = 0.
*        IF lv_text IS INITIAL.
*          p_final  =  |Please check the Payment terms|.
*        ENDIF.
*      ELSE.
*        p_final  =  |Please check the Valid Payment terms|.
*      ENDIF.
*    ELSE.
*      p_final  =  |Payment terms is Mandatory|.
*    ENDIF.
*  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form get_file_data_bp_excel
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM get_file_data_bp_excel .
*  BREAK-POINT.
  DATA:lr_data    TYPE REF TO data,
       wa_data    TYPE zcm_bp_data_s_c,
       lv_int     TYPE i,
       lv_val     TYPE string,
       lv_remarks TYPE string.
  CONSTANTS: lv_pointer TYPE i VALUE 79. "66."C1
  FIELD-SYMBOLS:<lt_data> TYPE STANDARD TABLE..
  lr_data = NEW zcl_utility_excel( )->readexcelfile( v_file = CONV string( p_bp ) ).
  ASSIGN lr_data->* TO <lt_data>.
  LOOP AT <lt_data> ASSIGNING FIELD-SYMBOL(<wa_data>).
    IF sy-tabix = 1.
      CONTINUE.
    ENDIF.
    DO lv_pointer TIMES.
      ASSIGN COMPONENT sy-index OF STRUCTURE <wa_data> TO FIELD-SYMBOL(<wa_xl_data>).
      ASSIGN COMPONENT sy-index OF STRUCTURE wa_data TO FIELD-SYMBOL(<wa_tab_data>).
      IF <wa_xl_data> IS ASSIGNED AND <wa_xl_data> IS NOT INITIAL AND <wa_tab_data> IS ASSIGNED.
        CASE sy-index.
*          WHEN 002.

*>C1
          WHEN 001.
            TRANSLATE <wa_xl_data> TO UPPER CASE.
            <wa_tab_data> = <wa_xl_data>.

          WHEN 003.
            DATA : lv_ptype TYPE char4.
            lv_ptype = <wa_xl_data>.
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                input  = lv_ptype
              IMPORTING
                output = lv_ptype.
            <wa_tab_data> = lv_ptype..
            CLEAR <wa_xl_data>.

          WHEN 005.
            DATA : lv_ttype TYPE char4.
            lv_ttype = <wa_xl_data>.
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                input  = lv_ttype
              IMPORTING
                output = lv_ttype.
            <wa_tab_data> = lv_ttype..
            CLEAR <wa_xl_data>.
          WHEN 008.
            DATA : lv_stype TYPE char2.
            lv_stype = <wa_xl_data>.
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                input  = lv_stype
              IMPORTING
                output = lv_stype.
            <wa_tab_data> = lv_stype..
            CLEAR <wa_xl_data>.

          WHEN 034.

            CLEAR : lv_int.
            lv_val = <wa_xl_data>+0(4).
            CALL FUNCTION 'CONVERT_STRING_TO_INTEGER'
              EXPORTING
                p_string      = lv_val
              IMPORTING
                p_int         = lv_int
              EXCEPTIONS
                overflow      = 1
                invalid_chars = 2
                OTHERS        = 3.
            IF sy-subrc <> 0.
* Implement suitable error handling here
              CONCATENATE    <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data> .
*              CONCATENATE  <wa_xl_data>+0(2) <wa_xl_data>+3(2) <wa_xl_data>+6(4)  INTO  <wa_xl_data> SEPARATED BY '.'.
*              CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data> SEPARATED BY '.'.
              <wa_tab_data> = <wa_xl_data>.

            ELSE .

              CONCATENATE <wa_xl_data>+8(2) <wa_xl_data>+5(2) <wa_xl_data>+0(4) INTO  <wa_xl_data> SEPARATED BY '.'.
              <wa_tab_data> = <wa_xl_data>.
            ENDIF.
*          WHEN 004.
*            CONCATENATE <wa_xl_data>+8(2) <wa_xl_data>+5(2) <wa_xl_data>+0(4) INTO  <wa_xl_data> SEPARATED BY '.'.
*            <wa_tab_data> = <wa_xl_data>.

*          WHEN 007. " Titlte
*            CONCATENATE <wa_xl_data> '.' INTO <wa_xl_data>.
*            <wa_tab_data> = <wa_xl_data>.
*<C1
*          WHEN 011.
*            CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data>.
*            <wa_tab_data> = <wa_xl_data>.
*
*          WHEN 039.
*            CONCATENATE <wa_xl_data>+8(2) <wa_xl_data>+5(2) <wa_xl_data>+0(4) INTO  <wa_xl_data> SEPARATED BY '.'.
*            <wa_tab_data> = <wa_xl_data>.
*
*          WHEN 49.
*            TRANSLATE <wa_xl_data> TO UPPER CASE.
*            IF <wa_xl_data> EQ 'NO'.
*              CLEAR : <wa_xl_data>.
*            ENDIF.
*            <wa_tab_data> = <wa_xl_data>.
*          WHEN 52.
*            REPLACE ALL OCCURRENCES OF REGEX '[^\d]' IN <wa_xl_data> WITH ''.
*            <wa_xl_data>        = <wa_xl_data> / 100.
*            <wa_tab_data> = <wa_xl_data>.
*          WHEN 055.
*            CONCATENATE <wa_xl_data>+8(2) <wa_xl_data>+5(2) <wa_xl_data>+0(4) INTO  <wa_xl_data> SEPARATED BY '.'.
*            <wa_tab_data> = <wa_xl_data>.
*
*          WHEN 63.
*            CONCATENATE <wa_xl_data>+0(4) <wa_xl_data>+5(2) <wa_xl_data>+8(2)   INTO  <wa_xl_data>.
*            <wa_tab_data> = <wa_xl_data>.
*          WHEN 67.
*            REPLACE ALL OCCURRENCES OF  ',' IN  <wa_xl_data>  WITH ''.
*            <wa_tab_data> = <wa_xl_data>.
*          WHEN 69.
*            CONCATENATE <wa_xl_data>+0(4) <wa_xl_data>+5(2) <wa_xl_data>+8(2)   INTO  <wa_xl_data>.
*            <wa_tab_data> = <wa_xl_data>.
**            CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data>.
**            <wa_tab_data> = <wa_xl_data>.
*          WHEN 72.
*            CONCATENATE <wa_xl_data>+0(4) <wa_xl_data>+5(2) <wa_xl_data>+8(2)   INTO  <wa_xl_data>.
*            <wa_tab_data> = <wa_xl_data>.
**            CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data>.
**            <wa_tab_data> = <wa_xl_data>.
*          WHEN 76.
*            REPLACE ALL OCCURRENCES OF  ',' IN  <wa_xl_data>  WITH ''.
*            <wa_tab_data> = <wa_xl_data>.
*          WHEN 78.
*            CONCATENATE <wa_xl_data>+0(4) <wa_xl_data>+5(2) <wa_xl_data>+8(2)   INTO  <wa_xl_data>.
*            <wa_tab_data> = <wa_xl_data>.
*            CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data>.
*            <wa_tab_data> = <wa_xl_data>.
          WHEN OTHERS.
            <wa_tab_data> = <wa_xl_data>.
        ENDCASE.
      ENDIF.
    ENDDO.
    " Registration date no and KYC Date should be mapped
*    wa_data-kyc_date = wa_data-reg_date_no.
    APPEND INITIAL LINE TO gt_dma_data ASSIGNING FIELD-SYMBOL(<fs_bp_data>).
    MOVE-CORRESPONDING wa_data TO <fs_bp_data>.
    IF <fs_bp_data>-application_number IS NOT INITIAL.
      <fs_bp_data>-created_date = sy-datum.
    ELSE.
*      APPEND INITIAL LINE TO gt_final ASSIGNING <fs_final>.
*      <fs_final>-app_num = lv_bp.
*      <fs_final>-er_mss  = |Duplicate Application number|.
*      CLEAR : lv_bp.
    ENDIF.
    CLEAR wa_data.
  ENDLOOP.
  SORT gt_dma_data  BY application_number.
  DELETE ADJACENT DUPLICATES FROM gt_dma_data COMPARING application_number.
  DELETE gt_dma_data WHERE created_date IS INITIAL.
ENDFORM.

**********************************************************************************************************************
4th block
ZISU_CM_C_MI
ZISU_CM_R_PO_TO_MOVEIN_COM
**********************************************************************************************************************

*&---------------------------------------------------------------------*
*& Report ZISU_CM_R_PO_TO_MOVEIN
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Report ZISU_CM_R_PO_TO_MOVEIN
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zisu_cm_r_po_to_movein_com.

TYPE-POOLS: slis.
TABLES : crms4d_serv_h,zcm_bp_data_c.
RANGES r_date FOR sy-datum.
DATA : lv         TYPE c LENGTH 3,
       l_filename TYPE string.
DATA : gt_dma_data TYPE TABLE OF zcm_bp_data_c,
       la_dma_data TYPE  zcm_bp_data_c.

DATA: iv_meterread TYPE p LENGTH 10 DECIMALS 3 .

TYPES : BEGIN          OF      ty_fica_data,
          partner      TYPE    bu_partner,
          sr_request   TYPE    crmt_object_id_db,
          date_cre     TYPE    sy-datum,
          grid_code    TYPE    char50,
          plant        TYPE    werks,
          dist         TYPE    char50,
          ward         TYPE    char50,
*          plant        TYPE    werks, "zzplant , "char50,
*          dist         TYPE    char50,
*          ca           TYPE    char50,
          app_no       TYPE    char50,
          status       TYPE    char50,
          sub_status   TYPE    char50,
*          vrn_name     TYPE    char50,
*          ven_manu     TYPE    zz1_vendornumber,
*          po_manual    TYPE    zz1_ponumber,
*          vendor       TYPE    zz1_vendornumber,
*          po           TYPE    ebeln, "zz1_ponumber, "Change C1
          dev_loc      TYPE    text40, " KTEXT , "stort_t499s,
          matnr        TYPE    matnr,
          baujj        TYPE    baujj,
*          datab        TYPE    datab,
          herst        TYPE    herst,
          typbz        TYPE    typbz,
          serge        TYPE    serge,
          eadat        TYPE    eadat,
          e_zwstand    TYPE    e_zwstand,
*          extra_po     TYPE    bu_id_type,
*          extra_gi_po  TYPE    bu_id_type,
*          extra_gi_pi  TYPE    bu_id_type,
          vol_corr_fa  TYPE    e_zuszahlzw, "e_zuszahlzw,
*          tf_no        TYPE    char50,
          move_dt      TYPE    sy-datum,
          move_read    TYPE    char50,
*          no_burner    TYPE    char50,
*          meter_card   TYPE    char50,
*          rubb_date    TYPE    sy-datum , "char10,
*          drs_loc      TYPE    char50,
*          drs_no       TYPE    char50,
*          loopno       TYPE    char50,
          srm_no       TYPE    char50,
*          srm_cap      TYPE    char50,
          riser_iso    TYPE    char1,
          pipe_conn    TYPE    char1,
          pipe_conn_ri TYPE    char1,
          iso_inst     TYPE    char1,
          house_pipe   TYPE    char1,
*          remark       TYPE     char50,"Siva-S4DK907687- 24-05-2023
*          remark       TYPE     char100, "Siva-S4DK907687- 24-05-2023
       remark      TYPE     CHAR_1536,
          conv_date    TYPE    char20,
        END            OF      ty_fica_data.

CONSTANTS : lc_srreq     TYPE char50  VALUE 'SR_REQUEST',
            lc_srname    TYPE char50  VALUE 'Service Request',
            lc_datecre   TYPE char50  VALUE 'DATE_CRE',
            lc_datename  TYPE char50  VALUE 'Date of Creation',
            lc_bp        TYPE char50  VALUE 'PARTNER',
            lc_bpname    TYPE char50  VALUE 'Partner',
            lc_gc        TYPE char50  VALUE 'Grid_code',
            lc_gcode     TYPE char50  VALUE 'Grid Code',
            lc_wa        TYPE char50  VALUE 'ward',
            lc_waname    TYPE char50  VALUE 'ward',
            lc_dist      TYPE char50  VALUE 'DIST',
            lc_dist_name TYPE char50  VALUE 'District',
            lc_app       TYPE char50  VALUE 'APP_NO',
            lc_appname   TYPE char50  VALUE 'Application Number',
*            lc_ca        TYPE char50  VALUE 'CA',
*            lc_caname    TYPE char50  VALUE 'WARD',
*            lc_vendorn   TYPE char50  VALUE 'VRN_NAME',
*            lc_vennamen  TYPE char50  VALUE 'Vendor Name',
*            lc_vendor    TYPE char50  VALUE 'VENDOR',
*            lc_venname   TYPE char50  VALUE 'Vendor',
*            lc_po        TYPE char50  VALUE 'PO',
*            lc_poname    TYPE char50  VALUE 'PO',
*            lc_venmanu   TYPE char50  VALUE 'VEN_MANU',
*            lc_venman    TYPE char50  VALUE 'System Proposed  Vendor Code',
*            lc_poman     TYPE char50  VALUE 'PO_MANUAL',
*            lc_pomanname TYPE char50  VALUE 'System Proposed PO No.',
            lc_movein    TYPE char50  VALUE 'MOVE_DT',
            lc_moveinnm  TYPE char50  VALUE 'Conversion/Move in date',
            lc_moverd    TYPE char50  VALUE 'MOVE_READ',
            lc_moverdnm  TYPE char50  VALUE 'Move in Read',
*            lc_nobur     TYPE char50  VALUE 'NO_BURNER',
*            lc_noburnm   TYPE char50  VALUE 'No. of Burners',
*            lc_rubtu     TYPE char50  VALUE 'RUBB_DATE',
*            lc_rubtunm   TYPE char50  VALUE 'Rubber tube expiry date',
*            lc_drstu     TYPE char50  VALUE 'DRS_LOC',
*            lc_drstunm   TYPE char50  VALUE 'DRS Location',
*            lc_drsno     TYPE char50  VALUE 'DRS_NO',
*            lc_drsnounm  TYPE char50  VALUE 'DRS No',
*            lc_loop      TYPE char50  VALUE 'LOOPNO',
*            lc_loopnm    TYPE char50  VALUE 'Loop No',
            lc_srmno     TYPE char50  VALUE 'SRM_NO',
            lc_srmnonm   TYPE char50  VALUE 'SRM No',
*            lc_srmcap    TYPE char50  VALUE 'SRM_CAP',
*            lc_srmcapnm  TYPE char50  VALUE 'SRM Capacity',
            lc_status    TYPE char50  VALUE 'STATUS',
            lc_statnam   TYPE char50  VALUE 'Status',
            lc_substatus TYPE char50  VALUE 'SUB_STATUS',
            lc_substanam TYPE char50  VALUE 'Sub status',
            lc_plant     TYPE char50  VALUE 'PLANT',
            lc_plannam   TYPE char50  VALUE 'Plant',
*            lc_mtrcd     TYPE char50  VALUE 'METER_CARD',
*            lc_mtrcdnm   TYPE char50  VALUE 'Meter Job card and image upload',
*            lc_remark    TYPE char50  VALUE 'REMARK', "Siva-S4DK907687- 24-05-2023
*            lc_remarnam  TYPE char50  VALUE 'Remarks', "Siva-S4DK907687- 24-05-2023
            lc_remark    TYPE char100  VALUE 'REMARK', "Siva-S4DK907687- 24-05-2023
            lc_remarnam  TYPE char100 VALUE 'Remarks', "Siva-S4DK907687- 24-05-2023
            lc_dev_lo    TYPE char50  VALUE 'DEV_LOC',
            lc_devnam    TYPE char50  VALUE 'Device located',
            lc_matnr     TYPE char50  VALUE 'MATNR',
            lc_mtrnam    TYPE char50  VALUE 'Material No',
            lc_baujj     TYPE char50  VALUE 'BAUJJ',
            lc_baujjnam  TYPE char50  VALUE 'Year of Make',
            lc_herst     TYPE char50  VALUE 'HERST',
            lc_herstnam  TYPE char50  VALUE 'Meter Manufacturer name',
            lc_typbz     TYPE char50  VALUE 'TYPBZ',
            lc_typbznam  TYPE char50  VALUE 'Meter Model',
            lc_serge     TYPE char50  VALUE 'SERGE',
            lc_sergenam  TYPE char50  VALUE 'Meter Serial No',
            lc_eadat     TYPE char50  VALUE 'EADAT',
            lc_eadatnam  TYPE char50  VALUE 'Meter Installation date',
            lc_ezwstand  TYPE char50  VALUE 'E_ZWSTAND',
            lc_ezwnam    TYPE char50  VALUE 'Meter reading',
*            lc_extpo     TYPE char50  VALUE 'EXTRA_PO',
*            lc_extnam    TYPE char50  VALUE 'Extra kitchen Point',
*            lc_extgipo   TYPE char50  VALUE 'EXTRA_GI_PO',
*            lc_extginam  TYPE char50  VALUE 'Extra Gyeser Point',
*            lc_extgipi   TYPE char50  VALUE 'EXTRA_GI_PI',
*            lc_extgpinam TYPE char50  VALUE 'Extra GI Pipe in Mtrs',
            lc_volcr     TYPE char50  VALUE 'VOL_CORR_FA',
            lc_volcrnam  TYPE char50  VALUE 'Volume Correction Factor',
            lc_vfrom     TYPE char50  VALUE 'VALID_FROM',
            lc_vfromnam  TYPE char50  VALUE 'Valid From',
            lc_mtloc     TYPE char50  VALUE 'METER_LOC',
            lc_mtlocnam  TYPE char50  VALUE 'Meter Location',
            lc_risiso    TYPE char50  VALUE 'RISER_ISO',
            lc_risisonam TYPE char50  VALUE 'Riser Isolation Valve Installed',
            lc_picon     TYPE char50  VALUE 'PIPE_CONN',
            lc_piconnam  TYPE char50  VALUE 'Pipe Connected up to Metering unit',
            lc_piconri   TYPE char50  VALUE 'PIPE_CONN_RI',
            lc_picorinam TYPE char100 VALUE 'Pipe Connected from metering unit up to isolation valve',
            lc_isoinst   TYPE char50  VALUE 'ISO_INST',
            lc_isointnam TYPE char50  VALUE 'Isolation valve Installed',
            lc_hopipe    TYPE char50  VALUE 'HOUSE_PIPE',
            lc_hopipenam TYPE char50  VALUE 'Hose Pipe Installed'.
*            lc_tfno      TYPE char50  VALUE 'TF_NO',
*            lc_tfnam     TYPE char50  VALUE 'TF No'.
.
DATA: gt_outtab TYPE TABLE OF ty_fica_data,
      la_outtab TYPE  ty_fica_data.
DATA : g_sec TYPE char1.
DATA:
  lv_rc          TYPE  i,
  lv_user_action TYPE  i,
  lt_file_table  TYPE  filetable,
  ls_file_table  LIKE LINE OF lt_file_table.

DATA: gt_fieldcat   TYPE slis_t_fieldcat_alv,
      lw_fieldcat   TYPE slis_fieldcat_alv,
      lv_poinv_flag TYPE boolean. "Siva-S4DK907687- 24-05-2023


SELECTION-SCREEN BEGIN OF BLOCK 0001 WITH FRAME TITLE TEXT-001.
  PARAMETERS:
    p1 RADIOBUTTON GROUP 1 DEFAULT 'X' USER-COMMAND cm1,
    p2 RADIOBUTTON GROUP 1.


  SELECTION-SCREEN BEGIN OF BLOCK 0002 WITH FRAME TITLE TEXT-002.

*&--- Business Partner
    SELECT-OPTIONS:  s_post     FOR   sy-datum MODIF ID m2,
                     s_tras     FOR   crms4d_serv_h-object_id MODIF ID m2,
                     s_gcode      FOR   zcm_bp_data_c-grid_code MODIF ID m2,
                     s_app      FOR   zcm_bp_data_c-application_number MODIF ID m2.
    PARAMETERS:      p_gc TYPE rlgrap-filename MODIF ID m1  . " FOR spfli-carrid MODIF ID m1,
*                p_otfile TYPE rlgrap-filename MODIF ID m2.
  SELECTION-SCREEN END OF BLOCK 0002.
SELECTION-SCREEN END OF BLOCK 0001.

AT SELECTION-SCREEN OUTPUT.

  IF p1 IS NOT INITIAL.
    lv = 'M1'.
  ELSE.
    lv = 'M2'.
  ENDIF.

  LOOP AT SCREEN.
    IF screen-group1 = lv.
      screen-active = '0'.
    ENDIF.
    MODIFY SCREEN.
  ENDLOOP.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_gc.
*----------------------------------------------------------------------*


*  CALL METHOD cl_gui_frontend_services=>directory_browse
*    EXPORTING
*      window_title         = 'Directory to use'
*      initial_folder       = 'Z:'
*    CHANGING
*      selected_folder      = l_filename
*    EXCEPTIONS
*      cntl_error           = 1
*      error_no_gui         = 2
*      not_supported_by_gui = 3
*      OTHERS               = 4.
*  IF sy-subrc <> 0.
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*  ENDIF.

  cl_gui_frontend_services=>file_open_dialog(
    EXPORTING
      window_title      = 'Customer File'
      multiselection    = ''
      default_extension = '*.xlsx'
      file_filter       = 'Text file (*.xlsx)|*.xlsx|All (*.*)|*.*'
    CHANGING
      file_table        = lt_file_table
      rc                = lv_rc
      user_action       = lv_user_action
    EXCEPTIONS
      OTHERS            = 1 ).
  IF sy-subrc = 0.
    IF lv_user_action = cl_gui_frontend_services=>action_ok.
      IF lt_file_table IS NOT INITIAL.
        READ TABLE lt_file_table INTO ls_file_table INDEX 1.
        IF sy-subrc = 0.
          l_filename = ls_file_table-filename.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

  p_gc = l_filename.

START-OF-SELECTION.

  DEFINE mig_fieldcat.
    CLEAR lw_fieldcat.
 lw_fieldcat-col_pos = &1.
 lw_fieldcat-fieldname = &2.
 lw_fieldcat-tabname    = 'GT_OUTTAB'.
 lw_fieldcat-seltext_l = &3.
 APPEND lw_fieldcat TO gt_fieldcat.

  END-OF-DEFINITION.

  IF p1 IS NOT INITIAL.
    CLEAR: p_gc,l_filename.
  ENDIF.
  IF p_gc  IS NOT INITIAL .
*    PERFORM get_file_data.   "" Commented by Tanveer
    PERFORM get_file_data_excel.
  ELSE.
    PERFORM get_data.
  ENDIF.
  PERFORM alv_gruid.
*&---------------------------------------------------------------------*
*& Form Get_file_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM get_file_data .

  DATA : it_excel_data TYPE TABLE OF alsmex_tabline,
         lv_row_count  TYPE i,
         ls_file_data  TYPE ty_fica_data.


  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
    EXPORTING
      filename                = p_gc
      i_begin_col             = 1
      i_begin_row             = 2
      i_end_col               = 99
      i_end_row               = 9999
    TABLES
      intern                  = it_excel_data
    EXCEPTIONS
      inconsistent_parameters = 1
      upload_ole              = 2
      OTHERS                  = 3.
  IF sy-subrc <> 0.

* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.


*Populate data to internal tables and structures

  SORT it_excel_data BY row col.
  lv_row_count =  |001|.
  DESCRIBE TABLE it_excel_data LINES DATA(lv_line).

  LOOP AT it_excel_data ASSIGNING FIELD-SYMBOL(<fs_excel_data>).
    IF lv_row_count NE <fs_excel_data>-row.
      APPEND  ls_file_data TO gt_outtab.
      lv_row_count = <fs_excel_data>-row.
      CLEAR ls_file_data.

    ELSE.

    ENDIF.
    CASE <fs_excel_data>-col.
      WHEN 001.
        ls_file_data-partner                  = <fs_excel_data>-value.
      WHEN 002.
        ls_file_data-sr_request               = <fs_excel_data>-value.
      WHEN 003.
        CONCATENATE <fs_excel_data>-value+6(4)  <fs_excel_data>-value+3(2) <fs_excel_data>-value+0(2)   INTO ls_file_data-date_cre .
      WHEN 004.
        ls_file_data-grid_code                       = <fs_excel_data>-value.
      WHEN 005.
        ls_file_data-ward                    = <fs_excel_data>-value.
      WHEN 006.
        ls_file_data-plant                     = <fs_excel_data>-value.
      WHEN 007.
        ls_file_data-dist                       = <fs_excel_data>-value.
      WHEN 008.
        ls_file_data-app_no                   = <fs_excel_data>-value.
      WHEN 009.
        ls_file_data-status                   = <fs_excel_data>-value.
      WHEN 010.
        ls_file_data-sub_status               = <fs_excel_data>-value.
*      WHEN 011.
*        ls_file_data-matnr                 = <fs_excel_data>-value.
*      WHEN 012.
*        REPLACE ALL OCCURRENCES OF REGEX '[^\d]' IN <fs_excel_data>-value WITH ''.
*        ls_file_data-ven_manu                 = <fs_excel_data>-value.
*      WHEN 013.
*        REPLACE ALL OCCURRENCES OF REGEX '[^\d]' IN <fs_excel_data>-value WITH ''.
*        ls_file_data-po_manual                = <fs_excel_data>-value.
*      WHEN 014.
*        REPLACE ALL OCCURRENCES OF REGEX '[^\d]' IN <fs_excel_data>-value WITH ''.
*        ls_file_data-vendor                   = <fs_excel_data>-value.
*      WHEN 015.
*        REPLACE ALL OCCURRENCES OF REGEX '[^\d]' IN <fs_excel_data>-value WITH ''.
*        ls_file_data-po                       = <fs_excel_data>-value.
      WHEN 011.
        ls_file_data-dev_loc                  = <fs_excel_data>-value.
      WHEN 012.
        ls_file_data-matnr                    = <fs_excel_data>-value.
      WHEN 013.
        ls_file_data-baujj                    = <fs_excel_data>-value.
      WHEN 014.
        ls_file_data-herst                    = <fs_excel_data>-value.
      WHEN 015.
        ls_file_data-typbz                    = <fs_excel_data>-value.
      WHEN 016.
        ls_file_data-serge                    = <fs_excel_data>-value.
      WHEN 017.
        CONCATENATE <fs_excel_data>-value+6(4)  <fs_excel_data>-value+3(2) <fs_excel_data>-value+0(2)   INTO <fs_excel_data>-value.
        ls_file_data-eadat                    = <fs_excel_data>-value.
      WHEN 018.
        ls_file_data-e_zwstand                = <fs_excel_data>-value.
*      WHEN 024.
*        ls_file_data-extra_po                 = <fs_excel_data>-value.
*      WHEN 025.
*        ls_file_data-extra_gi_po              = <fs_excel_data>-value.
*      WHEN 026.
*        ls_file_data-extra_gi_pi              = <fs_excel_data>-value.
      WHEN 019.
        ls_file_data-vol_corr_fa              = <fs_excel_data>-value.
*      WHEN 028.
*        ls_file_data-tf_no                    = <fs_excel_data>-value.
      WHEN 020.
        CONCATENATE <fs_excel_data>-value+6(4)  <fs_excel_data>-value+3(2) <fs_excel_data>-value+0(2)   INTO <fs_excel_data>-value.
        ls_file_data-conv_date                = <fs_excel_data>-value.
        ls_file_data-move_dt                  = <fs_excel_data>-value.
      WHEN 021.
        ls_file_data-move_read                = <fs_excel_data>-value.
*      WHEN 031.
*        ls_file_data-no_burner                = <fs_excel_data>-value.
*      WHEN 032.
*        IF <fs_excel_data>-value IS NOT INITIAL.
*          CONCATENATE <fs_excel_data>-value+6(4)  <fs_excel_data>-value+3(2) <fs_excel_data>-value+0(2)   INTO <fs_excel_data>-value.
*          ls_file_data-rubb_date                = <fs_excel_data>-value.
*        ENDIF.
*      WHEN 033.
*        ls_file_data-drs_loc                  = <fs_excel_data>-value.
*      WHEN 034.
*        ls_file_data-drs_no                   = <fs_excel_data>-value.
*      WHEN 035.
*        ls_file_data-loopno                   = <fs_excel_data>-value.
*      WHEN 020.
*        ls_file_data-srm_no                   = <fs_excel_data>-value.
*      WHEN 037.
*        ls_file_data-srm_cap                  = <fs_excel_data>-value.
*      WHEN 021.
*        ls_file_data-riser_iso                = <fs_excel_data>-value.
*      WHEN 022.
*        ls_file_data-pipe_conn                = <fs_excel_data>-value.
*      WHEN 023.
*        ls_file_data-pipe_conn_ri             = <fs_excel_data>-value.
*      WHEN 024.
*        ls_file_data-iso_inst                 = <fs_excel_data>-value.
*      WHEN 025.
*        ls_file_data-house_pipe               = <fs_excel_data>-value.
      WHEN 022.
        ls_file_data-remark                   = <fs_excel_data>-value.
    ENDCASE.

    IF sy-tabix EQ lv_line.
      APPEND  ls_file_data TO gt_outtab.
    ENDIF.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form update_sr
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM update_sr .

  CONSTANTS : lc_g TYPE char1 VALUE 'S'.
  DATA : lt_retune TYPE TABLE OF bapiret2.

  DATA : lv_new_conn    TYPE REF TO zcl_cm_utility,
*         lv_posting     TYPE REF TO zcl_fica_scheme_postings,
         lv_part        TYPE crmt_partner_no,
*         lv_guid        TYPE crmt_object_guid,
         iv_part_fc     TYPE comt_partner_fct,
         lv_code        TYPE crm_qcode,
         iv_cat_id      TYPE crm_erms_cat_as_id,
         lv_status      TYPE crm_j_status,
         iv_status_prof TYPE crm_j_stsma,
         lv_guid        TYPE crmt_object_guid,
         lv_sucess      TYPE char1,
         lv_reg_date    TYPE datum.

  DATA : lv_moveincndata  TYPE bapiisumoveincr_c,
         lv_movininput    TYPE bapiisumoveincr_i,
         lv_movedoc       TYPE bapiisumoveincr_i-moveindocnumber,
*        lt_retune        TYPE TABLE of BAPIRET2,
         lt_contractdata  TYPE TABLE OF bapiisucontract,
         lt_contractdatax TYPE TABLE OF bapiisucontractx,
         lt_meterread     TYPE TABLE OF bapieablu,
         la_meterread     TYPE bapieablu,
*         ls_cust_fields   TYPE zcs_adp_cust_fields,
         lv_total         TYPE zde_tot_amnt_nonup,
         lv_floc          TYPE tplnr. ",
*         it_table         TYPE zcs_pm_fpe1_mass_ty.


  CONSTANTS : lc_cat_id_ven  TYPE crm_erms_cat_as_id VALUE 'C2FP',
              lc_cat_id_plum TYPE crm_erms_cat_as_id VALUE 'C3EP', "'PLUMBING_METER_INSTALL_PENDING_4_DOM',
              lc_cat_id      TYPE crm_erms_cat_as_id VALUE 'C4CP', "'GAS_IN_CONVERSION_PENDING_6_DOM',
*              lc_cat_grund   TYPE crm_erms_cat_as_id VALUE 'D6GP' , "'GROUND CONNECTION PENDING_5_DOM',
*              lc_cat_mi      TYPE crm_erms_cat_as_id VALUE 'GAS_IN_CONVERSION_PENDING_6_DOM',
              lc_bis         TYPE biszeitsch VALUE '99991231'.
*              lc_INACT    TYPE CRM_J_INACT  VALUE abap_tr
  CLEAR : g_sec.


*  CREATE OBJECT lv_posting.


  DEFINE mig_status.
    lv_guid  = &1.
*    ls_cust_fields = &2.
    lv_status = &2.
    iv_status_prof = &3.
    lv_code = &4.
    iv_cat_id = &5.
    CALL METHOD lv_new_conn->status_change_com
    EXPORTING
      iv_ref_guid    = ls_head-header_guid
*      iv_cust_fields = ls_cust_fields
      iv_status      = lv_status
      iv_status_prof = iv_status_prof
      iv_code        = lv_code
      iv_cat_id      = iv_cat_id
     IMPORTING
      ev_sucess      = lv_sucess.
  END-OF-DEFINITION.
  IF gt_outtab IS NOT INITIAL.


    CREATE OBJECT lv_new_conn.
*
*
    SELECT header_guid  , object_id , process_type , sold_to_party

      FROM crms4d_serv_h INTO TABLE @DATA(lt_header)
      FOR ALL ENTRIES IN @gt_outtab WHERE object_id = @gt_outtab-sr_request.

    IF lt_header IS NOT INITIAL.

      SELECT * FROM zcm_bp_data_c INTO TABLE @DATA(lt_dca) FOR ALL ENTRIES IN @lt_header WHERE bp_number = @lt_header-sold_to_party.
      SELECT object_id , number_int , sort , codegruppe , code  , cat_id FROM crms4d_srv_subj INTO TABLE @DATA(lt_sub) FOR ALL ENTRIES IN
             @lt_header WHERE object_id   = @lt_header-object_id.
      DELETE lt_sub WHERE number_int NE |000000| .
      DELETE lt_sub WHERE   code IS INITIAL.
      IF lt_dca IS NOT INITIAL.
        SELECT anlage , vstelle FROM eanl INTO TABLE @DATA(lt_eanl)  FOR ALL ENTRIES IN @lt_dca WHERE vstelle = @lt_dca-vstelle.
        SELECT ablbelnr,anlage, ablesgr, adatsoll FROM eablg INTO TABLE @DATA(lt_eablg) FOR ALL ENTRIES IN @lt_eanl WHERE anlage = @lt_eanl-anlage AND ( ablesgr = '21' OR ablesgr = '22' ).
        SORT lt_eablg BY adatsoll anlage ablbelnr DESCENDING.
        SELECT * FROM zcm_group_ca INTO TABLE @DATA(lt_grp_ca) FOR ALL ENTRIES IN @lt_dca WHERE bp_type = @lt_dca-bp_kind . "AND bp_grouping = @lt_dca-ga_code.
*          if lt_ean,,l is NOT INITIAL.
        SELECT vstelle , haus  FROM evbs INTO  TABLE @DATA(lt_evbs) FOR ALL ENTRIES IN @lt_eanl WHERE vstelle = @lt_eanl-vstelle.

        SELECT tplnr , fltyp , tplma FROM iflot INTO TABLE @DATA(lt_iflot) FOR ALL ENTRIES IN @lt_evbs WHERE tplma EQ @lt_evbs-haus AND fltyp EQ @lc_g.
        IF lt_iflot IS NOT INITIAL.
          SELECT equnr , bis , devloc , amcg_cap_grp FROM egerh INTO TABLE @DATA(lt_egerh) FOR ALL ENTRIES IN @lt_iflot WHERE bis = @lc_bis AND devloc = @lt_iflot-tplnr.

          IF lt_egerh IS NOT INITIAL.
            SELECT equnr , matnr , serge FROM equi INTO TABLE @DATA(lt_msn) FOR ALL ENTRIES IN @lt_egerh WHERE equnr = @lt_egerh-equnr.

          ENDIF.
        ENDIF.

        SELECT vkont , vktyp FROM fkkvk INTO TABLE @DATA(lt_fkkvk) FOR ALL ENTRIES IN @lt_dca WHERE vkont = @lt_dca-vkont.
        SELECT vkont , bupla , gsber  FROM fkkvkp INTO TABLE @DATA(lt_fkkvkp) FOR ALL ENTRIES IN @lt_dca WHERE vkont = @lt_dca-vkont.
        SELECT partner , bu_group FROM but000 INTO TABLE @DATA(lt_but000) FOR ALL ENTRIES IN @lt_dca WHERE partner = @lt_dca-bp_number.
        SELECT stand, ktext FROM t499s INTO TABLE @DATA(lt_t499s) FOR ALL ENTRIES IN @gt_outtab WHERE ktext =  @gt_outtab-dev_loc.

        SELECT * FROM crmc_erms_cat_ca INTO TABLE @DATA(lt_cat) .
        SELECT * FROM crmc_erms_cat_hi INTO TABLE @DATA(lt_cat_hi) .
        SELECT * FROM crmc_erms_cat_cd INTO TABLE @DATA(lt_cat_dis) .
*        SELECT * FROM zcm_status_map INTO TABLE @DATA(lt_status_map).

*        SELECT * FROM crmv_erms_cat_ca INTO TABLE @DATA(lt_cat_dis) WHERE lang = 'E' AND asp_id = 'AGP_DOM_NEWCONN'.
*        SELECT * FROM zisu_mru_det INTO TABLE @DATA(lt_isu_mru).
*        SELECT * FROM zscheme_sd_ip1 INTO TABLE @DATA(lt_scheme) .
        SELECT * FROM crmc_qpct INTO TABLE @DATA(it_code_grp) WHERE katalogart = 'ZS' AND codegruppe = 'AGCLCONC'.
*        SELECT * FROM zdma_po_assign INTO TABLE @DATA(lt_po_assign) FOR ALL ENTRIES IN @gt_outtab WHERE plant = @gt_outtab-plant.
*>Start of C1
*        IF gt_outtab IS NOT INITIAL.
*          SELECT * FROM ekko INTO TABLE @DATA(lt_ekko) FOR ALL ENTRIES IN @gt_outtab WHERE ebeln = @gt_outtab-po."_manual.
*          "AND KDATB <=  sy-datum AND KDATE >= sy-datum.
*          IF sy-subrc = 0.
*            SORT lt_ekko BY ebeln.
*          ENDIF.
*        ENDIF.
*<End of C1
        SELECT  vertrag , anlage , vkonto FROM ever INTO TABLE @DATA(lt_ever) FOR ALL ENTRIES IN @lt_dca WHERE anlage = @lt_dca-anlage
                                                                                                               AND auszdat EQ @lc_bis.
*        SELECT * FROM zfica_rate_dom INTO TABLE @DATA(lt_fica_rate) .
*        DELETE lt_fica_rate WHERE to_date LT sy-datum.
*         SELECT LIFNR FROM LFA1 INTO TABLE @DATA(lt_LFA1) FOR ALL ENTRIES IN
      ENDIF.
*      CREATE OBJECT lv_new_conn.
      LOOP AT  gt_outtab ASSIGNING FIELD-SYMBOL(<fs_output>).
        CLEAR : la_meterread,lv_moveincndata,lv_movininput,lv_movedoc,lv_code,lv_guid,lv_status,iv_status_prof,lv_code,iv_cat_id,lv_sucess,lv_floc."ls_cust_fields.
        lv_poinv_flag = abap_false."Siva-S4DK907687- 24-05-2023
        REFRESH : lt_meterread,lt_retune,lt_contractdata,lt_contractdatax,lt_meterread.


        TRANSLATE <fs_output>-sub_status TO UPPER CASE .
        IF line_exists( it_code_grp[ code = <fs_output>-sub_status ] ).
          DATA(la_cpde_grp) =  it_code_grp[ code = <fs_output>-sub_status ].
          TRANSLATE la_cpde_grp-kurztext TO UPPER CASE.
          IF line_exists( lt_cat[ cat_id = la_cpde_grp-kurztext ] ).
            DATA(la_cat)       =  lt_cat[ cat_id = la_cpde_grp-kurztext ].
            IF line_exists( lt_cat_dis[ cat_guid = la_cat-cat_guid ] ).
              DATA(la_cat_dis)   =  lt_cat_dis[ cat_guid = la_cat-cat_guid ].
*              la_outtab-sub_status     = la_cat_dis-cat_label.
              <fs_output>-sub_status = la_cat_dis-cat_label.
            ENDIF.
          ENDIF.
*          IF line_exists( lt_cat_dis[ cat_id = la_cpde_grp-kurztext ] ).
*            DATA(la_cat_dis) =  lt_cat_dis[ cat_id = la_cpde_grp-kurztext ].
*            <fs_output>-sub_status = la_cat_dis-cat_label.
*          ENDIF.

        ELSE.
          <fs_output>-remark = |Invalid status|.
          CONTINUE.
        ENDIF.

        TRANSLATE <fs_output>-sub_status TO UPPER CASE.
        CONDENSE <fs_output>-sub_status NO-GAPS.
        IF line_exists( lt_header[ object_id = <fs_output>-sr_request ] ).
          DATA(ls_head) = lt_header[ object_id = <fs_output>-sr_request ].
          IF line_exists( lt_dca[ bp_number = ls_head-sold_to_party ] ).
            DATA(ls_dca) = lt_dca[ bp_number = ls_head-sold_to_party  ].
            IF line_exists( lt_ever[ anlage = ls_dca-anlage ] ).
              <fs_output>-remark = |Move in already exists |.
              CONTINUE.
            ENDIF.
*            CONCATENATE ls_dca-reg_date_no+6(4) ls_dca-reg_date_no+3(2) ls_dca-reg_date_no+0(2) INTO lv_reg_date.
*            IF ls_dca-ga_code EQ 'CVK'.
*              IF line_exists( lt_grp_ca[ pngrb_ga_code = ls_dca-ga_code  pngrb_district = ls_dca-pngrb_dist ] ).
*                DATA(ls_ca_grp) = lt_grp_ca[ pngrb_ga_code = ls_dca-ga_code  pngrb_district = ls_dca-pngrb_dist ].
*                lv_new_conn->gs_gc_code = ls_ca_grp.
*              ENDIF.
*            ELSE.
*              IF line_exists( lt_grp_ca[ pngrb_ga_code = ls_dca-ga_code  ] ).
*                ls_ca_grp = lt_grp_ca[ pngrb_ga_code = ls_dca-ga_code  ].
*                lv_new_conn->gs_gc_code = ls_ca_grp.
*              ENDIF.
*            ENDIF.
            lv_new_conn->gt_cm_bp_data_c = ls_dca.

*            IF line_exists( lt_isu_mru[ ga_code = ls_dca-ga_code ] ).
*              DATA(ls_isu) = lt_isu_mru[ ga_code = ls_dca-ga_code ].
*            ENDIF.
*
*            IF line_exists( lt_scheme[ cust_cl = ls_dca-dma_scheme ] ).
*              DATA(la_scheme) = lt_scheme[ cust_cl = ls_dca-dma_scheme ].
*
*            ENDIF.

            IF line_exists( lt_sub[ object_id = <fs_output>-sr_request ] ).
              DATA(la_sub)       =  lt_sub[ object_id = <fs_output>-sr_request ].
              IF line_exists( lt_cat[ cat_id = la_sub-cat_id ] ).
                la_cat       =  lt_cat[ cat_id = la_sub-cat_id ].
                IF line_exists( lt_cat_dis[ cat_guid = la_cat-cat_guid ] ).
                  la_cat_dis   =  lt_cat_dis[ cat_guid = la_cat-cat_guid ].
                  la_outtab-sub_status     = la_cat_dis-cat_label.
                  DATA(la_cat_hi)       =  lt_cat_hi[ node_guid = la_cat-cat_guid ].
                  IF line_exists( lt_cat_dis[ cat_guid = la_cat_hi-pare_guid ] ).
                    DATA(la_cat_dis_pi)   =  lt_cat_dis[ cat_guid = la_cat_hi-pare_guid ].
                    la_outtab-status     =   la_cat_dis_pi-cat_label.
                    CONDENSE la_outtab-status NO-GAPS.
                    TRANSLATE la_outtab-status TO UPPER CASE.
                  ENDIF.
                ENDIF.
              ENDIF.
            ENDIF.
            IF   la_outtab-status EQ |TECHNICALFEASIBILITY|.
              CASE <fs_output>-sub_status .

                WHEN 'C2TF' .
                  lv_code         = |C3EP| . "|NF3D|.
                  iv_cat_id       = |C3EP| . "|AFT_SOM_TIME_6_DOM|.
                  lv_status       = |E0002|.
                  iv_status_prof  = |ZNCSTATU|.

                  mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.

                  IF lv_sucess IS NOT INITIAL.
                    <fs_output>-remark = TEXT-003.
                    <fs_output>-sub_status = 'Technically Feasible'.
                  ENDIF.


                WHEN 'C2TN' .
                  lv_code         = |C2TN| . "|NF3D|.
                  iv_cat_id       = |C2TN| . "|AFT_SOM_TIME_6_DOM|.
                  lv_status       = |E0006|.
                  iv_status_prof  = |ZNCSTATU|.

*                  mig_status ls_head-header_guid ls_cust_fields lv_status iv_status_prof lv_code iv_cat_id.
                  mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.

                  IF lv_sucess IS NOT INITIAL.
                    <fs_output>-remark = TEXT-003.
                    <fs_output>-sub_status = 'Technically Not Feasible'.
                  ENDIF.

                WHEN  OTHERS.
                  <fs_output>-remark = TEXT-006.
              ENDCASE.


            ELSEIF la_outtab-status EQ |COSTESTIMATION| .  "line_exists( lt_sub[ object_id = <fs_output>-sr_request  cat_id       = lc_cat_id_plum ] ).
              CASE <fs_output>-sub_status .
*

                WHEN 'C3NA'.
*               ***********                  Conncetion object create**********************************
                  IF ls_dca-vstelle IS INITIAL.
                    CALL METHOD lv_new_conn->create_premise_connection_c
                      EXPORTING
                        iv_partner = ls_dca-bp_number
                      IMPORTING
                        ev_premise = DATA(iv_premise).
                  ELSE.
                    iv_premise = ls_dca-vstelle.
                  ENDIF.
                  IF iv_premise IS NOT INITIAL .
                    IF ls_dca-anlage IS INITIAL.

                      DATA(ls_but000_p) = lt_but000[ partner = ls_dca-bp_number ].

*                      SELECT SINGLE mru INTO @DATA(lv_mru) FROM zagcl_networks
*                        WHERE bp_grouping = @ls_but000_p-bu_group AND
*                        bp_type  = @ls_dca-bp_kind AND
*                              ward_no = @ls_dca-ward_no.

                      CALL METHOD lv_new_conn->create_installation_c
                        EXPORTING
                          iv_premise     = iv_premise
                          iv_bp_grouping = ls_but000_p-bu_group
                          iv_bp_type     = ls_dca-bp_kind
                          iv_ward_no     = '1' "ls_dca-ward_no'
*                         iv_mru         = lv_mru
                        IMPORTING
                          ev_inst        = DATA(iv_inst).
                    ELSE.
                      iv_inst = ls_dca-anlage.
                    ENDIF.
                    IF iv_inst IS NOT INITIAL.
***********                  Connection object create********************************
****************                  SR staus change**********************************
                      lv_code =  |C4CP|. "|PM4D|.
                      iv_cat_id = |C4CP| . "|PLUMBING_METER_INSTALL_PENDING_4_DOM|.
                      lv_status       = |E0002|.
                      iv_status_prof  = |ZNCSTATU|.


                      mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.
*****************                  SR status change********************************
*---Begin of change -Siva-S4DK907687- 24-05-2023
                      IF lv_poinv_flag = abap_true AND lv_sucess IS NOT INITIAL.
                        DATA(lv_po_validity_msg_tf) = <fs_output>-remark.
                        CLEAR <fs_output>-remark.
                        CONCATENATE   TEXT-003 lv_po_validity_msg_tf INTO <fs_output>-remark SEPARATED BY space.
                      ELSEIF lv_sucess IS NOT INITIAL.
*                      IF lv_sucess IS NOT INITIAL.
*---End of change -Siva-S4DK907687- 24-05-2023
*                        <fs_output>-remark = TEXT-003.
                        CONCATENATE <fs_output>-remark  TEXT-003   ' with Instaltion no - '  iv_inst INTO <fs_output>-remark.
                        <fs_output>-sub_status = 'Customer agreed with cost estimation'.
                      ENDIF.
                    ELSE.
                      <fs_output>-remark = TEXT-005.
                    ENDIF.
                  ELSE.
                    <fs_output>-remark = TEXT-004.
                  ENDIF.

                WHEN 'C3NC' .
                  lv_code         = |C3NC| . "|NF3D|.
                  iv_cat_id       = |C3NC| . "|AFT_SOM_TIME_6_DOM|.
                  lv_status       = |E0006|.
                  iv_status_prof  = |ZNCSTATU|.

                  mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.

                  IF lv_sucess IS NOT INITIAL.
                    <fs_output>-remark = TEXT-003.
                    <fs_output>-sub_status = 'Customer not agreed with cost estimation'.
                  ENDIF.
*
*
                WHEN  OTHERS.
                  <fs_output>-remark = TEXT-006.
              ENDCASE.

            ELSEIF la_outtab-status EQ |COMMISSIONING|.  "line_exists( lt_sub[ object_id = <fs_output>-sr_request  cat_id       = lc_cat_id_plum ] ).
              CASE <fs_output>-sub_status .

                WHEN 'C4PT' .
                  lv_code         = |C4PT| . "|NF3D|.
                  iv_cat_id       = |C4PT| . "|AFT_SOM_TIME_6_DOM|.
                  lv_status       = |E0002|.
                  iv_status_prof  = |ZNCSTATU|.

                  mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.

                  IF lv_sucess IS NOT INITIAL.
                    <fs_output>-remark = TEXT-003.
                    <fs_output>-sub_status = 'Pressure test report done'.
                  ENDIF.



                WHEN 'C4MI'." OR 'METERINSTALLED(AREANOTCHARGED/AIRRFC)'.   " D4MI At CRM Level
                  IF line_exists( lt_t499s[ ktext = <fs_output>-dev_loc ] ).
                    DATA(la_t499s) = lt_t499s[ ktext = <fs_output>-dev_loc ].
                  ENDIF.
                  IF ls_dca-bp_kind IS INITIAL.
                    ls_dca-bp_kind =  |ZCOM|.
                  ENDIF.

                  IF line_exists( lt_evbs[ vstelle = ls_dca-vstelle ] ).
                    DATA(ls_evbs) = lt_evbs[ vstelle = ls_dca-vstelle ].
                    IF line_exists( lt_iflot[ tplma = ls_evbs-haus ] ).
                      DATA(ls_iflot) = lt_iflot[ tplma = ls_evbs-haus ].
                      IF line_exists( lt_egerh[ devloc = ls_iflot-tplnr ] ).
                        DATA(ls_egerh) = lt_egerh[ devloc = ls_iflot-tplnr ].
                        <fs_output>-remark = |Device already exists|.
                        CONTINUE.
                      ENDIF.
                    ENDIF.
                  ENDIF.

* Begin of to check 4 decimal digits
                  DATA: l_length_dig TYPE i.
                  DATA: lv_flag4   TYPE c,
                        lv_4digits TYPE c VALUE '4'.

                  DATA: lv_meteread  TYPE p LENGTH 10 DECIMALS 3,
                        lv_charfield TYPE cha_class_view-sollwert,
                        lv_digits    TYPE cha_class_data-stellen,
                        lv_char21    TYPE cha_class_data-sollwert,
                        lv_var1      TYPE char5,
                        lv_var2      TYPE char5,
                        l_length     TYPE char5.

                  CLEAR: lv_meteread ,
                         lv_flag4,
                         lv_charfield,
                         lv_4digits,
                         lv_digits   ,
                         lv_char21   ,
                         lv_var1     ,
                         lv_var2     .

                  SPLIT <fs_output>-e_zwstand AT '.' INTO lv_var1 lv_var2 .
                  l_length_dig = strlen(  lv_var2 ).
*                  CONDENSE l_length_dig.
                  IF l_length_dig GT 3.
                    <fs_output>-remark = 'Please Check the input Meter Reading'.
                    CONDENSE <fs_output>-remark.
                    CONTINUE.
                  ENDIF.

                  iv_meterread = <fs_output>-e_zwstand.
                  CLEAR: <fs_output>-e_zwstand.
                  <fs_output>-e_zwstand = iv_meterread.
                  CONDENSE <fs_output>-e_zwstand NO-GAPS.
*
                  <fs_output>-vol_corr_fa = '1.740000'.


                  CALL FUNCTION 'ZISU_DM_DEV_CREATE_INSTL'
                    EXPORTING
                      i_bpkind    = ls_dca-bp_kind
                      i_city2     = ls_dca-district "ls_dca-district
                      i_anlage    = ls_dca-anlage
                      i_matnr     = <fs_output>-matnr
                      i_msn       = <fs_output>-serge
                      i_datab     = <fs_output>-eadat           "valid_from
                      i_herst     = <fs_output>-herst
                      i_typbz     = <fs_output>-typbz
                      i_baujj     = <fs_output>-baujj
                      i_eadat     = <fs_output>-eadat
                      i_e_zwstand = <fs_output>-e_zwstand
                      i_pmloc     = la_t499s-stand
                      i_vcf       = <fs_output>-vol_corr_fa
                    TABLES
                      et_return   = lt_retune.

                  IF line_exists( lt_retune[ type = |E| ] ).  "gsp
                    DATA(la_remarks) = lt_retune[ type = |E| ] .
                    <fs_output>-remark = la_remarks-message.
                    CONTINUE.
                  ELSE.
                    IF line_exists( lt_retune[ type = |I| ] ).  "gsp
                      DATA(la_remarks1) = lt_retune[ type = |I| ] . "gsp
                      IF la_remarks1-message EQ |Entries for date and year are not consistent|.
                        <fs_output>-remark = 'Device installation failed due to invalid date'.
                        CLEAR la_remarks1.
                        CONTINUE.
                      ENDIF.
                    ENDIF.
*                    ENDIF.
                  ENDIF.
                  CLEAR : la_t499s.

                  IF line_exists( lt_retune[ type = |S| ] ).  "gsp
                    la_remarks1 = lt_retune[ type = |S| ] .
                    lv_code =  |C4MI|. "|PM4D|.
                    iv_cat_id = |C4MI| . "|PLUMBING_METER_INSTALL_PENDING_4_DOM|.
                    lv_status       = |E0002|.
                    iv_status_prof  = |ZNCSTATU|.
                    mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.

                    IF lv_sucess IS NOT INITIAL.

                      <fs_output>-remark = TEXT-003.
                      <fs_output>-sub_status = 'Meter Installation Done'.
                    ENDIF.
                  ENDIF.

                WHEN 'C4CM'.
                  IF line_exists( lt_fkkvk[ vkont = ls_dca-vkont ] ).
                    DATA(ls_fkkvk) = lt_fkkvk[ vkont = ls_dca-vkont ].
                    DATA(ls_fkkvkp) = lt_fkkvkp[ vkont = ls_dca-vkont ].
                    DATA(ls_but000) = lt_but000[ partner = ls_dca-bp_number ].
                  ENDIF.

                  lv_movininput-moveindate = <fs_output>-conv_date.
                  lv_movininput-partner    = <fs_output>-partner.
                  lv_movininput-partnergroup = ls_but000-bu_group .
                  lv_movininput-partnercategory = |1|.
                  lv_movininput-cont_acct       = ls_dca-vkont.
                  lv_movininput-acct_cat        = ls_fkkvk-vktyp.
                  APPEND INITIAL LINE TO lt_contractdata ASSIGNING FIELD-SYMBOL(<fs_contdata>).
                  <fs_contdata>-installation  = ls_dca-anlage.
                  <fs_contdata>-bus_area      = ls_fkkvkp-gsber.
                  <fs_contdata>-bupla         = ls_fkkvkp-bupla.
                  <fs_contdata>-joint_invoice         = '3'.
                  CONCATENATE 'Contract for BP' <fs_output>-partner INTO <fs_contdata>-contr_txt SEPARATED BY space.
                  APPEND INITIAL LINE TO lt_contractdatax ASSIGNING FIELD-SYMBOL(<fs_contdatax>).
                  <fs_contdatax>-installation  = abap_true.
                  <fs_contdatax>-bus_area      = abap_true.
                  <fs_contdatax>-bupla      = abap_true.
                  <fs_contdatax>-joint_invoice      = abap_true.


                  <fs_contdatax>-contr_txt  =  abap_true.

                  IF line_exists( lt_eablg[ anlage = ls_dca-anlage ] ).
                    DATA(ls_eablg) = lt_eablg[ anlage = ls_dca-anlage ]."and ( ablesgr = '21' ) ]." or ablesgr = '22' ) ].
*                     IF ls_eablg IS INITIAL.
*                        IF ls_eablg-ablesgr = '' OR
                    IF ls_eablg-ablesgr = '22'.
                      <fs_output>-remark = |Device is not installed, hence cannot perform Move-In|.
                      CONTINUE.
                    ENDIF.
                  ELSE.
                    <fs_output>-remark = |Device is not installed, hence cannot perform Move-In|.
                    CONTINUE.
                  ENDIF.



                  DATA: lv_move_read TYPE p LENGTH 10 DECIMALS 3.

*
                  SPLIT <fs_output>-move_read AT '.' INTO lv_var1 lv_var2 .
                  l_length_dig = strlen(  lv_var2 ).

                  IF l_length_dig GT 3.
                    <fs_output>-remark = 'Please Check the input Meter Reading'.
                    CONDENSE <fs_output>-remark.
                    CONTINUE.  ""
                  ENDIF.

                  lv_move_read = <fs_output>-move_read.
                  <fs_output>-move_read = lv_move_read.
                  CONDENSE <fs_output>-move_read NO-GAPS.

*                  ls_cust_fields-zz1_moveinread_srh = <fs_output>-move_read.

                  IF line_exists( lt_evbs[ vstelle = ls_dca-vstelle ] ).
                    ls_evbs = lt_evbs[ vstelle = ls_dca-vstelle ].
                    IF line_exists( lt_iflot[ tplma = ls_evbs-haus ] ).
                      ls_iflot = lt_iflot[ tplma = ls_evbs-haus ].
                      IF line_exists( lt_egerh[ devloc = ls_iflot-tplnr ] ).
                        ls_egerh = lt_egerh[ devloc = ls_iflot-tplnr ].
                        IF line_exists( lt_msn[ equnr = ls_egerh-equnr ] ).
                          DATA(ls_msn) = lt_msn[ equnr = ls_egerh-equnr ].
                          la_meterread-material    =     ls_msn-matnr.
                          la_meterread-serialno    =     ls_msn-equnr.
                          la_meterread-register    =     |001|.
                          la_meterread-mrreason    =     |06|.
                          la_meterread-actualmrdate =    <fs_output>-conv_date.
                          la_meterread-readingresult =   <fs_output>-move_read.
                          APPEND la_meterread TO lt_meterread.
                        ENDIF.
                      ENDIF.
                    ENDIF.
                  ENDIF.

                  CALL FUNCTION 'BAPI_ISUMOVEIN_CREATEFROMDATA'
                    EXPORTING
                      moveincreatecontroldata = lv_moveincndata
                      moveincreateinputdata   = lv_movininput
                    IMPORTING
                      moveindocnumber         = lv_movedoc
                    TABLES
                      treturn                 = lt_retune
                      tcontractdata           = lt_contractdata
                      tcontractdatax          = lt_contractdatax
                      tmeterreadingresults    = lt_meterread.

                  IF lv_movedoc IS NOT INITIAL.
                    <fs_output>-remark  = |Move in created|.
                    <fs_output>-sub_status = 'Commissioning Done'.
                    CALL METHOD lv_new_conn->change_conn_inst_change_com
                      EXPORTING
                        lv_anlage       = ls_dca-anlage
                        lv_move_in_date = lv_movininput-moveindate
                        lv_haus         = ls_dca-haus
                        iv_srm          = lv_floc.
                  ENDIF.
*
*
*****************                  SR staus change**********************************
                  lv_code = |C4CM|.
                  iv_cat_id = |C4CM|.
                  lv_status     = |E0006|.
                  iv_status_prof    = |ZNCSTATU|.

                  mig_status ls_head-header_guid  lv_status iv_status_prof lv_code iv_cat_id.

                WHEN  OTHERS.
                  <fs_output>-remark = TEXT-006.
              ENDCASE.

*            ELSE.

*                ENDIF.
            ELSE.
              <fs_output>-remark = |Check the input status|.
            ENDIF.

          ELSE.
            <fs_output>-remark = |Check the Partner|.
          ENDIF.
*        ELSE.
        ELSE.
          <fs_output>-remark = |Please check the SR Request|.
        ENDIF.

      ENDLOOP.
    ENDIF.

    g_sec = abap_true.

    PERFORM alv_gruid.
*    MESSAGE  TEXT-003 TYPE 'I'.
    LEAVE TO SCREEN 0.


  ENDIF.
*ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form alv_gruid
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM alv_gruid .

  DATA: ls_layout  TYPE slis_layout_alv,
        ls_variant TYPE disvariant.

*  ls_variant-variant  = |DEFAULT|.
  ls_layout-zebra = abap_true.
  ls_layout-colwidth_optimize = abap_true.

  REFRESH : gt_fieldcat.

  mig_fieldcat      1     lc_bp         lc_bp         .
  mig_fieldcat      2     lc_srreq      lc_srname     .
  mig_fieldcat      3     lc_datecre    lc_datename   .
  mig_fieldcat      4     lc_gc         lc_gc         .
  mig_fieldcat      5     lc_plant      lc_plannam   .
  mig_fieldcat      6     lc_dist      	lc_dist_name  .
  mig_fieldcat      7     lc_wa         lc_waname     .
  mig_fieldcat      8     lc_app        lc_appname  .
  mig_fieldcat      9     lc_status     lc_statnam  .
  mig_fieldcat     10     lc_substatus  lc_substanam  .
*  mig_fieldcat     11     lc_vendorn    lc_vennamen  .
  "mig_fieldcat     12     lc_venmanu    lc_venman  .
  "mig_fieldcat     13     lc_poman      lc_pomanname  .
  "mig_fieldcat     14     lc_vendor      lc_venname    .
  "mig_fieldcat     15     lc_po         lc_poname  .
*  mig_fieldcat     12     lc_vendor      lc_venman.
*  mig_fieldcat     13     lc_po         lc_pomanname.
*  mig_fieldcat     14     lc_venmanu    lc_venname.
*  mig_fieldcat     15     lc_poman      lc_poname.
  mig_fieldcat     11     lc_dev_lo     lc_devnam.
  mig_fieldcat     12     lc_matnr      lc_mtrnam     .
  mig_fieldcat     13     lc_baujj      lc_baujjnam   .
*  mig_fieldcat     19     lc_vfrom      lc_vfromnam   .
  mig_fieldcat     14     lc_herst      lc_herstnam   .
  mig_fieldcat     15     lc_typbz      lc_typbznam   .
  mig_fieldcat     16     lc_serge      lc_sergenam   .
  mig_fieldcat     17     lc_eadat      lc_eadatnam   .
  mig_fieldcat     18     lc_ezwstand   lc_ezwnam     .
*  mig_fieldcat     20     lc_mtloc      lc_mtlocnam     .
*  mig_fieldcat     24     lc_extpo      lc_extnam     .
*  mig_fieldcat     25     lc_extgipo    lc_extginam   .
*  mig_fieldcat     26     lc_extgipi    lc_extgpinam  .
  mig_fieldcat     19     lc_volcr      lc_volcrnam   .
*  mig_fieldcat     28     lc_tfno       lc_tfnam   .
  mig_fieldcat     20     lc_movein     lc_moveinnm  .
  mig_fieldcat     21     lc_moverd     lc_moverdnm  .
*  mig_fieldcat     31     lc_nobur       lc_noburnm .
*  mig_fieldcat     32     lc_rubtu       lc_rubtunm .
*  mig_fieldcat     33     lc_TFNOCO     lc_TFnamCONV  .
*  mig_fieldcat     34     lc_drstu       lc_drstunm .
*  mig_fieldcat     35     lc_drsno       lc_drsnounm.
*  mig_fieldcat     36     lc_loop       lc_loopnm .
*  mig_fieldcat     37     lc_srmno      lc_srmnonm  .
*  mig_fieldcat     38     lc_srmcap     lc_srmcapnm .
*  mig_fieldcat     39     lc_risiso     lc_risisonam   .
*  mig_fieldcat     40     lc_picon      lc_piconnam   .
*  mig_fieldcat     41     lc_isoinst    lc_picorinam   .
*  mig_fieldcat     42     lc_piconri    lc_isointnam   .
*  mig_fieldcat     43     lc_hopipe     lc_hopipenam   .
  IF g_sec IS NOT INITIAL.
    mig_fieldcat     22     lc_remark     lc_remarnam    .
  ENDIF.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program       = sy-repid
      i_callback_user_command  = 'USER_COMMAND'
      it_fieldcat              = gt_fieldcat
      is_layout                = ls_layout
      i_callback_pf_status_set = 'SET_PF_STATUS'
      i_save                   = 'A'
      is_variant               = ls_variant
    TABLES
      t_outtab                 = gt_outtab
    EXCEPTIONS
      program_error            = 1
      OTHERS                   = 2.

  IF sy-subrc EQ 0.
*    IF sy-subrc <> 0.
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*  ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form get_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM get_data .
  CONSTANTS : lc_cat_id TYPE crm_erms_cat_as_id VALUE 'C2FP',
              lc_i      TYPE char1 VALUE 'S',
              lc_bis    TYPE biszeitsch VALUE '99991231'.
  SELECT object_id , header_guid , posting_date , sold_to_party

    INTO TABLE @DATA(lt_obj) FROM crms4d_serv_h WHERE object_id     IN @s_tras
                                               AND    posting_date  IN @s_post
                                              AND process_type = 'ZNCC'.
*                                               AND   zz1_gacode_srh IN @s_ga
*                                               AND   zz1_pngrbgadistrictnam_srh IN @s_dist
*                                               AND   zz1_vendornumber_srh IN @s_ven
*                                               AND   zz1_ponumber_srh IN @s_po
  "AND   person_resp      IN @s_emp.
  IF lt_obj IS  INITIAL AND s_app IS NOT INITIAL.
    SELECT application_number, bp_kind , grid_code ,ward_no, district , bp_number ,vstelle ,vkont FROM zcm_bp_data_c INTO TABLE @DATA(lt_dca)
         WHERE application_number   IN @s_app AND grid_code IN @s_gcode.
    IF lt_dca IS NOT INITIAL.
      SELECT object_id , header_guid , posting_date , sold_to_party

  INTO TABLE @lt_obj FROM crms4d_serv_h WHERE object_id     IN @s_tras
                                             AND    posting_date  IN @s_post.
*                                             AND   zz1_gacode_srh IN @s_ga
*                                             AND   zz1_pngrbgadistrictnam_srh IN @s_dist
*                                             AND   zz1_vendornumber_srh IN @s_ven
*                                             AND   zz1_ponumber_srh IN @s_po
*                                             AND   person_resp      IN @s_emp.
    ENDIF.
  ENDIF.


  IF lt_obj IS NOT INITIAL.

    SELECT object_id , number_int , sort , codegruppe , code  , cat_id FROM crms4d_srv_subj INTO TABLE @DATA(lt_sub) FOR ALL ENTRIES IN
             @lt_obj WHERE object_id   = @lt_obj-object_id.
    DELETE lt_sub WHERE number_int NE |000000| .
    DELETE lt_sub WHERE   code IS INITIAL.
    SELECT application_number, bp_kind , grid_code ,ward_no, district , bp_number ,vstelle ,vkont FROM zcm_bp_data_c INTO TABLE @lt_dca FOR ALL ENTRIES IN  @lt_obj
           WHERE application_number IN @s_app AND  grid_code IN @s_gcode AND
                 bp_number   = @lt_obj-sold_to_party
       .

    IF lt_dca IS NOT INITIAL.
      SELECT anlage , vstelle FROM eanl INTO TABLE @DATA(lt_eanl)  FOR ALL ENTRIES IN @lt_dca WHERE vstelle = @lt_dca-vstelle.
*          if lt_ean,,l is NOT INITIAL.
      SELECT vstelle , haus  FROM evbs INTO  TABLE @DATA(lt_evbs) FOR ALL ENTRIES IN @lt_eanl WHERE vstelle = @lt_eanl-vstelle.

      SELECT tplnr , fltyp , tplma FROM iflot INTO TABLE @DATA(lt_iflot) FOR ALL ENTRIES IN @lt_evbs WHERE tplma EQ @lt_evbs-haus AND fltyp EQ @lc_i.
      IF lt_iflot IS NOT INITIAL.
        SELECT equnr , bis , einbdat , devloc , amcg_cap_grp FROM egerh INTO TABLE @DATA(lt_egerh) FOR ALL ENTRIES IN @lt_iflot WHERE bis = @lc_bis AND devloc = @lt_iflot-tplnr.
        SELECT tplnr , stort FROM iloa INTO TABLE @DATA(lt_iloa) FOR ALL ENTRIES IN @lt_iflot WHERE tplnr = @lt_iflot-tplnr.
        IF lt_iloa IS NOT INITIAL.
          SELECT stand, ktext FROM t499s INTO TABLE @DATA(lt_t499s) FOR ALL ENTRIES IN @lt_iloa WHERE stand =  @lt_iloa-stort.
        ENDIF.
        IF lt_egerh IS NOT INITIAL.
          SELECT equnr , matnr , baujj, herst, typbz, serge FROM equi INTO TABLE @DATA(lt_msn) FOR ALL ENTRIES IN @lt_egerh WHERE equnr = @lt_egerh-equnr.

        ENDIF.
      ENDIF.

*      SELECT vkont , vktyp FROM fkkvk INTO TABLE @DATA(lt_fkkvk) FOR ALL ENTRIES IN @lt_dca WHERE vkont = @lt_dca-vkont.




      SELECT bp_type , bp_grouping , plant , grid_code  FROM zcm_group_ca INTO TABLE @DATA(lt_plant) FOR ALL ENTRIES IN @lt_dca WHERE bp_type = @lt_dca-bp_kind.
*      IF lt_plant IS NOT INITIAL.
**        SELECT * FROM zdma_po_assign INTO TABLE @DATA(lt_po_assign) FOR ALL ENTRIES IN @lt_plant WHERE plant = @lt_plant-plant.
*
*        IF lt_po_assign IS NOT INITIAL.
*          SELECT lifnr , name1 FROM lfa1 INTO TABLE @DATA(lt_lfa1) FOR ALL ENTRIES IN   @lt_po_assign WHERE lifnr = @lt_po_assign-vendor.
*        ENDIF.
*      ENDIF.
*    ENDIF.
*    lt_plant
      SELECT * FROM crmc_erms_cat_ca INTO TABLE @DATA(lt_cat) .
      SELECT * FROM crmc_erms_cat_hi INTO TABLE @DATA(lt_cat_hi) .
      SELECT * FROM crmc_erms_cat_cd INTO TABLE @DATA(lt_cat_dis) .

    ENDIF.

    LOOP AT lt_obj ASSIGNING FIELD-SYMBOL(<fs_obj>).
*    TRY .c
*    CLEAR : la_address.
*    IF line_exists( lt_sub[ object_id = <fs_obj>-object_id  cat_id       = lc_CAT_ID ] )..
      IF line_exists( lt_dca[ bp_number   = <fs_obj>-sold_to_party  ] ).
        DATA(la_dca) = lt_dca[ bp_number   = <fs_obj>-sold_to_party ].
*        IF line_exists( lt_address[ addrnumber =  la_partner-addr_nr ] ).
*          DATA(la_address) = lt_address[ addrnumber =  la_partner-addr_nr ].
*        APPEND INITIAL LINE TO gt_outtab ASSIGNING FIELD-SYMBOL(la_outtab).

        IF line_exists( lt_sub[ object_id = <fs_obj>-object_id ] ).
          DATA(la_sub)       =  lt_sub[ object_id = <fs_obj>-object_id ].
          IF line_exists( lt_cat[ cat_id = la_sub-cat_id ] ).
            DATA(la_cat)       =  lt_cat[ cat_id = la_sub-cat_id ].
            IF line_exists( lt_cat_dis[ cat_guid = la_cat-cat_guid ] ).
              DATA(la_cat_dis)   =  lt_cat_dis[ cat_guid = la_cat-cat_guid ].
              la_outtab-sub_status     = la_cat_dis-cat_label.

*        DATA(la_sub)       =  lt_sub[ object_id = <fs_obj>-object_id ].
              DATA(la_cat_hi)       =  lt_cat_hi[ node_guid = la_cat-cat_guid ].
*          IF la_cat_hi-pare_guid IS NOT INITIAL.
              IF line_exists( lt_cat_dis[ cat_guid = la_cat_hi-pare_guid ] ).
                DATA(la_cat_dis_pi)   =  lt_cat_dis[ cat_guid = la_cat_hi-pare_guid ].
                la_outtab-status     =   la_cat_dis_pi-cat_label.
*              CASE la_outtab-status .
*              	WHEN 'Assign to Contractor'.
*              	WHEN .
*              	WHEN OTHERS.
*              ENDCASE.
*              WHEN la_outtab-status .


              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.

        IF la_outtab-status EQ |Technical Feasibility| OR la_outtab-status EQ |Cost Estimation| OR
                  la_outtab-status EQ |Commissioning|." OR   la_outtab-status EQ |Ready For Conversion/Gas in|.
          IF la_outtab-sub_status EQ |C4CM|.
            CLEAR : la_cat_dis_pi,la_cat,la_sub,la_cat_dis,la_outtab,la_dca.
            CONTINUE.
          ENDIF.

        ELSE.
          CONTINUE.
          CLEAR : la_cat_dis_pi,la_cat,la_sub,la_cat_dis,la_outtab,la_dca.
        ENDIF.

*      IF la_dca-ga_code EQ 'CVK'.
*        IF line_exists( lt_plant[ pngrb_ga_code  = la_dca-ga_code pngrb_district = la_dca-pngrb_dist ] ).
*          DATA(la_plant) = lt_plant[ pngrb_ga_code = la_dca-ga_code pngrb_district = la_dca-pngrb_dist ].
*          la_outtab-plant = la_plant-plant.
*        ENDIF.

*      ELSE.
*        IF line_exists( lt_plant[ pngrb_ga_code  = la_dca-ga_code ] ).
*          la_plant = lt_plant[ pngrb_ga_code = la_dca-ga_code ].
*          la_outtab-plant = la_plant-plant.
*        ENDIF.
*      ENDIF.

        CLEAR : la_cat_dis_pi,la_cat,la_sub,la_cat_dis.
*      IF <fs_obj>-zz1_ponumber_srh IS NOT INITIAL AND <fs_obj>-zz1_vendornumber_srh IS NOT INITIAL.
**        la_outtab-PO_manual            = <fs_obj>-zz1_ponumber_srh.
**        la_outtab-ven_manu       = <fs_obj>-zz1_vendornumber_srh.
*
*      ELSE.
*        LOOP AT lt_po_assign ASSIGNING FIELD-SYMBOL(<fs_po_assign>) WHERE plant = la_outtab-plant.
*          IF sy-datum BETWEEN <fs_po_assign>-from_date AND <fs_po_assign>-to_date.
*            la_outtab-ven_manu    = <fs_po_assign>-vendor.
*            la_outtab-po_manual   = <fs_po_assign>-po.
*            EXIT.
*          ENDIF.
*
*        ENDLOOP.
*      ENDIF.
*      IF la_outtab-po_manual IS NOT INITIAL AND <fs_obj>-zz1_ponumber_srh IS INITIAL.
*        IF line_exists( lt_lfa1[ lifnr = la_outtab-ven_manu ] ).
*          DATA(la_lfa1) = lt_lfa1[ lifnr = la_outtab-ven_manu ].
*          la_outtab-vrn_name = la_lfa1-name1.
*        ENDIF.
*      ELSE.
*        IF line_exists( lt_lfa1[ lifnr = <fs_obj>-zz1_vendornumber_srh ] ).
*          la_lfa1 = lt_lfa1[ lifnr = <fs_obj>-zz1_vendornumber_srh ].
*          la_outtab-vrn_name = la_lfa1-name1.
*        ENDIF.
*      ENDIF.
*
**      IF la_outtab- IS NOT INITIAL.
*
*
**      IF line_exists( lt_fkkvk[ vkont = ls_dca-vkont ] ).
**      DATA(ls_fkkvk) = lt_fkkvk[ vkont = ls_dca-vkont ].
**      ENDIF.


        la_outtab-sr_request    = <fs_obj>-object_id.
        la_outtab-partner       = <fs_obj>-sold_to_party.
        la_outtab-date_cre      = <fs_obj>-posting_date.
        la_outtab-grid_code     = la_dca-grid_code.
        la_outtab-plant         = '2100'.
        la_outtab-dist          = la_dca-district.
        la_outtab-ward            = la_dca-ward_no.
        la_outtab-app_no        = la_dca-application_number.


*      IF <fs_obj>-zz1_vendornumber_srh IS INITIAL .
*      la_outtab-vendor        = <fs_obj>-zz1_vendornumber_srh.
*      la_outtab-po            = <fs_obj>-zz1_ponumber_srh.
**      ENDIF.
*      la_outtab-tf_no         = <fs_obj>-zz1_tfnumber_srh.
*      la_outtab-no_burner     = <fs_obj>-zz1_noofburners_srh.
*      la_outtab-riser_iso     = <fs_obj>-zz1_isolationvalveinst_srh.
*      la_outtab-extra_po      = <fs_obj>-zz1_extrakitchenpoint_srh.
*      la_outtab-extra_gi_po   = <fs_obj>-zz1_geyserpoint_srh.
*      la_outtab-extra_gi_pi   = <fs_obj>-zz1_geyserpoint_srh.         " needed to check
*      la_outtab-pipe_conn     = <fs_obj>-zz1_pipeconnectedfromm_srh.
*      la_outtab-pipe_conn_ri  = <fs_obj>-zz1_pipeconnectedfromm_srh . "zz1_pepipelength_srh.
*      la_outtab-iso_inst      = <fs_obj>-zz1_isolationvalveinst_srh . "zz1_riserisolvalveinst_srh.
*      la_outtab-house_pipe    = <fs_obj>-zz1_hosepipeinstalled_srh.
*      la_outtab-rubb_date     = <fs_obj>-zz1_rubbertubeexpiryda_srh.

*        CLEAR : la_sub,
*        DATA(la_cat_dis)   =  lt_cat_dis[ CAT_ID = la_sub-cat_id ].
*      la_outtab-status     = |Ready For Conversion/Gas in|.
*      la_outtab-sub_status = |Gas in/Conversion Pending|.
*        CLEAR : la_cat_dis_pi,la_cat,la_sub,la_cat_dis.

        IF line_exists( lt_evbs[ vstelle = la_dca-vstelle ] ).
          DATA(ls_evbs) = lt_evbs[ vstelle = la_dca-vstelle ].


          IF line_exists( lt_iflot[ tplma = ls_evbs-haus ] ).
            DATA(ls_iflot) = lt_iflot[ tplma = ls_evbs-haus ].
            IF line_exists( lt_egerh[ devloc = ls_iflot-tplnr ] ).
              DATA(ls_egerh) = lt_egerh[ devloc = ls_iflot-tplnr ].
              IF line_exists( lt_msn[ equnr = ls_egerh-equnr ] ).
                DATA(ls_msn) = lt_msn[ equnr = ls_egerh-equnr ].
                la_outtab-matnr       =     ls_msn-matnr.
                la_outtab-serge       =     ls_msn-serge.
                la_outtab-baujj       =     ls_msn-baujj.
                la_outtab-herst       =     ls_msn-herst.
                la_outtab-typbz       =     ls_msn-typbz.
                la_outtab-eadat       =     ls_egerh-einbdat.
                la_outtab-vol_corr_fa =     |1.00|.

                IF line_exists( lt_iloa[ tplnr = ls_iflot-tplnr ] ).
                  DATA(la_iloa) = lt_iloa[ tplnr = ls_iflot-tplnr ].
                  IF line_exists( lt_t499s[ stand = la_iloa-stort ] ).
                    DATA(la_t499s) = lt_t499s[ stand = la_iloa-stort ].
                  ENDIF.
                  la_outtab-dev_loc = la_t499s-ktext.
                ENDIF.
*                        la_outtab-actualmrdate =    <fs_outtab>-move_dt.
*                        la_outtab-readingresult =   <fs_outtab>-move_read.
*                        APPEND la_meterread TO lt_meterread.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.

        IF la_outtab-move_read IS INITIAL.
          la_outtab-move_read = '0.000'.
        ENDIF.

        IF la_outtab-e_zwstand IS INITIAL.
          la_outtab-e_zwstand = '0.000'.
        ENDIF.
        CONDENSE: la_outtab-e_zwstand,
                  la_outtab-move_read.

        APPEND la_outtab TO gt_outtab.
        CLEAR : la_outtab.
*        ENDIF.
      ENDIF.
*    ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.

FORM set_pf_status USING rt_extab TYPE slis_t_extab.
  SET PF-STATUS 'STATUS_MAIN'.
ENDFORM.
*siva 22/06/2022
*----------------------------------------------------------*
*       FORM USER_COMMAND                                  *
*----------------------------------------------------------*
*       --> R_UCOMM                                        *
*       --> RS_SELFIELD                                    *
*----------------------------------------------------------*
FORM user_command USING r_ucomm LIKE sy-ucomm
                  rs_selfield TYPE slis_selfield.
* Check function code
  DATA ref1 TYPE REF TO cl_gui_alv_grid.
  DATA sytabix TYPE sy-tabix.
*--call
  IF p_gc IS NOT INITIAL.
    CASE r_ucomm.

      WHEN  'SAVE'.
        IF p_gc IS NOT INITIAL.
          PERFORM update_sr.
        ELSE.
          LEAVE TO SCREEN 0..
        ENDIF.

    ENDCASE.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form get_file_data_excel
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM get_file_data_excel .

  DATA:lr_data TYPE REF TO data,
       wa_data TYPE ty_fica_data,
       lv_int  TYPE i,
       lv_val  TYPE string.


  DATA: lv_meteread  TYPE p LENGTH 10 DECIMALS 3,
        lv_charfield TYPE cha_class_view-sollwert,
        lv_digits    TYPE cha_class_data-stellen,
        lv_char21    TYPE cha_class_data-sollwert,     "string.
        lv_var1      TYPE char5,
        lv_var2      TYPE char5,
        l_length     TYPE char5.

  CONSTANTS: lv_pointer TYPE i VALUE 42.
  FIELD-SYMBOLS:<lt_data> TYPE STANDARD TABLE..
  lr_data = NEW zcl_utility_excel( )->readexcelfile( v_file = CONV string( p_gc ) ).
  ASSIGN lr_data->* TO <lt_data>.

  DATA lv_exp TYPE p DECIMALS 3.

  LOOP AT <lt_data> ASSIGNING FIELD-SYMBOL(<wa_data>).

    IF sy-tabix = 1.
      CONTINUE.
    ENDIF.
    DO lv_pointer TIMES.
      ASSIGN COMPONENT sy-index OF STRUCTURE <wa_data> TO FIELD-SYMBOL(<wa_xl_data>).
      ASSIGN COMPONENT sy-index OF STRUCTURE wa_data TO FIELD-SYMBOL(<wa_tab_data>).
      IF <wa_xl_data> IS ASSIGNED AND <wa_xl_data> IS NOT INITIAL AND <wa_tab_data> IS ASSIGNED.
        CASE sy-index.
          WHEN 003.
            CLEAR : lv_int.
            lv_val = <wa_xl_data>+0(4).
            CALL FUNCTION 'CONVERT_STRING_TO_INTEGER'
              EXPORTING
                p_string      = lv_val
              IMPORTING
                p_int         = lv_int
              EXCEPTIONS
                overflow      = 1
                invalid_chars = 2
                OTHERS        = 3.
            IF sy-subrc <> 0.
* Implement suitable error handling here

              CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data> .
              <wa_tab_data> = <wa_xl_data>.

            ELSE .

              CONCATENATE <wa_xl_data>+0(4) <wa_xl_data>+5(2) <wa_xl_data>+8(2)   INTO  <wa_xl_data> .
              <wa_tab_data> = <wa_xl_data>.

            ENDIF.
*            CONCATENATE <wa_xl_data>+0(4) <wa_xl_data>+5(2) <wa_xl_data>+8(2) INTO  <wa_xl_data>.
*            <wa_tab_data> = <wa_xl_data>.
*          WHEN 012. " Titlte
*            REPLACE ALL OCCURRENCES OF REGEX '[^\d]' IN <wa_xl_data> WITH ''.
*            <wa_tab_data> = <wa_xl_data>.
*
*          WHEN 013. " Titlte
*            REPLACE ALL OCCURRENCES OF REGEX '[^\d]' IN <wa_xl_data> WITH ''.
*            <wa_tab_data> = <wa_xl_data>.
*
*          WHEN 014. " Titlte
*            REPLACE ALL OCCURRENCES OF REGEX '[^\d]' IN <wa_xl_data> WITH ''.
*            <wa_tab_data> = <wa_xl_data>.
*
*          WHEN 015. " Titlte
*            REPLACE ALL OCCURRENCES OF REGEX '[^\d]' IN <wa_xl_data> WITH ''.
*            <wa_tab_data> = <wa_xl_data>.
*
*
          WHEN '017' OR '020'.

            CLEAR : lv_int.
            lv_val = <wa_xl_data>+0(4).
            CALL FUNCTION 'CONVERT_STRING_TO_INTEGER'
              EXPORTING
                p_string      = lv_val
              IMPORTING
                p_int         = lv_int
              EXCEPTIONS
                overflow      = 1
                invalid_chars = 2
                OTHERS        = 3.
            IF sy-subrc <> 0.
* Implement suitable error handling here

              CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data> .
              <wa_tab_data> = <wa_xl_data>.

            ELSE .

              CONCATENATE <wa_xl_data>+0(4) <wa_xl_data>+5(2) <wa_xl_data>+8(2)   INTO  <wa_xl_data> .
              <wa_tab_data> = <wa_xl_data>.

            ENDIF.
*
*            CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data>.
*            <wa_tab_data> = <wa_xl_data>.
          WHEN 018 ."OR 021.

            IF <wa_xl_data> CA 'E'.
              DATA(lv_flag) = abap_true.
            ENDIF.

*            DATA: gv_spl(20) TYPE c VALUE 'E-'.
*            REPLACE ALL OCCURENCES OF gv_spl IN <wa_xl_data> WITH ''.
            CONDENSE <wa_xl_data> NO-GAPS.
            lv_digits = 3.
            IF lv_flag = abap_true.
              lv_char21 = <wa_xl_data>.
              CALL FUNCTION 'QSS0_FLTP_TO_CHAR_CONVERSION'
                EXPORTING
                  i_number_of_digits       = lv_digits
                  i_fltp_value             = lv_char21    "<wa_xl_data>
                  i_value_not_initial_flag = 'X'
                  i_screen_fieldlength     = 16
                IMPORTING
                  e_char_field             = lv_charfield.
*            CONDENSE lv_charfield.
              <wa_tab_data> = lv_charfield.
              CONDENSE <wa_tab_data>.
            ELSE.   " For more than 3 decimal digits, the value should be displayed with 0.000

****              SPLIT <wa_xl_data> AT '.' INTO lv_var1 lv_var2 .
****              l_length = strlen( lv_var2 ).
****              CONDENSE l_length.
****              IF l_length GT lv_digits.
****
****                <wa_tab_data> = '0.000'.
****                CONDENSE <wa_tab_data>.
****              ELSE.
****
              <wa_tab_data> = <wa_xl_data>.
              CONDENSE <wa_tab_data>.
****            ENDIF.
            ENDIF.

            CLEAR: lv_flag, lv_char21, lv_charfield, l_length.

          WHEN 020.
            CLEAR : lv_int.
            lv_val = <wa_xl_data>+0(4).
            CALL FUNCTION 'CONVERT_STRING_TO_INTEGER'
              EXPORTING
                p_string      = lv_val
              IMPORTING
                p_int         = lv_int
              EXCEPTIONS
                overflow      = 1
                invalid_chars = 2
                OTHERS        = 3.
            IF sy-subrc <> 0.
* Implement suitable error handling here

              CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data> .
              <wa_tab_data> = <wa_xl_data>.

            ELSE .

              CONCATENATE <wa_xl_data>+0(4) <wa_xl_data>+5(2) <wa_xl_data>+8(2)   INTO  <wa_xl_data> .
              <wa_tab_data> = <wa_xl_data>.

            ENDIF.
*            CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data>.
*            <wa_tab_data> = <wa_xl_data>.

*          WHEN 032.
*            CLEAR : lv_int.
*            lv_val = <wa_xl_data>+0(4).
*            CALL FUNCTION 'CONVERT_STRING_TO_INTEGER'
*              EXPORTING
*                p_string      = lv_val
*              IMPORTING
*                p_int         = lv_int
*              EXCEPTIONS
*                overflow      = 1
*                invalid_chars = 2
*                OTHERS        = 3.
*            IF sy-subrc <> 0.
** Implement suitable error handling here
*
*              CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data> .
*              <wa_tab_data> = <wa_xl_data>.
*
*            ELSE .
*
*              CONCATENATE <wa_xl_data>+8(2) <wa_xl_data>+5(2) <wa_xl_data>+0(4) INTO  <wa_xl_data>.
*              <wa_tab_data> = <wa_xl_data>.
*
*            ENDIF.
**            CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data>.
**            <wa_tab_data> = <wa_xl_data>.
*
          WHEN OTHERS.
            <wa_tab_data> = <wa_xl_data>.
        ENDCASE.
      ENDIF.
    ENDDO.
    " Registration date no and KYC Date should be mapped
    wa_data-conv_date = wa_data-move_dt.
    APPEND INITIAL LINE TO gt_outtab ASSIGNING FIELD-SYMBOL(<fs_fica_data>).
    MOVE-CORRESPONDING wa_data TO <fs_fica_data>.
*    IF <fs_dma_data>-application_number IS NOT INITIAL.
*      <fs_dma_data>-created_date = sy-datum.
*    ELSE.
**      APPEND INITIAL LINE TO gt_final ASSIGNING <fs_final>.
**      <fs_final>-app_num = lv_bp.
**      <fs_final>-er_mss  = |Duplicate Application number|.
**      CLEAR : lv_bp.
*    ENDIF.
    CLEAR wa_data.
  ENDLOOP.
*  SORT gt_dma_data  BY application_number.
*  DELETE ADJACENT DUPLICATES FROM gt_dma_data COMPARING application_number.
*  DELETE gt_dma_data WHERE created_date IS INITIAL.

ENDFORM.

********************************************************************************************************************

5th block
ZISU_CM_I_UP
ZISU_CM_I_CUSTOMER_UPLOAD

********************************************************************************************************************
*&---------------------------------------------------------------------*
*& Report ZISU_CM_CI_CUSTOMER_UPLOAD
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zisu_cm_i_customer_upload.

TYPE-POOLS: slis.
*TABLES : crms4d_serv_h.
RANGES r_date FOR sy-datum.
DATA : lv         TYPE c LENGTH 3,
       l_filename TYPE string.
DATA : gt_dma_data    TYPE TABLE OF zcm_bp_data_i,
*       gt_dma_data1 TYPE TABLE OF zcm_s_dma_data_ins,
       la_dma_data    TYPE  zcm_bp_data_i,
       ls_cm_group_ca TYPE zcm_group_ca.

TYPES: BEGIN OF ty_final,
         app_num   TYPE bu_bpext,
         bp_number TYPE bu_partner,
         sr_number TYPE crmt_object_id_db,
         con_acc   TYPE vkont_kk,
         er_mss    TYPE string,
       END OF ty_final.

DATA : gt_final    TYPE TABLE OF ty_final.
DATA: gt_fieldcat TYPE slis_t_fieldcat_alv,
      lw_fieldcat TYPE slis_fieldcat_alv.

DATA:
  lv_rc          TYPE  i,
  lv_user_action TYPE  i,
  lt_file_table  TYPE  filetable,
  ls_file_table  LIKE LINE OF lt_file_table.
*DATA : lv_FILENAME_1 TYPE string.

SELECTION-SCREEN BEGIN OF BLOCK 0001 WITH FRAME TITLE TEXT-001.
  SELECTION-SCREEN BEGIN OF BLOCK 0002 WITH FRAME TITLE TEXT-002.
    PARAMETERS : p_bp   TYPE rlgrap-filename MODIF ID m2 . "OBLIGATORY.  " FOR spfli-carrid MODIF ID m1,
  SELECTION-SCREEN END OF BLOCK 0002.
SELECTION-SCREEN END OF BLOCK 0001.

INITIALIZATION.
  SET PF-STATUS 'STATUS_MAIN'.

AT SELECTION-SCREEN.
  "Provide the functionality to download Excel Template
  CASE sy-ucomm.
    WHEN 'CUSTTEMP'.
      PERFORM download_cust_template.
  ENDCASE.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_bp.
*----------------------------------------------------------------------*


  cl_gui_frontend_services=>file_open_dialog(
      EXPORTING
        window_title        = 'Customer File'
        multiselection      = ''
        default_extension   = '*.xlsx'
        file_filter         = 'Text file (*.xlsx)|*.xlsx|All (*.*)|*.*'
      CHANGING
        file_table          = lt_file_table
        rc                  = lv_rc
        user_action         = lv_user_action
      EXCEPTIONS
        OTHERS              = 1 ).
  IF sy-subrc = 0.
    IF lv_user_action = cl_gui_frontend_services=>action_ok.
      IF lt_file_table IS NOT INITIAL.
        READ TABLE lt_file_table INTO ls_file_table INDEX 1.
        IF sy-subrc = 0.
          l_filename = ls_file_table-filename.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.



*  ***
  p_bp = l_filename.


START-OF-SELECTION.

  DEFINE mig_fieldcat.
    CLEAR  lw_fieldcat.
           lw_fieldcat-col_pos      = &1.
           lw_fieldcat-fieldname    = &2.
           lw_fieldcat-seltext_l    = &3.
           lw_fieldcat-outputlen    = 500.
           APPEND lw_fieldcat TO gt_fieldcat.

  END-OF-DEFINITION.

  IF p_bp IS NOT INITIAL.

    PERFORM get_file_data_bp_excel.
    PERFORM create_bp.
  ENDIF.
  IF gt_final IS NOT INITIAL.
    PERFORM alv_dispaly.
  ENDIF.
*&---------------------------------------------------------------------*
*& Form Get_file_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM get_file_data_bp .

  DATA : it_excel_data TYPE TABLE OF alsmex_tabline,
         lv_row_count  TYPE i,
         ls_file_data  TYPE zcm_bp_data_i,
         lv_bp         TYPE bu_partner,
         lv_mandt      TYPE char100.

  DATA : lv_bp_cat  TYPE  bu_type,
         lv_bp_role TYPE  partner_role.
  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
    EXPORTING
      filename                = p_bp
      i_begin_col             = 1
      i_begin_row             = 2
      i_end_col               = 200
      i_end_row               = 9999
    TABLES
      intern                  = it_excel_data
    EXCEPTIONS
      inconsistent_parameters = 1
      upload_ole              = 2
      OTHERS                  = 3.
  IF sy-subrc <> 0.

  ENDIF.


*Populate data to internal tables and structures

  SORT it_excel_data BY row col.
  lv_row_count =  |001|.
  DESCRIBE TABLE it_excel_data LINES DATA(lv_line).


  LOOP AT it_excel_data ASSIGNING FIELD-SYMBOL(<fs_excel_data>).
    IF lv_row_count NE <fs_excel_data>-row.
      IF ls_file_data-application_number IS NOT INITIAL.
        ls_file_data-created_date = sy-datum.
        APPEND  ls_file_data TO gt_dma_data.
      ELSE.
*          ELSE.
        APPEND INITIAL LINE TO gt_final ASSIGNING FIELD-SYMBOL(<fs_final>).
        <fs_final>-app_num = lv_bp.
        <fs_final>-er_mss  = |Duplicate Application number|.
        CLEAR : lv_bp.
        CLEAR : ls_file_data.
      ENDIF.
      lv_row_count = <fs_excel_data>-row.
      CLEAR ls_file_data.
    ENDIF.
    CASE <fs_excel_data>-col.
*      WHEN 004.

      WHEN 001.

        ls_file_data-application_number         = <fs_excel_data>-value.
        TRANSLATE ls_file_data-application_number TO UPPER CASE.
*
      WHEN 002.
*        ls_file_data-bp_kind                  =  <fs_excel_data>-value.
      WHEN 003.
*        ls_file_data-house_hold                 = <fs_excel_data>-value.
        DATA : lv_ptype TYPE char4.
        lv_ptype = <fs_excel_data>-value.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lv_ptype
          IMPORTING
            output = lv_ptype.
        ls_file_data-house_hold                 = lv_ptype.
      WHEN 004.
        ls_file_data-mobile_no                  = <fs_excel_data>-value.
      WHEN 005.
        CONCATENATE <fs_excel_data>-value '.' INTO <fs_excel_data>-value.
        ls_file_data-title                      = <fs_excel_data>-value.
      WHEN 006.
        ls_file_data-name_org1                 = <fs_excel_data>-value.
      WHEN 007.
        ls_file_data-name_org2                = <fs_excel_data>-value.
      WHEN 008.
        ls_file_data-legal_org                  = <fs_excel_data>-value.
      WHEN 009.
        ls_file_data-auth_first_name                  = <fs_excel_data>-value.
      WHEN 010.
        ls_file_data-auth_middle_name                  = <fs_excel_data>-value.
      WHEN 011.
        ls_file_data-auth_last_name                  = <fs_excel_data>-value.
      WHEN 012.
        ls_file_data-grid_code                   = <fs_excel_data>-value.
      WHEN 013.
        ls_file_data-ward_no                    = <fs_excel_data>-value.
      WHEN 014.
        ls_file_data-street_area                 = <fs_excel_data>-value.
      WHEN 015.
        ls_file_data-land_mark                    = <fs_excel_data>-value.
      WHEN 016.
        ls_file_data-district                    = <fs_excel_data>-value.      "landmark
      WHEN 017.
        ls_file_data-postal_code                = <fs_excel_data>-value.
      WHEN 018.
        ls_file_data-grid_name                    = <fs_excel_data>-value.
      WHEN 019.
        ls_file_data-state                   = <fs_excel_data>-value.
      WHEN 020.
        ls_file_data-mobile_alternate           = <fs_excel_data>-value.
      WHEN 021.
        ls_file_data-email_address                   = <fs_excel_data>-value.
      WHEN 022.
        ls_file_data-photo_identity_proof                = <fs_excel_data>-value.
      WHEN 023.
        ls_file_data-photo_id_no                = <fs_excel_data>-value.
      WHEN 024.
        ls_file_data-address_proof          = <fs_excel_data>-value.
      WHEN 025.
        ls_file_data-address_proof_id_no          = <fs_excel_data>-value.
      WHEN 026.
        ls_file_data-ownership_proof                = <fs_excel_data>-value.
      WHEN 027.
        ls_file_data-ownership_proof_id_no                = <fs_excel_data>-value.
      WHEN 028.
        ls_file_data-noghch          = <fs_excel_data>-value.
      WHEN 029.
        ls_file_data-nomdcapm          = <fs_excel_data>-value.
      WHEN 030.
        ls_file_data-nomdcnapm1          = <fs_excel_data>-value.
      WHEN 031.
        ls_file_data-nomdcnapm2          = <fs_excel_data>-value.
      WHEN 032.
        ls_file_data-nopremdch          = <fs_excel_data>-value.
      WHEN 033.
        ls_file_data-notcsch          = <fs_excel_data>-value.
      WHEN 034.
        ls_file_data-notext          = <fs_excel_data>-value.
      WHEN 035.
        ls_file_data-nodistri          = <fs_excel_data>-value.
*      WHEN 036.
*        ls_file_data-bank_name          = <fs_excel_data>-value.
*      WHEN 037.
*        ls_file_data-pay_date          = <fs_excel_data>-value.
*      WHEN 038.
*        ls_file_data-branch_name          = <fs_excel_data>-value.
*      WHEN 039.
*        ls_file_data-trans_type          = <fs_excel_data>-value.
*      WHEN 040.
*        ls_file_data-ref_id          = <fs_excel_data>-value.
*      WHEN 041.
*        ls_file_data-paid_upamt         = <fs_excel_data>-value.
*      WHEN 042.
*        ls_file_data-bank_cle_gl         = <fs_excel_data>-value.
*      WHEN 043.
*        ls_file_data-house_bank          = <fs_excel_data>-value.
*      WHEN 044.
*        ls_file_data-acc_id          = <fs_excel_data>-value.
    ENDCASE.

    IF sy-tabix EQ lv_line.
      IF ls_file_data-application_number IS NOT INITIAL.
        ls_file_data-created_date = sy-datum.
        APPEND  ls_file_data TO gt_dma_data.
      ELSE.
        APPEND INITIAL LINE TO gt_final ASSIGNING <fs_final>.
        <fs_final>-app_num = lv_bp.
        <fs_final>-er_mss  = |Duplicate Application number|.
        CLEAR : lv_bp.
      ENDIF.
    ENDIF.
  ENDLOOP.
  SORT gt_dma_data  BY application_number.
  DELETE ADJACENT DUPLICATES FROM gt_dma_data COMPARING application_number.
*  MODIFY ZCM_CI_BP_DATA FROM TABLE gt_dma_data.
*  COMMIT WORK AND WAIT.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form create_bp
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM create_bp .

  DATA : lv_new_conn  TYPE REF TO zcl_cm_utility,
         lv_posting   TYPE REF TO zcl_fica_scheme_postings,
         lv_bp        TYPE bu_partner,
         lv_sr_no     TYPE crmt_object_id_db,
         l_number     TYPE ad_pagnmbr,
         lv_cont      TYPE vkont_kk,
         lv_cont_flag TYPE char1,
         iv_fica      TYPE char1,
*         lv_cust_fields TYPE zcs_adp_cust_fields,
         lv_reg_date  TYPE datum,
         lv_total     TYPE zde_tot_amnt_nonup.
  DATA : ls_return TYPE  bapiret2.

*  SELECT * FROM zscheme_sd_ip1 INTO TABLE @DATA(lt_scheme) .
  SELECT * FROM zcm_group_ca INTO TABLE @DATA(lt_gc_ca) FOR ALL ENTRIES IN @gt_dma_data WHERE bp_type = @gt_dma_data-bp_kind.
  IF gt_dma_data IS NOT INITIAL.

    SELECT  application_number , bp_number , vkont , sr_number FROM zcm_bp_data_i INTO TABLE @DATA(lt_dma) FOR ALL ENTRIES IN
            @gt_dma_data WHERE application_number = @gt_dma_data-application_number.
  ENDIF.
  CREATE OBJECT lv_new_conn.
*  CREATE OBJECT lv_posting.

*SORT
  DATA(lv_rows) = lines( gt_dma_data ).
  LOOP AT gt_dma_data ASSIGNING FIELD-SYMBOL(<fs_bp_data>).
*    BREAK-POINT.

    CLEAR : lv_bp,lv_sr_no,lv_cont,iv_fica.

    APPEND INITIAL LINE TO gt_final ASSIGNING FIELD-SYMBOL(<fs_final>).

    lv_new_conn->gt_cm_bp_data_i = <fs_bp_data>.
    READ TABLE lt_gc_ca INTO ls_cm_group_ca WITH KEY grid_code = <fs_bp_data>-grid_code.
    lv_new_conn->gt_cm_ca_data = ls_cm_group_ca.

    IF line_exists( lt_dma[ application_number = <fs_bp_data>-application_number ] ).
      DATA(la_dma) = lt_dma[ application_number = <fs_bp_data>-application_number ].
      IF la_dma-bp_number IS NOT INITIAL AND la_dma-vkont IS NOT INITIAL.
        <fs_final>-bp_number = la_dma-bp_number.
        <fs_final>-app_num      = <fs_bp_data>-application_number.
        <fs_final>-sr_number    = la_dma-sr_number.
        <fs_final>-con_acc      = la_dma-bp_number.
        <fs_final>-er_mss       = |Duplicate Application number|.
        CLEAR : la_dma.
        CONTINUE.
*          ELSE.
*        if .
      ENDIF.
    ENDIF.
    IF la_dma-bp_number IS INITIAL.
      PERFORM validactions_data USING <fs_bp_data>
                                CHANGING <fs_final>-er_mss.
      IF <fs_final>-er_mss IS NOT INITIAL.
        <fs_final>-app_num      = <fs_bp_data>-application_number.
        CLEAR : la_dma.
        CONTINUE.
      ENDIF.


      CALL METHOD lv_new_conn->create_bp_i
        IMPORTING
          es_bp     = lv_bp
          et_return = ls_return.

      IF ls_return-message IS NOT INITIAL.
        CONCATENATE <fs_final>-er_mss ls_return-message INTO <fs_final>-er_mss SEPARATED BY space.
      ENDIF.


    ELSE.
      lv_bp = la_dma-bp_number.
    ENDIF.
    IF lv_bp IS INITIAL .
      <fs_final>-app_num      = <fs_bp_data>-application_number.
      <fs_final>-er_mss =    |Error in Business Partner creation |.
      CONTINUE.
    ENDIF.

    CLEAR : la_dma.
    IF lv_bp IS NOT INITIAL.

*      CLEAR lv_cont_flag.
      IF la_dma-vkont IS INITIAL. "gsp
        CALL METHOD lv_new_conn->create_contratacct_i
          EXPORTING
            ev_partner = lv_bp
          IMPORTING
            ev_cont    = lv_cont
           es_return  = ls_return.

        IF ls_return-message IS NOT INITIAL.
          CONCATENATE <fs_final>-er_mss ls_return-message INTO <fs_final>-er_mss SEPARATED BY space.
        ENDIF.

      ELSE.                           "gsp
        lv_cont = la_dma-vkont.       " gsp
        lv_cont_flag = 'X'.
      ENDIF.   "gsp
      IF lv_cont IS INITIAL .
        <fs_final>-bp_number    = lv_bp.
        <fs_final>-app_num      = <fs_bp_data>-application_number.
        <fs_final>-er_mss =    |Error in contract account creation |.
        CONTINUE.
      ENDIF.
*
*        endif.
      IF lv_cont IS NOT INITIAL.


        CALL METHOD lv_new_conn->create_sr_i
          EXPORTING
            iv_bp     = lv_bp
            iv_ca     = lv_cont
*           iv_fica   = iv_fica
*           iv_cust_fields = lv_cust_fields
          IMPORTING
            es_req_no = lv_sr_no.

      ENDIF.

      <fs_bp_data>-sr_number = lv_sr_no.
      <fs_bp_data>-bp_number = lv_bp.
      <fs_bp_data>-vkont     = lv_cont.
      <fs_bp_data>-sr_number = lv_sr_no.
      <fs_bp_data>-bp_kind          = lv_new_conn->gt_cm_ca_data-bp_type.
      <fs_bp_data>-created_date   = sy-datum.
      MODIFY zcm_bp_data_i FROM <fs_bp_data>.
      COMMIT WORK .


    ENDIF.
    IF lv_bp IS NOT INITIAL AND lv_cont IS NOT INITIAL . "AND lv_sr_no IS NOT INITIAL.
      <fs_final>-bp_number = lv_bp.
      <fs_final>-app_num      = <fs_bp_data>-application_number.
      <fs_final>-sr_number    = lv_sr_no.
      <fs_final>-con_acc      = lv_cont.
      <fs_final>-er_mss       = |Record created successfully |.
    ELSE.
      <fs_final>-bp_number = lv_bp.
      <fs_final>-app_num      = <fs_bp_data>-application_number.
      <fs_final>-er_mss       = |Error in creation of BP/CA/SR|.
    ENDIF.
* BOC by Prabh on 15/01/2023
    cl_progress_indicator=>progress_indicate(
      EXPORTING
         i_text               = | Total Number of records processed  { sy-tabix } / { lv_rows } |
         i_output_immediately  = 'X'
    ).
* EOC by Prabh on 15/01/2023
  ENDLOOP.



ENDFORM.
*&---------------------------------------------------------------------*
*& Form ALV_dispaly
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM alv_dispaly .

  DATA: ls_layout  TYPE slis_layout_alv,
        ls_variant TYPE disvariant.

  ls_layout-zebra = abap_true.
  ls_layout-colwidth_optimize = abap_true.

  CONSTANTS : lc_srreq      TYPE char50  VALUE 'SR_NUMBER',
              lc_srname     TYPE char50  VALUE 'Service Request',
              lc_error      TYPE char50  VALUE 'ER_MSS',
              lc_errname    TYPE char50  VALUE  'Remarks',
              lc_appno      TYPE char50  VALUE 'APP_NUM',
              lc_appno_name TYPE char50  VALUE 'Application Number',
              lc_bp         TYPE char50  VALUE 'BP_NUMBER',
              lc_bpname     TYPE char50  VALUE 'PARTNER',
              lc_cont       TYPE char50  VALUE 'CON_ACC',
              lc_contname   TYPE char50  VALUE 'Contract account'.

  IF p_bp IS NOT INITIAL.
    mig_fieldcat      1     lc_appno      lc_appno_name         .
    mig_fieldcat      2     lc_bp         lc_bpname  .
    mig_fieldcat      3     lc_srreq      lc_srname .
    mig_fieldcat      4     lc_cont       lc_contname   .
    mig_fieldcat      5     lc_error      lc_errname   .

  ENDIF.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program       = sy-repid
      i_callback_user_command  = 'USER_COMMAND'
      it_fieldcat              = gt_fieldcat
      is_layout                = ls_layout
      i_callback_pf_status_set = 'SET_PF_STATUS'
      i_save                   = 'A'
      is_variant               = ls_variant
    TABLES
      t_outtab                 = gt_final
    EXCEPTIONS
      program_error            = 1
      OTHERS                   = 2.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form download_cust_template
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM download_cust_template .
  DATA: lo_excel              TYPE REF TO zcl_excel,
        lo_worksheet          TYPE REF TO zcl_excel_worksheet,
        lo_style              TYPE REF TO zcl_excel_style,
        lo_style_date         TYPE REF TO zcl_excel_style,
        lo_style_editable     TYPE REF TO zcl_excel_style,
        lo_data_validation    TYPE REF TO zcl_excel_data_validation,
        lt_field_catalog      TYPE zexcel_t_fieldcatalog,
        ls_table_settings     TYPE zexcel_s_table_settings,
        ls_table_settings_out TYPE zexcel_s_table_settings,
        lv_style_guid         TYPE zexcel_cell_style,
        lv_row                TYPE char10,
        lo_border_light       TYPE REF TO zcl_excel_style_border,
        lv_validation         TYPE string.

  FIELD-SYMBOLS: <lfs_field_catalog> TYPE zexcel_s_fieldcatalog.

  " Creates active sheet
  CREATE OBJECT: lo_excel, lo_border_light.

  " Get active sheet
  lo_worksheet = lo_excel->get_active_worksheet( ).
  lo_worksheet->set_title( ip_title = 'Customer' ).


  lv_validation = '"ZIND"'.
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
*  lo_data_validation->type           = zcl_excel_data_validation=>C_STYLE_WARNING.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'B'.
  lo_data_validation->cell_column_to = 'B'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.
*
  lv_validation = '"0034, 0035, 0036, 0037, 0038, 0039, 0040, 0041, 0042, 0043, 0044, 0045, 0046, 0047, 0048, 0049"'.
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
*  lo_data_validation->type           = zcl_excel_data_validation=>C_STYLE_WARNING.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'C'.
  lo_data_validation->cell_column_to = 'C'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"0003, 0005"'.
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
*  lo_data_validation->type           = zcl_excel_data_validation=>C_STYLE_WARNING.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'E'.
  lo_data_validation->cell_column_to = 'E'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"11, 12, 13, 14, 15, 16, 17, 18, 19"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'H'.
  lo_data_validation->cell_column_to = 'H'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"DUL, DIB, TIN, MOR, SIV, NAZ, NAH, DIG, GOL, JOR, MAR, TIT, BAR, DOM, SAN, SAV, TGR, TGP"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'L'.
  lo_data_validation->cell_column_to = 'L'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"Duliajan, Dibrugarh, Tinsukia, Moran, Sivsagar, Nazira, Naharkatia, Digboi, Golaghat, Jorhat, Margherita, Titabar, Barmathurapur, Doom Dooma, Santi, Savitri, Tingri, Tingri Panitola Ext."'.

  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'R'.
  lo_data_validation->cell_column_to = 'R'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"ZPAN, ZVOT, ZAADH, ZCIN, ZGST"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'V'.
  lo_data_validation->cell_column_to = 'V'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"ZPLOW, ZLEAS, ZNOJO, ZTRAD, ZPOA, ZGPAN, ZELBL, ZCIN, ZGST"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'X'.
  lo_data_validation->cell_column_to = 'X'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"ZPLOW, ZLEAS, ZNORE, ZTRAD, ZPOA, ZGPAN, ZELBL, ZCIN, ZGST"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'Z'.
  lo_data_validation->cell_column_to = 'Z'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"YES, NO"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'AB'.
  lo_data_validation->cell_column_to = 'AB'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"YES, NO"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'AC'.
  lo_data_validation->cell_column_to = 'AC'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"YES, NO"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'AD'.
  lo_data_validation->cell_column_to = 'AD'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"YES, NO"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'AE'.
  lo_data_validation->cell_column_to = 'AE'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"YES, NO"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'AF'.
  lo_data_validation->cell_column_to = 'AF'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"YES, NO"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'AG'.
  lo_data_validation->cell_column_to = 'AG'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

  lv_validation = '"YES, NO"'.

  "Drop down for BP Type "Begin
  lo_data_validation = lo_worksheet->add_new_data_validation( ).
  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
  lo_data_validation->formula1       = lv_validation.
  lo_data_validation->cell_row       = 2.
  lo_data_validation->cell_row_to    = 10000.
  lo_data_validation->cell_column    = 'AH'.
  lo_data_validation->cell_column_to = 'AH'.
  lo_data_validation->allowblank     = 'X'.
  lo_data_validation->showdropdown   = 'X'.
  CLEAR: lv_validation.

*  lv_validation = '"RTGS, NEFT, Cheque, DD, POS"'.
*
*  "Drop down for BP Type "Begin
*  lo_data_validation = lo_worksheet->add_new_data_validation( ).
*  lo_data_validation->type           = zcl_excel_data_validation=>c_type_list.
*  lo_data_validation->formula1       = lv_validation.
*  lo_data_validation->cell_row       = 2.
*  lo_data_validation->cell_row_to    = 10000.
*  lo_data_validation->cell_column    = 'AM'.
*  lo_data_validation->cell_column_to = 'AM'.
*  lo_data_validation->allowblank     = 'X'.
*  lo_data_validation->showdropdown   = 'X'.
*  CLEAR: lv_validation.

  " sheet style (white background)
*  lo_style = lo_excel->add_new_style( ).
*  lo_style->fill->filltype = zcl_excel_style_fill=>c_fill_solid.
*  lo_style->fill->fgcolor-rgb  = zcl_excel_style_color=>c_white.
*
*  lo_border_light->border_style = zcl_excel_style_border=>c_border_thin.
*  lo_style->borders->allborders = lo_border_light.
*  lv_style_guid = lo_style->get_guid( ).
*
*  lo_worksheet->zif_excel_sheet_properties~set_style( lv_style_guid ).

  " sheet style (white background)
  lo_style = lo_excel->add_new_style( ).
  lo_style->fill->filltype = zcl_excel_style_fill=>c_fill_solid.
  lo_style->fill->fgcolor-rgb  = zcl_excel_style_color=>c_white.

  lo_border_light->border_style = zcl_excel_style_border=>c_border_thin.
  lo_style->borders->allborders = lo_border_light.
  lv_style_guid = lo_style->get_guid( ).

  lo_worksheet->zif_excel_sheet_properties~set_style( lv_style_guid ).

  lt_field_catalog = zcl_excel_common=>get_fieldcatalog( ip_table = gt_dma_data ).


  LOOP AT lt_field_catalog ASSIGNING <lfs_field_catalog>.
    CASE <lfs_field_catalog>-fieldname.

      WHEN 'APPLICATION_NUMBER'.
        <lfs_field_catalog>-position   = 1.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = |Application Number|.
      WHEN 'BP_KIND'.
        <lfs_field_catalog>-position   = 2.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = |BP Category|.
      WHEN 'HOUSE_HOLD'.
        <lfs_field_catalog>-position   = 3.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Type of Establishment'.
      WHEN 'MOBILE_NO'.
        <lfs_field_catalog>-position   = 4.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Mobile No'.
      WHEN 'TITLE'.
        <lfs_field_catalog>-position   = 5.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Title'.
      WHEN 'NAME_ORG1'.
        <lfs_field_catalog>-position   = 6.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Name1 of an Organization'.
      WHEN 'NAME_ORG2'.
        <lfs_field_catalog>-position   = 7.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Name2 of an Organization'.
      WHEN 'LEGAL_ORG'.
        <lfs_field_catalog>-position   = 8.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Legal Entity of Organization'.
      WHEN 'AUTH_FIRST_NAME'.
        <lfs_field_catalog>-position   = 9.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Authorized person First Name'.
      WHEN 'AUTH_MIDDLE_NAME'.
        <lfs_field_catalog>-position   = 10.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Authorized person Middle Name'.
      WHEN 'AUTH_LAST_NAME'.
        <lfs_field_catalog>-position   = 11.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Authorized person Last Name'.
      WHEN 'GRID_CODE'.
        <lfs_field_catalog>-position   = 12.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Grid Code'.
      WHEN 'WARD_NO'.
        <lfs_field_catalog>-position   = 13.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Ward No.'.
      WHEN 'STREET_AREA'.
        <lfs_field_catalog>-position   = 14.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Street/Area'.
      WHEN 'LAND_MARK'.
        <lfs_field_catalog>-position   = 15.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Landmark'.
      WHEN 'DISTRICT'.
        <lfs_field_catalog>-position   = 16.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'District'.
      WHEN 'POSTAL_CODE'.
        <lfs_field_catalog>-position   = 17.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Postal code'.
      WHEN 'GRID_NAME'.
        <lfs_field_catalog>-position   = 18.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Grid Name'.
      WHEN 'STATE'.
        <lfs_field_catalog>-position   = 19.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'state'.
      WHEN 'MOBILE_ALTERNATE'.
        <lfs_field_catalog>-position   = 20.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Mobile Number (Alternate)'.
      WHEN 'EMAIL_ADDRESS'.
        <lfs_field_catalog>-position   = 21.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Email Address'.
      WHEN 'PHOTO_IDENTITY_PROOF'.
        <lfs_field_catalog>-position   = 22.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Photo Identity Proof'.
      WHEN 'PHOTO_ID_NO'.
        <lfs_field_catalog>-position   = 23.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Photo ID Number'.
      WHEN 'ADDRESS_PROOF'.
        <lfs_field_catalog>-position   = 24.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Address ID Proof'.
      WHEN 'ADDRESS_PROOF_ID_NO'.
        <lfs_field_catalog>-position   = 25.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Address ID Number'.
      WHEN 'OWNERSHIP_PROOF'.
        <lfs_field_catalog>-position   = 26.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Ownership ID Proof'.
      WHEN 'OWNERSHIP_PROOF_ID_NO'.
        <lfs_field_catalog>-position   = 27.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Ownership ID Number'.
      WHEN 'NOGHCH'.
        <lfs_field_catalog>-position   = 28.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Gas Handling Charge'.
      WHEN 'NOMDCAPM'.
        <lfs_field_catalog>-position   = 29.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'MDC APM Charge'.
      WHEN 'NOMDCNAPM1'.
        <lfs_field_catalog>-position   = 30.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'MDC NAPM1 Charge'.
      WHEN 'NOMDCNAPM2'.
        <lfs_field_catalog>-position   = 31.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'MDC NAPM2 Charge'.
      WHEN 'NOPREMDCH'.
        <lfs_field_catalog>-position   = 32.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Premium Distribution Charge'.
      WHEN 'NOTCSCH'.
        <lfs_field_catalog>-position   = 33.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'TCS'.
      WHEN 'NOTEXT'.
        <lfs_field_catalog>-position   = 34.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'SubJudice flag for Outstanding'.
      WHEN 'NODISTRI'.
        <lfs_field_catalog>-position   = 35.
        <lfs_field_catalog>-dynpfld    = abap_true.
        <lfs_field_catalog>-style      = lo_style->get_guid( ).
        <lfs_field_catalog>-scrtext_l  = 'Distribution Charge Amount'.
*      WHEN 'BANK_NAME'.
*        <lfs_field_catalog>-position   = 36.
*        <lfs_field_catalog>-dynpfld    = abap_true.
*        <lfs_field_catalog>-style      = lo_style->get_guid( ).
*        <lfs_field_catalog>-scrtext_l  = 'Bank Name'.
*      WHEN 'PAY_DATE'.
*        <lfs_field_catalog>-position   = 37.
*        <lfs_field_catalog>-dynpfld    = abap_true.
*        <lfs_field_catalog>-style      = lo_style->get_guid( ).
*        <lfs_field_catalog>-scrtext_l  = 'Date of Payment'.
*      WHEN 'BRANCH_NAME'.
*        <lfs_field_catalog>-position   = 38.
*        <lfs_field_catalog>-dynpfld    = abap_true.
*        <lfs_field_catalog>-style      = lo_style->get_guid( ).
*        <lfs_field_catalog>-scrtext_l  = 'Branch Name'.
*      WHEN 'TRANS_TYPE'.
*        <lfs_field_catalog>-position   = 39.
*        <lfs_field_catalog>-dynpfld    = abap_true.
*        <lfs_field_catalog>-style      = lo_style->get_guid( ).
*        <lfs_field_catalog>-scrtext_l  = 'Type of Transaction'.
*      WHEN 'REF_ID'.
*        <lfs_field_catalog>-position   = 40.
*        <lfs_field_catalog>-dynpfld    = abap_true.
*        <lfs_field_catalog>-style      = lo_style->get_guid( ).
*        <lfs_field_catalog>-scrtext_l  = 'Reference ID'.
*      WHEN 'PAID_UPAMT'.
*        <lfs_field_catalog>-position   = 41.
*        <lfs_field_catalog>-dynpfld    = abap_true.
*        <lfs_field_catalog>-style      = lo_style->get_guid( ).
*        <lfs_field_catalog>-scrtext_l  = 'Paid Amount'.
*      WHEN 'BANK_CLE_GL'.
*        <lfs_field_catalog>-position   = 42.
*        <lfs_field_catalog>-dynpfld    = abap_true.
*        <lfs_field_catalog>-style      = lo_style->get_guid( ).
*        <lfs_field_catalog>-scrtext_l  = 'Bank Clearing GL'.
*      WHEN 'HOUSE_BANK'.
*        <lfs_field_catalog>-position   = 43.
*        <lfs_field_catalog>-dynpfld    = abap_true.
*        <lfs_field_catalog>-style      = lo_style->get_guid( ).
*        <lfs_field_catalog>-scrtext_l  = 'House Bank ID'.
*      WHEN 'ACC_ID'.
*        <lfs_field_catalog>-position   = 44.
*        <lfs_field_catalog>-dynpfld    = abap_true.
*        <lfs_field_catalog>-style      = lo_style->get_guid( ).
*        <lfs_field_catalog>-scrtext_l  = 'Account ID'.

      WHEN OTHERS.
        <lfs_field_catalog>-dynpfld = abap_false.
    ENDCASE.
  ENDLOOP.

  ls_table_settings-table_style       = zcl_excel_table=>builtinstyle_medium2.
  ls_table_settings-nofilters         = abap_true.

  lo_worksheet->bind_table( EXPORTING
                              ip_table          = gt_dma_data
                              it_field_catalog  = lt_field_catalog
                              is_table_settings = ls_table_settings
                              iv_default_descr = 'L'
                            IMPORTING
                              es_table_settings = ls_table_settings_out ).

* Create output
  PERFORM file_download USING lo_excel.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form file_download
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LO_EXCEL
*&---------------------------------------------------------------------*
FORM file_download  USING    cl_excel.
  DATA: lv_filename  TYPE string,
        lv_path      TYPE string,
        lv_fullpath  TYPE string,
        lv_message   TYPE string,
        lt_rawdata   TYPE solix_tab,
        lv_bytecount TYPE i,
        lv_xdata     TYPE xstring,
        lo_writer    TYPE REF TO zif_excel_writer,
        lo_error     TYPE REF TO zcx_excel.

  TRY.
      CREATE OBJECT lo_writer TYPE zcl_excel_writer_2007.

      lv_xdata = lo_writer->write_file( cl_excel ).

      lt_rawdata = cl_bcs_convert=>xstring_to_solix( iv_xstring  = lv_xdata ).
      lv_bytecount = xstrlen( lv_xdata ).

      CALL METHOD cl_gui_frontend_services=>file_save_dialog
        EXPORTING
          window_title              = 'Template Download'
          default_extension         = 'xlsx'
        CHANGING
          filename                  = lv_filename
          path                      = lv_path
          fullpath                  = lv_fullpath
        EXCEPTIONS
          cntl_error                = 1
          error_no_gui              = 2
          not_supported_by_gui      = 3
          invalid_default_file_name = 4
          OTHERS                    = 5. "#EC NOTEXT
      IF lv_fullpath IS NOT INITIAL.
* Get trailing blank
        cl_gui_frontend_services=>gui_download( EXPORTING bin_filesize = lv_bytecount
                                                          filename     = lv_filename
                                                          filetype     = 'BIN'
                                                 CHANGING data_tab     = lt_rawdata
                                               EXCEPTIONS OTHERS       = 1 ).
        IF sy-subrc <> 0.
          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                  WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 INTO lv_message.
          RAISE EXCEPTION TYPE zcx_excel EXPORTING error = lv_message.
        ENDIF.
      ENDIF.

    CATCH zcx_excel INTO lo_error.
      RAISE EXCEPTION lo_error.
  ENDTRY.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form Validactions_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> <FS_DMA_DATA>
*&      <-- <FS_FINAL>_ER_MSS
*&---------------------------------------------------------------------*
FORM validactions_data  USING    p_dma_data TYPE zcm_bp_data_i
                        CHANGING p_final.

*  DESCRIBE FIELD p_dma_data-reg_date_no LENGTH DATA(len) IN BYTE MODE.
*  DATA(len) =  strlen( p_dma_data-reg_date_no ).
*
*  IF len NE 10.
*    p_final  = |Please check the Registration Date|.
*  ENDIF.
*
*

  IF p_dma_data-remarks IS NOT INITIAL.
    CONCATENATE  p_final p_dma_data-remarks INTO p_final SEPARATED BY space.
  ENDIF.
*
  IF p_dma_data-application_number IS INITIAL ."AND lv_BP IS INITIAL .
    CONCATENATE  p_final 'Application Number is mandatory' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-bp_kind IS INITIAL.
    CONCATENATE  p_final 'BP Category is mandatory,' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-house_hold IS INITIAL.
    CONCATENATE  p_final 'Type Of Establishment is mandatory,' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-mobile_no IS INITIAL.
    CONCATENATE  p_final 'Mobile No is mandatory,' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-mobile_no IS NOT INITIAL.
    DATA(lv_mo_length) = strlen( p_dma_data-mobile_no ).
    IF lv_mo_length <> 10.
      CONCATENATE  p_final 'Mobile No should be 10 digits,' INTO p_final SEPARATED BY space.
    ENDIF.
*    IF p_dma_data-mobile_no CN '0123456789'.
*      else.
*      CONCATENATE  p_final 'Mobile number contains inavlid characters' INTO p_final SEPARATED BY space.
*    ENDIF.
  ENDIF.

  IF p_dma_data-name_org1 IS INITIAL.
    CONCATENATE  p_final 'Name of the organization is mandatory,' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-legal_org IS INITIAL.
    CONCATENATE  p_final 'Legal Entity of an organization is mandatory,' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-grid_code IS INITIAL.
    CONCATENATE  p_final 'Grid Code is mandatory,' INTO p_final SEPARATED BY space.
  ENDIF.

*  IF p_dma_data-ward_no IS INITIAL.
*    CONCATENATE  p_final 'Ward No is mandatory,' INTO p_final SEPARATED BY space.
*  ENDIF.

  IF p_dma_data-district IS INITIAL.
    CONCATENATE  p_final 'District is mandatory,' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-postal_code IS INITIAL.
    CONCATENATE  p_final 'Postal Code is mandatory,' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-postal_code IS NOT INITIAL.
    DATA(lv_p_length) = strlen( p_dma_data-postal_code ).
    IF lv_p_length <> 6.
      CONCATENATE  p_final 'Postal code should be 6 digit,' INTO p_final SEPARATED BY space.
    ENDIF.
  ENDIF.

  IF p_dma_data-email_address IS INITIAL.
    CONCATENATE  p_final 'Email Address is mandatory,' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-email_address IS NOT INITIAL.
    DATA: iv_email TYPE string.
    iv_email =  p_dma_data-email_address.
    IF iv_email CP '+*.+*@+*.++*' OR
       iv_email CP '+*@+*.++*'.
      CONDENSE iv_email NO-GAPS.
      IF iv_email CO 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890.@-_ '.
*        CONCATENATE  p_final 'Email address is correct' INTO p_final SEPARATED BY space.
      ELSE.
        CONCATENATE  p_final 'Inavlid email address format,' INTO p_final SEPARATED BY space.
      ENDIF.
    ELSE.
      CONCATENATE  p_final 'Inavlid email address format,' INTO p_final SEPARATED BY space.
    ENDIF.
  ENDIF.

  IF p_dma_data-photo_identity_proof IS INITIAL.
    CONCATENATE  p_final 'Photo Identity Proof is mandatory' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-photo_id_no IS INITIAL.
    CONCATENATE  p_final 'Photo ID No is mandatory' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-address_proof IS INITIAL.
    CONCATENATE  p_final 'Address Proof is mandatory' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-address_proof_id_no IS INITIAL.
    CONCATENATE  p_final ' Address Proof ID No is mandatory' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-ownership_proof IS INITIAL.
    CONCATENATE  p_final 'Ownership Proof is mandatory' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-ownership_proof_id_no IS INITIAL.
    CONCATENATE  p_final 'Ownership Proof ID No is mandatory' INTO p_final SEPARATED BY space.
  ENDIF.


  IF p_dma_data-ownership_proof = 'ZGST' .

    IF p_dma_data-ownership_proof_id_no IS NOT INITIAL.
      DATA(lv_oid) = strlen( p_dma_data-ownership_proof_id_no ).
      IF lv_oid <> 15.
        CONCATENATE  p_final 'GST Number must be 15 digits,' INTO p_final SEPARATED BY space.
      ENDIF.
    ENDIF.
  ENDIF.

  IF p_dma_data-address_proof = 'ZGST'.

    IF p_dma_data-address_proof_id_no IS NOT INITIAL.
      DATA(lv_aid) = strlen( p_dma_data-address_proof_id_no ).
      IF lv_aid <> 15.
        CONCATENATE  p_final ' GST Number must be 15 digits,' INTO p_final SEPARATED BY space.
      ENDIF.
    ENDIF.
  ENDIF.

  IF  p_dma_data-photo_identity_proof = 'ZGST'.
    IF p_dma_data-photo_id_no IS NOT INITIAL.
      DATA(lv_pid) = strlen( p_dma_data-photo_id_no ).
      IF lv_pid <> 15.
        CONCATENATE  p_final 'GST Number must be 15 digits,' INTO p_final SEPARATED BY space.
      ENDIF.
    ENDIF.
  ENDIF.

  IF p_dma_data-noghch IS INITIAL.
    CONCATENATE  p_final 'Please select the input for Gas Handling Charge' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-nomdcapm IS INITIAL.
    CONCATENATE  p_final 'Please select the input for MDC APM Charge' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-nomdcnapm1 IS INITIAL.
    CONCATENATE  p_final 'Please select the input for MDC NAPM1 Charge' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-nomdcnapm2 IS INITIAL.
    CONCATENATE  p_final 'Please select the input for MDC NAPM2 Charge' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-nopremdch IS INITIAL.
    CONCATENATE  p_final 'Please select the input for Premium Distribution Charge' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-notcsch IS INITIAL.
    CONCATENATE  p_final 'Please select the input for TCS' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-notext IS INITIAL.
    CONCATENATE  p_final 'Please select the input for Previous Balance Note' INTO p_final SEPARATED BY space.
  ENDIF.

  IF p_dma_data-nodistri IS INITIAL.
    CONCATENATE  p_final 'Please provide the input for Distribution Charge Amount' INTO p_final SEPARATED BY space.
  ENDIF.
*  IF p_dma_data-grid_code IS INITIAL.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form get_file_data_bp_excel
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM get_file_data_bp_excel .
*  BREAK-POINT.
  DATA:lr_data TYPE REF TO data,
       wa_data TYPE zcm_bp_data_s_i,
       lv_int  TYPE i,
       lv_val  TYPE string.
  CONSTANTS: lv_pointer TYPE i VALUE 79. "66."C1
  FIELD-SYMBOLS:<lt_data> TYPE STANDARD TABLE..
  lr_data = NEW zcl_utility_excel( )->readexcelfile( v_file = CONV string( p_bp ) ).
  ASSIGN lr_data->* TO <lt_data>.
  LOOP AT <lt_data> ASSIGNING FIELD-SYMBOL(<wa_data>).
    IF sy-tabix = 1.
      CONTINUE.
    ENDIF.
    DO lv_pointer TIMES.
      ASSIGN COMPONENT sy-index OF STRUCTURE <wa_data> TO FIELD-SYMBOL(<wa_xl_data>).
      ASSIGN COMPONENT sy-index OF STRUCTURE wa_data TO FIELD-SYMBOL(<wa_tab_data>).
      IF <wa_xl_data> IS ASSIGNED AND <wa_xl_data> IS NOT INITIAL AND <wa_tab_data> IS ASSIGNED.
        CASE sy-index.
*          WHEN 002.


          WHEN 001.
            TRANSLATE <wa_xl_data> TO UPPER CASE.
            <wa_tab_data> = <wa_xl_data>.

          WHEN 003.
            DATA : lv_ptype TYPE char4.
            lv_ptype = <wa_xl_data>.
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                input  = lv_ptype
              IMPORTING
                output = lv_ptype.
            <wa_tab_data> = lv_ptype..
            CLEAR <wa_xl_data>.

          WHEN 005.
            DATA : lv_ttype TYPE char4.
            lv_ttype = <wa_xl_data>.
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                input  = lv_ttype
              IMPORTING
                output = lv_ttype.
            <wa_tab_data> = lv_ttype..
            CLEAR <wa_xl_data>.
          WHEN 008.
            DATA : lv_stype TYPE char2.
            lv_stype = <wa_xl_data>.
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                input  = lv_stype
              IMPORTING
                output = lv_stype.
            <wa_tab_data> = lv_stype..
            CLEAR <wa_xl_data>.

*          WHEN 037.
*
*            CLEAR : lv_int.
*            lv_val = <wa_xl_data>+0(4).
*            CALL FUNCTION 'CONVERT_STRING_TO_INTEGER'
*              EXPORTING
*                p_string      = lv_val
*              IMPORTING
*                p_int         = lv_int
*              EXCEPTIONS
*                overflow      = 1
*                invalid_chars = 2
*                OTHERS        = 3.
*            IF sy-subrc <> 0.
** Implement suitable error handling here
*              CONCATENATE    <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data> .
**              CONCATENATE  <wa_xl_data>+0(2) <wa_xl_data>+3(2) <wa_xl_data>+6(4)  INTO  <wa_xl_data> SEPARATED BY '.'.
**              CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data> SEPARATED BY '.'.
*              <wa_tab_data> = <wa_xl_data>.
*
*            ELSE .
*
*              CONCATENATE <wa_xl_data>+8(2) <wa_xl_data>+5(2) <wa_xl_data>+0(4) INTO  <wa_xl_data> SEPARATED BY '.'.
*              <wa_tab_data> = <wa_xl_data>.
*            ENDIF.

          WHEN OTHERS.
            <wa_tab_data> = <wa_xl_data>.
        ENDCASE.
      ENDIF.
    ENDDO.
    " Registration date no and KYC Date should be mapped
*    wa_data-kyc_date = wa_data-reg_date_no.
    APPEND INITIAL LINE TO gt_dma_data ASSIGNING FIELD-SYMBOL(<fs_bp_data>).
    MOVE-CORRESPONDING wa_data TO <fs_bp_data>.
    IF <fs_bp_data>-application_number IS NOT INITIAL.
      <fs_bp_data>-created_date = sy-datum.
    ELSE.
*      APPEND INITIAL LINE TO gt_final ASSIGNING <fs_final>.
*      <fs_final>-app_num = lv_bp.
*      <fs_final>-er_mss  = |Duplicate Application number|.
*      CLEAR : lv_bp.
    ENDIF.
    CLEAR wa_data.
  ENDLOOP.
  SORT gt_dma_data  BY application_number.
  DELETE ADJACENT DUPLICATES FROM gt_dma_data COMPARING application_number.
  DELETE gt_dma_data WHERE created_date IS INITIAL.
ENDFORM.

*************************************************************************************************************************************************

6th block 
ZISU_CM_I_MI - tcode
ZISU_CM_R_PO_TO_MOVEIN_IND - prg_name

*************************************************************************************************************************************************
*&---------------------------------------------------------------------*
*& Report ZISU_CM_R_PO_TO_MOVEIN
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Report ZISU_CM_R_PO_TO_MOVEIN
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zisu_cm_r_po_to_movein_ind.

TYPE-POOLS: slis.
TABLES : crms4d_serv_h,zcm_bp_data_i.
RANGES r_date FOR sy-datum.
DATA : lv         TYPE c LENGTH 3,
       l_filename TYPE string.
DATA : gt_dma_data TYPE TABLE OF zcm_bp_data_i,
       la_dma_data TYPE  zcm_bp_data_i.

DATA: iv_meterread TYPE p LENGTH 10 DECIMALS 3 .

TYPES : BEGIN          OF      ty_fica_data,
          partner      TYPE    bu_partner,
          sr_request   TYPE    crmt_object_id_db,
          date_cre     TYPE    sy-datum,
          grid_code    TYPE    char50,
          plant        TYPE    werks,
          dist         TYPE    char50,
          ward         TYPE    char50,
*          plant        TYPE    werks, "zzplant , "char50,
*          dist         TYPE    char50,
*          ca           TYPE    char50,
          app_no       TYPE    char50,
          status       TYPE    char50,
          sub_status   TYPE    char50,
*          vrn_name     TYPE    char50,
*          ven_manu     TYPE    zz1_vendornumber,
*          po_manual    TYPE    zz1_ponumber,
*          vendor       TYPE    zz1_vendornumber,
*          po           TYPE    ebeln, "zz1_ponumber, "Change C1
          dev_loc      TYPE    text40, " KTEXT , "stort_t499s,
          matnr        TYPE    matnr,
          baujj        TYPE    baujj,
*          datab        TYPE    datab,
          herst        TYPE    herst,
          typbz        TYPE    typbz,
          serge        TYPE    serge,
          eadat        TYPE    eadat,
          e_zwstand    TYPE    e_zwstand,
*          extra_po     TYPE    bu_id_type,
*          extra_gi_po  TYPE    bu_id_type,
*          extra_gi_pi  TYPE    bu_id_type,
          vol_corr_fa  TYPE    e_zuszahlzw, "e_zuszahlzw,
*          tf_no        TYPE    char50,
          move_dt      TYPE    sy-datum,
          move_read    TYPE    char50,
*          no_burner    TYPE    char50,
*          meter_card   TYPE    char50,
*          rubb_date    TYPE    sy-datum , "char10,
*          drs_loc      TYPE    char50,
*          drs_no       TYPE    char50,
*          loopno       TYPE    char50,
          srm_no       TYPE    char50,
*          srm_cap      TYPE    char50,
          riser_iso    TYPE    char1,
          pipe_conn    TYPE    char1,
          pipe_conn_ri TYPE    char1,
          iso_inst     TYPE    char1,
          house_pipe   TYPE    char1,
*          remark       TYPE     char50,"Siva-S4DK907687- 24-05-2023
*          remark       TYPE     char100, "Siva-S4DK907687- 24-05-2023
       remark      TYPE     CHAR_1536,
          conv_date    TYPE    char20,
        END            OF      ty_fica_data.

CONSTANTS : lc_srreq     TYPE char50  VALUE 'SR_REQUEST',
            lc_srname    TYPE char50  VALUE 'Service Request',
            lc_datecre   TYPE char50  VALUE 'DATE_CRE',
            lc_datename  TYPE char50  VALUE 'Date of Creation',
            lc_bp        TYPE char50  VALUE 'PARTNER',
            lc_bpname    TYPE char50  VALUE 'Partner',
            lc_gc        TYPE char50  VALUE 'Grid_code',
            lc_gcode     TYPE char50  VALUE 'Grid Code',
            lc_wa        TYPE char50  VALUE 'ward',
            lc_waname    TYPE char50  VALUE 'ward',
            lc_dist      TYPE char50  VALUE 'DIST',
            lc_dist_name TYPE char50  VALUE 'District',
            lc_app       TYPE char50  VALUE 'APP_NO',
            lc_appname   TYPE char50  VALUE 'Application Number',
*            lc_ca        TYPE char50  VALUE 'CA',
*            lc_caname    TYPE char50  VALUE 'WARD',
*            lc_vendorn   TYPE char50  VALUE 'VRN_NAME',
*            lc_vennamen  TYPE char50  VALUE 'Vendor Name',
*            lc_vendor    TYPE char50  VALUE 'VENDOR',
*            lc_venname   TYPE char50  VALUE 'Vendor',
*            lc_po        TYPE char50  VALUE 'PO',
*            lc_poname    TYPE char50  VALUE 'PO',
*            lc_venmanu   TYPE char50  VALUE 'VEN_MANU',
*            lc_venman    TYPE char50  VALUE 'System Proposed  Vendor Code',
*            lc_poman     TYPE char50  VALUE 'PO_MANUAL',
*            lc_pomanname TYPE char50  VALUE 'System Proposed PO No.',
            lc_movein    TYPE char50  VALUE 'MOVE_DT',
            lc_moveinnm  TYPE char50  VALUE 'Conversion/Move in date',
            lc_moverd    TYPE char50  VALUE 'MOVE_READ',
            lc_moverdnm  TYPE char50  VALUE 'Move in Read',
*            lc_nobur     TYPE char50  VALUE 'NO_BURNER',
*            lc_noburnm   TYPE char50  VALUE 'No. of Burners',
*            lc_rubtu     TYPE char50  VALUE 'RUBB_DATE',
*            lc_rubtunm   TYPE char50  VALUE 'Rubber tube expiry date',
*            lc_drstu     TYPE char50  VALUE 'DRS_LOC',
*            lc_drstunm   TYPE char50  VALUE 'DRS Location',
*            lc_drsno     TYPE char50  VALUE 'DRS_NO',
*            lc_drsnounm  TYPE char50  VALUE 'DRS No',
*            lc_loop      TYPE char50  VALUE 'LOOPNO',
*            lc_loopnm    TYPE char50  VALUE 'Loop No',
            lc_srmno     TYPE char50  VALUE 'SRM_NO',
            lc_srmnonm   TYPE char50  VALUE 'SRM No',
*            lc_srmcap    TYPE char50  VALUE 'SRM_CAP',
*            lc_srmcapnm  TYPE char50  VALUE 'SRM Capacity',
            lc_status    TYPE char50  VALUE 'STATUS',
            lc_statnam   TYPE char50  VALUE 'Status',
            lc_substatus TYPE char50  VALUE 'SUB_STATUS',
            lc_substanam TYPE char50  VALUE 'Sub status',
            lc_plant     TYPE char50  VALUE 'PLANT',
            lc_plannam   TYPE char50  VALUE 'Plant',
*            lc_mtrcd     TYPE char50  VALUE 'METER_CARD',
*            lc_mtrcdnm   TYPE char50  VALUE 'Meter Job card and image upload',
*            lc_remark    TYPE char50  VALUE 'REMARK', "Siva-S4DK907687- 24-05-2023
*            lc_remarnam  TYPE char50  VALUE 'Remarks', "Siva-S4DK907687- 24-05-2023
            lc_remark    TYPE char100  VALUE 'REMARK', "Siva-S4DK907687- 24-05-2023
            lc_remarnam  TYPE char100 VALUE 'Remarks', "Siva-S4DK907687- 24-05-2023
            lc_dev_lo    TYPE char50  VALUE 'DEV_LOC',
            lc_devnam    TYPE char50  VALUE 'Device located',
            lc_matnr     TYPE char50  VALUE 'MATNR',
            lc_mtrnam    TYPE char50  VALUE 'Material No',
            lc_baujj     TYPE char50  VALUE 'BAUJJ',
            lc_baujjnam  TYPE char50  VALUE 'Year of Make',
            lc_herst     TYPE char50  VALUE 'HERST',
            lc_herstnam  TYPE char50  VALUE 'Meter Manufacturer name',
            lc_typbz     TYPE char50  VALUE 'TYPBZ',
            lc_typbznam  TYPE char50  VALUE 'Meter Model',
            lc_serge     TYPE char50  VALUE 'SERGE',
            lc_sergenam  TYPE char50  VALUE 'Meter Serial No',
            lc_eadat     TYPE char50  VALUE 'EADAT',
            lc_eadatnam  TYPE char50  VALUE 'Meter Installation date',
            lc_ezwstand  TYPE char50  VALUE 'E_ZWSTAND',
            lc_ezwnam    TYPE char50  VALUE 'Meter reading',
*            lc_extpo     TYPE char50  VALUE 'EXTRA_PO',
*            lc_extnam    TYPE char50  VALUE 'Extra kitchen Point',
*            lc_extgipo   TYPE char50  VALUE 'EXTRA_GI_PO',
*            lc_extginam  TYPE char50  VALUE 'Extra Gyeser Point',
*            lc_extgipi   TYPE char50  VALUE 'EXTRA_GI_PI',
*            lc_extgpinam TYPE char50  VALUE 'Extra GI Pipe in Mtrs',
            lc_volcr     TYPE char50  VALUE 'VOL_CORR_FA',
            lc_volcrnam  TYPE char50  VALUE 'Volume Correction Factor',
            lc_vfrom     TYPE char50  VALUE 'VALID_FROM',
            lc_vfromnam  TYPE char50  VALUE 'Valid From',
            lc_mtloc     TYPE char50  VALUE 'METER_LOC',
            lc_mtlocnam  TYPE char50  VALUE 'Meter Location',
            lc_risiso    TYPE char50  VALUE 'RISER_ISO',
            lc_risisonam TYPE char50  VALUE 'Riser Isolation Valve Installed',
            lc_picon     TYPE char50  VALUE 'PIPE_CONN',
            lc_piconnam  TYPE char50  VALUE 'Pipe Connected up to Metering unit',
            lc_piconri   TYPE char50  VALUE 'PIPE_CONN_RI',
            lc_picorinam TYPE char100 VALUE 'Pipe Connected from metering unit up to isolation valve',
            lc_isoinst   TYPE char50  VALUE 'ISO_INST',
            lc_isointnam TYPE char50  VALUE 'Isolation valve Installed',
            lc_hopipe    TYPE char50  VALUE 'HOUSE_PIPE',
            lc_hopipenam TYPE char50  VALUE 'Hose Pipe Installed'.
*            lc_tfno      TYPE char50  VALUE 'TF_NO',
*            lc_tfnam     TYPE char50  VALUE 'TF No'.
.
DATA: gt_outtab TYPE TABLE OF ty_fica_data,
      la_outtab TYPE  ty_fica_data.
DATA : g_sec TYPE char1.
DATA:
  lv_rc          TYPE  i,
  lv_user_action TYPE  i,
  lt_file_table  TYPE  filetable,
  ls_file_table  LIKE LINE OF lt_file_table.

DATA: gt_fieldcat   TYPE slis_t_fieldcat_alv,
      lw_fieldcat   TYPE slis_fieldcat_alv,
      lv_poinv_flag TYPE boolean. "Siva-S4DK907687- 24-05-2023


SELECTION-SCREEN BEGIN OF BLOCK 0001 WITH FRAME TITLE TEXT-001.
  PARAMETERS:
    p1 RADIOBUTTON GROUP 1 DEFAULT 'X' USER-COMMAND cm1,
    p2 RADIOBUTTON GROUP 1.


  SELECTION-SCREEN BEGIN OF BLOCK 0002 WITH FRAME TITLE TEXT-002.

*&--- Business Partner
    SELECT-OPTIONS:  s_post     FOR   sy-datum MODIF ID m2,
                     s_tras     FOR   crms4d_serv_h-object_id MODIF ID m2,
                     s_gcode      FOR   zcm_bp_data_i-grid_code MODIF ID m2,
                     s_app      FOR   zcm_bp_data_i-application_number MODIF ID m2.
    PARAMETERS:      p_gc TYPE rlgrap-filename MODIF ID m1  . " FOR spfli-carrid MODIF ID m1,
*                p_otfile TYPE rlgrap-filename MODIF ID m2.
  SELECTION-SCREEN END OF BLOCK 0002.
SELECTION-SCREEN END OF BLOCK 0001.

AT SELECTION-SCREEN OUTPUT.

  IF p1 IS NOT INITIAL.
    lv = 'M1'.
  ELSE.
    lv = 'M2'.
  ENDIF.

  LOOP AT SCREEN.
    IF screen-group1 = lv.
      screen-active = '0'.
    ENDIF.
    MODIFY SCREEN.
  ENDLOOP.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_gc.
*----------------------------------------------------------------------*


*  CALL METHOD cl_gui_frontend_services=>directory_browse
*    EXPORTING
*      window_title         = 'Directory to use'
*      initial_folder       = 'Z:'
*    CHANGING
*      selected_folder      = l_filename
*    EXCEPTIONS
*      cntl_error           = 1
*      error_no_gui         = 2
*      not_supported_by_gui = 3
*      OTHERS               = 4.
*  IF sy-subrc <> 0.
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*  ENDIF.

  cl_gui_frontend_services=>file_open_dialog(
    EXPORTING
      window_title      = 'Customer File'
      multiselection    = ''
      default_extension = '*.xlsx'
      file_filter       = 'Text file (*.xlsx)|*.xlsx|All (*.*)|*.*'
    CHANGING
      file_table        = lt_file_table
      rc                = lv_rc
      user_action       = lv_user_action
    EXCEPTIONS
      OTHERS            = 1 ).
  IF sy-subrc = 0.
    IF lv_user_action = cl_gui_frontend_services=>action_ok.
      IF lt_file_table IS NOT INITIAL.
        READ TABLE lt_file_table INTO ls_file_table INDEX 1.
        IF sy-subrc = 0.
          l_filename = ls_file_table-filename.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

  p_gc = l_filename.

START-OF-SELECTION.

  DEFINE mig_fieldcat.
    CLEAR lw_fieldcat.
 lw_fieldcat-col_pos = &1.
 lw_fieldcat-fieldname = &2.
 lw_fieldcat-tabname    = 'GT_OUTTAB'.
 lw_fieldcat-seltext_l = &3.
 APPEND lw_fieldcat TO gt_fieldcat.

  END-OF-DEFINITION.

  IF p1 IS NOT INITIAL.
    CLEAR: p_gc,l_filename.
  ENDIF.
  IF p_gc  IS NOT INITIAL .
*    PERFORM get_file_data.   "" Commented by Tanveer
    PERFORM get_file_data_excel.
  ELSE.
    PERFORM get_data.
  ENDIF.
  PERFORM alv_gruid.
*&---------------------------------------------------------------------*
*& Form Get_file_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM get_file_data .

  DATA : it_excel_data TYPE TABLE OF alsmex_tabline,
         lv_row_count  TYPE i,
         ls_file_data  TYPE ty_fica_data.


  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
    EXPORTING
      filename                = p_gc
      i_begin_col             = 1
      i_begin_row             = 2
      i_end_col               = 99
      i_end_row               = 9999
    TABLES
      intern                  = it_excel_data
    EXCEPTIONS
      inconsistent_parameters = 1
      upload_ole              = 2
      OTHERS                  = 3.
  IF sy-subrc <> 0.

* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.


*Populate data to internal tables and structures

  SORT it_excel_data BY row col.
  lv_row_count =  |001|.
  DESCRIBE TABLE it_excel_data LINES DATA(lv_line).

  LOOP AT it_excel_data ASSIGNING FIELD-SYMBOL(<fs_excel_data>).
    IF lv_row_count NE <fs_excel_data>-row.
      APPEND  ls_file_data TO gt_outtab.
      lv_row_count = <fs_excel_data>-row.
      CLEAR ls_file_data.

    ELSE.

    ENDIF.
    CASE <fs_excel_data>-col.
      WHEN 001.
        ls_file_data-partner                  = <fs_excel_data>-value.
      WHEN 002.
        ls_file_data-sr_request               = <fs_excel_data>-value.
      WHEN 003.
        CONCATENATE <fs_excel_data>-value+6(4)  <fs_excel_data>-value+3(2) <fs_excel_data>-value+0(2)   INTO ls_file_data-date_cre .
      WHEN 004.
        ls_file_data-grid_code                       = <fs_excel_data>-value.
      WHEN 005.
        ls_file_data-ward                    = <fs_excel_data>-value.
      WHEN 006.
        ls_file_data-plant                     = <fs_excel_data>-value.
      WHEN 007.
        ls_file_data-dist                       = <fs_excel_data>-value.
      WHEN 008.
        ls_file_data-app_no                   = <fs_excel_data>-value.
      WHEN 009.
        ls_file_data-status                   = <fs_excel_data>-value.
      WHEN 010.
        ls_file_data-sub_status               = <fs_excel_data>-value.
*      WHEN 011.
*        ls_file_data-matnr                 = <fs_excel_data>-value.
*      WHEN 012.
*        REPLACE ALL OCCURRENCES OF REGEX '[^\d]' IN <fs_excel_data>-value WITH ''.
*        ls_file_data-ven_manu                 = <fs_excel_data>-value.
*      WHEN 013.
*        REPLACE ALL OCCURRENCES OF REGEX '[^\d]' IN <fs_excel_data>-value WITH ''.
*        ls_file_data-po_manual                = <fs_excel_data>-value.
*      WHEN 014.
*        REPLACE ALL OCCURRENCES OF REGEX '[^\d]' IN <fs_excel_data>-value WITH ''.
*        ls_file_data-vendor                   = <fs_excel_data>-value.
*      WHEN 015.
*        REPLACE ALL OCCURRENCES OF REGEX '[^\d]' IN <fs_excel_data>-value WITH ''.
*        ls_file_data-po                       = <fs_excel_data>-value.
      WHEN 011.
        ls_file_data-dev_loc                  = <fs_excel_data>-value.
      WHEN 012.
        ls_file_data-matnr                    = <fs_excel_data>-value.
      WHEN 013.
        ls_file_data-baujj                    = <fs_excel_data>-value.
      WHEN 014.
        ls_file_data-herst                    = <fs_excel_data>-value.
      WHEN 015.
        ls_file_data-typbz                    = <fs_excel_data>-value.
      WHEN 016.
        ls_file_data-serge                    = <fs_excel_data>-value.
      WHEN 017.
        CONCATENATE <fs_excel_data>-value+6(4)  <fs_excel_data>-value+3(2) <fs_excel_data>-value+0(2)   INTO <fs_excel_data>-value.
        ls_file_data-eadat                    = <fs_excel_data>-value.
      WHEN 018.
        ls_file_data-e_zwstand                = <fs_excel_data>-value.
*      WHEN 024.
*        ls_file_data-extra_po                 = <fs_excel_data>-value.
*      WHEN 025.
*        ls_file_data-extra_gi_po              = <fs_excel_data>-value.
*      WHEN 026.
*        ls_file_data-extra_gi_pi              = <fs_excel_data>-value.
      WHEN 019.
        ls_file_data-vol_corr_fa              = <fs_excel_data>-value.
*      WHEN 028.
*        ls_file_data-tf_no                    = <fs_excel_data>-value.
      WHEN 020.
        CONCATENATE <fs_excel_data>-value+6(4)  <fs_excel_data>-value+3(2) <fs_excel_data>-value+0(2)   INTO <fs_excel_data>-value.
        ls_file_data-conv_date                = <fs_excel_data>-value.
        ls_file_data-move_dt                  = <fs_excel_data>-value.
      WHEN 021.
        ls_file_data-move_read                = <fs_excel_data>-value.
*      WHEN 031.
*        ls_file_data-no_burner                = <fs_excel_data>-value.
*      WHEN 032.
*        IF <fs_excel_data>-value IS NOT INITIAL.
*          CONCATENATE <fs_excel_data>-value+6(4)  <fs_excel_data>-value+3(2) <fs_excel_data>-value+0(2)   INTO <fs_excel_data>-value.
*          ls_file_data-rubb_date                = <fs_excel_data>-value.
*        ENDIF.
*      WHEN 033.
*        ls_file_data-drs_loc                  = <fs_excel_data>-value.
*      WHEN 034.
*        ls_file_data-drs_no                   = <fs_excel_data>-value.
*      WHEN 035.
*        ls_file_data-loopno                   = <fs_excel_data>-value.
*      WHEN 020.
*        ls_file_data-srm_no                   = <fs_excel_data>-value.
*      WHEN 037.
*        ls_file_data-srm_cap                  = <fs_excel_data>-value.
*      WHEN 021.
*        ls_file_data-riser_iso                = <fs_excel_data>-value.
*      WHEN 022.
*        ls_file_data-pipe_conn                = <fs_excel_data>-value.
*      WHEN 023.
*        ls_file_data-pipe_conn_ri             = <fs_excel_data>-value.
*      WHEN 024.
*        ls_file_data-iso_inst                 = <fs_excel_data>-value.
*      WHEN 025.
*        ls_file_data-house_pipe               = <fs_excel_data>-value.
      WHEN 022.
        ls_file_data-remark                   = <fs_excel_data>-value.
    ENDCASE.

    IF sy-tabix EQ lv_line.
      APPEND  ls_file_data TO gt_outtab.
    ENDIF.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form update_sr
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM update_sr .

  CONSTANTS : lc_g TYPE char1 VALUE 'S'.
  DATA : lt_retune TYPE TABLE OF bapiret2.

  DATA : lv_new_conn    TYPE REF TO zcl_cm_utility,
*         lv_posting     TYPE REF TO zcl_fica_scheme_postings,
         lv_part        TYPE crmt_partner_no,
*         lv_guid        TYPE crmt_object_guid,
         iv_part_fc     TYPE comt_partner_fct,
         lv_code        TYPE crm_qcode,
         iv_cat_id      TYPE crm_erms_cat_as_id,
         lv_status      TYPE crm_j_status,
         iv_status_prof TYPE crm_j_stsma,
         lv_guid        TYPE crmt_object_guid,
         lv_sucess      TYPE char1,
         lv_reg_date    TYPE datum.

  DATA : lv_moveincndata  TYPE bapiisumoveincr_c,
         lv_movininput    TYPE bapiisumoveincr_i,
         lv_movedoc       TYPE bapiisumoveincr_i-moveindocnumber,
*        lt_retune        TYPE TABLE of BAPIRET2,
         lt_contractdata  TYPE TABLE OF bapiisucontract,
         lt_contractdatax TYPE TABLE OF bapiisucontractx,
         lt_meterread     TYPE TABLE OF bapieablu,
         la_meterread     TYPE bapieablu,
*         ls_cust_fields   TYPE zcs_adp_cust_fields,
         lv_total         TYPE zde_tot_amnt_nonup,
         lv_floc          TYPE tplnr. ",
*         it_table         TYPE zcs_pm_fpe1_mass_ty.


  CONSTANTS : lc_cat_id_ven  TYPE crm_erms_cat_as_id VALUE 'I2AP',
              lc_cat_id_plum TYPE crm_erms_cat_as_id VALUE 'C3EP', "'PLUMBING_METER_INSTALL_PENDING_4_DOM',
              lc_cat_id      TYPE crm_erms_cat_as_id VALUE 'I3CP', "'GAS_IN_CONVERSION_PENDING_6_DOM',
*              lc_cat_grund   TYPE crm_erms_cat_as_id VALUE 'D6GP' , "'GROUND CONNECTION PENDING_5_DOM',
*              lc_cat_mi      TYPE crm_erms_cat_as_id VALUE 'GAS_IN_CONVERSION_PENDING_6_DOM',
              lc_bis         TYPE biszeitsch VALUE '99991231'.
*              lc_INACT    TYPE CRM_J_INACT  VALUE abap_tr
  CLEAR : g_sec.


*  CREATE OBJECT lv_posting.


  DEFINE mig_status.
    lv_guid  = &1.
*    ls_cust_fields = &2.
    lv_status = &2.
    iv_status_prof = &3.
    lv_code = &4.
    iv_cat_id = &5.
    CALL METHOD lv_new_conn->status_change_ind
    EXPORTING
      iv_ref_guid    = ls_head-header_guid
*      iv_cust_fields = ls_cust_fields
      iv_status      = lv_status
      iv_status_prof = iv_status_prof
      iv_code        = lv_code
      iv_cat_id      = iv_cat_id
     IMPORTING
      ev_sucess      = lv_sucess.
  END-OF-DEFINITION.
  IF gt_outtab IS NOT INITIAL.


    CREATE OBJECT lv_new_conn.
*
*
    SELECT header_guid  , object_id , process_type , sold_to_party
      FROM crms4d_serv_h INTO TABLE @DATA(lt_header)
      FOR ALL ENTRIES IN @gt_outtab WHERE object_id = @gt_outtab-sr_request.

    IF lt_header IS NOT INITIAL.

      SELECT * FROM zcm_bp_data_i INTO TABLE @DATA(lt_dca) FOR ALL ENTRIES IN @lt_header WHERE bp_number = @lt_header-sold_to_party.
      SELECT object_id , number_int , sort , codegruppe , code  , cat_id FROM crms4d_srv_subj INTO TABLE @DATA(lt_sub) FOR ALL ENTRIES IN
             @lt_header WHERE object_id   = @lt_header-object_id.
      DELETE lt_sub WHERE number_int NE |000000| .
      DELETE lt_sub WHERE   code IS INITIAL.
      IF lt_dca IS NOT INITIAL.
        SELECT anlage , vstelle FROM eanl INTO TABLE @DATA(lt_eanl)  FOR ALL ENTRIES IN @lt_dca WHERE vstelle = @lt_dca-vstelle.
        SELECT ablbelnr,anlage, ablesgr, adatsoll FROM eablg INTO TABLE @DATA(lt_eablg) FOR ALL ENTRIES IN @lt_eanl WHERE anlage = @lt_eanl-anlage AND ( ablesgr = '21' OR ablesgr = '22' ).
        SORT lt_eablg BY adatsoll anlage ablbelnr DESCENDING.
        SELECT * FROM zcm_group_ca INTO TABLE @DATA(lt_grp_ca) FOR ALL ENTRIES IN @lt_dca WHERE bp_type = @lt_dca-bp_kind . "AND bp_grouping = @lt_dca-ga_code.
*          if lt_ean,,l is NOT INITIAL.
        SELECT vstelle , haus  FROM evbs INTO  TABLE @DATA(lt_evbs) FOR ALL ENTRIES IN @lt_eanl WHERE vstelle = @lt_eanl-vstelle.

        SELECT tplnr , fltyp , tplma FROM iflot INTO TABLE @DATA(lt_iflot) FOR ALL ENTRIES IN @lt_evbs WHERE tplma EQ @lt_evbs-haus AND fltyp EQ @lc_g.
        IF lt_iflot IS NOT INITIAL.
          SELECT equnr , bis , devloc , amcg_cap_grp FROM egerh INTO TABLE @DATA(lt_egerh) FOR ALL ENTRIES IN @lt_iflot WHERE bis = @lc_bis AND devloc = @lt_iflot-tplnr.

          IF lt_egerh IS NOT INITIAL.
            SELECT equnr , matnr , serge FROM equi INTO TABLE @DATA(lt_msn) FOR ALL ENTRIES IN @lt_egerh WHERE equnr = @lt_egerh-equnr.

          ENDIF.
        ENDIF.

        SELECT vkont , vktyp FROM fkkvk INTO TABLE @DATA(lt_fkkvk) FOR ALL ENTRIES IN @lt_dca WHERE vkont = @lt_dca-vkont.
        SELECT vkont , bupla , gsber  FROM fkkvkp INTO TABLE @DATA(lt_fkkvkp) FOR ALL ENTRIES IN @lt_dca WHERE vkont = @lt_dca-vkont.
        SELECT partner , bu_group FROM but000 INTO TABLE @DATA(lt_but000) FOR ALL ENTRIES IN @lt_dca WHERE partner = @lt_dca-bp_number.
        SELECT stand, ktext FROM t499s INTO TABLE @DATA(lt_t499s) FOR ALL ENTRIES IN @gt_outtab WHERE ktext =  @gt_outtab-dev_loc.

        SELECT * FROM crmc_erms_cat_ca INTO TABLE @DATA(lt_cat) .
        SELECT * FROM crmc_erms_cat_hi INTO TABLE @DATA(lt_cat_hi) .
        SELECT * FROM crmc_erms_cat_cd INTO TABLE @DATA(lt_cat_dis) .
*        SELECT * FROM zcm_status_map INTO TABLE @DATA(lt_status_map).

*        SELECT * FROM crmv_erms_cat_ca INTO TABLE @DATA(lt_cat_dis) WHERE lang = 'E' AND asp_id = 'AGP_DOM_NEWCONN'.
*        SELECT * FROM zisu_mru_det INTO TABLE @DATA(lt_isu_mru).
*        SELECT * FROM zscheme_sd_ip1 INTO TABLE @DATA(lt_scheme) .
        SELECT * FROM crmc_qpct INTO TABLE @DATA(it_code_grp) WHERE katalogart = 'ZS' AND codegruppe = 'AGCLINNC'.
*        SELECT * FROM zdma_po_assign INTO TABLE @DATA(lt_po_assign) FOR ALL ENTRIES IN @gt_outtab WHERE plant = @gt_outtab-plant.
*>Start of C1
*        IF gt_outtab IS NOT INITIAL.
*          SELECT * FROM ekko INTO TABLE @DATA(lt_ekko) FOR ALL ENTRIES IN @gt_outtab WHERE ebeln = @gt_outtab-po."_manual.
*          "AND KDATB <=  sy-datum AND KDATE >= sy-datum.
*          IF sy-subrc = 0.
*            SORT lt_ekko BY ebeln.
*          ENDIF.
*        ENDIF.
*<End of C1
        SELECT  vertrag , anlage , vkonto FROM ever INTO TABLE @DATA(lt_ever) FOR ALL ENTRIES IN @lt_dca WHERE anlage = @lt_dca-anlage
                                                                                                               AND auszdat EQ @lc_bis.
*        SELECT * FROM zfica_rate_dom INTO TABLE @DATA(lt_fica_rate) .
*        DELETE lt_fica_rate WHERE to_date LT sy-datum.
*         SELECT LIFNR FROM LFA1 INTO TABLE @DATA(lt_LFA1) FOR ALL ENTRIES IN
      ENDIF.
*      CREATE OBJECT lv_new_conn.
      LOOP AT  gt_outtab ASSIGNING FIELD-SYMBOL(<fs_output>).
        CLEAR : la_meterread,lv_moveincndata,lv_movininput,lv_movedoc,lv_code,lv_guid,lv_status,iv_status_prof,lv_code,iv_cat_id,lv_sucess,lv_floc."ls_cust_fields.
        lv_poinv_flag = abap_false."Siva-S4DK907687- 24-05-2023
        REFRESH : lt_meterread,lt_retune,lt_contractdata,lt_contractdatax,lt_meterread.

*        IF <fs_output>-extra_po GT 1.
*          <fs_output>-remark = |Extra kitchen is greater than 1|.
*          CONTINUE.
*        ENDIF.
*
*        IF <fs_output>-extra_gi_po GT 2.
*          <fs_output>-remark = |Extra Geyser is greater than 2|.
*          CONTINUE.
*        ENDIF.
        TRANSLATE <fs_output>-sub_status TO UPPER CASE .
        IF line_exists( it_code_grp[ code = <fs_output>-sub_status ] ).
          DATA(la_cpde_grp) =  it_code_grp[ code = <fs_output>-sub_status ].
          TRANSLATE la_cpde_grp-kurztext TO UPPER CASE.
          IF line_exists( lt_cat[ cat_id = la_cpde_grp-kurztext ] ).
            DATA(la_cat)       =  lt_cat[ cat_id = la_cpde_grp-kurztext ].
            IF line_exists( lt_cat_dis[ cat_guid = la_cat-cat_guid ] ).
              DATA(la_cat_dis)   =  lt_cat_dis[ cat_guid = la_cat-cat_guid ].
*              la_outtab-sub_status     = la_cat_dis-cat_label.
              <fs_output>-sub_status = la_cat_dis-cat_label.
            ENDIF.
          ENDIF.
*          IF line_exists( lt_cat_dis[ cat_id = la_cpde_grp-kurztext ] ).
*            DATA(la_cat_dis) =  lt_cat_dis[ cat_id = la_cpde_grp-kurztext ].
*            <fs_output>-sub_status = la_cat_dis-cat_label.
*          ENDIF.

        ELSE.
          <fs_output>-remark = |Invalid status|.
          CONTINUE.
        ENDIF.

        TRANSLATE <fs_output>-sub_status TO UPPER CASE.
        CONDENSE <fs_output>-sub_status NO-GAPS.
        IF line_exists( lt_header[ object_id = <fs_output>-sr_request ] ).
          DATA(ls_head) = lt_header[ object_id = <fs_output>-sr_request ].
          IF line_exists( lt_dca[ bp_number = ls_head-sold_to_party ] ).
            DATA(ls_dca) = lt_dca[ bp_number = ls_head-sold_to_party  ].
            IF line_exists( lt_ever[ anlage = ls_dca-anlage ] ).
              <fs_output>-remark = |Move in already exists |.
              CONTINUE.
            ENDIF.
*            CONCATENATE ls_dca-reg_date_no+6(4) ls_dca-reg_date_no+3(2) ls_dca-reg_date_no+0(2) INTO lv_reg_date.
*            IF ls_dca-ga_code EQ 'CVK'.
*              IF line_exists( lt_grp_ca[ pngrb_ga_code = ls_dca-ga_code  pngrb_district = ls_dca-pngrb_dist ] ).
*                DATA(ls_ca_grp) = lt_grp_ca[ pngrb_ga_code = ls_dca-ga_code  pngrb_district = ls_dca-pngrb_dist ].
*                lv_new_conn->gs_gc_code = ls_ca_grp.
*              ENDIF.
*            ELSE.
*              IF line_exists( lt_grp_ca[ pngrb_ga_code = ls_dca-ga_code  ] ).
*                ls_ca_grp = lt_grp_ca[ pngrb_ga_code = ls_dca-ga_code  ].
*                lv_new_conn->gs_gc_code = ls_ca_grp.
*              ENDIF.
*            ENDIF.
            lv_new_conn->gt_cm_bp_data_i = ls_dca.

*            IF line_exists( lt_isu_mru[ ga_code = ls_dca-ga_code ] ).
*              DATA(ls_isu) = lt_isu_mru[ ga_code = ls_dca-ga_code ].
*            ENDIF.
*
*            IF line_exists( lt_scheme[ cust_cl = ls_dca-dma_scheme ] ).
*              DATA(la_scheme) = lt_scheme[ cust_cl = ls_dca-dma_scheme ].
*
*            ENDIF.

            IF line_exists( lt_sub[ object_id = <fs_output>-sr_request ] ).
              DATA(la_sub)       =  lt_sub[ object_id = <fs_output>-sr_request ].
              IF line_exists( lt_cat[ cat_id = la_sub-cat_id ] ).
                la_cat       =  lt_cat[ cat_id = la_sub-cat_id ].
                IF line_exists( lt_cat_dis[ cat_guid = la_cat-cat_guid ] ).
                  la_cat_dis   =  lt_cat_dis[ cat_guid = la_cat-cat_guid ].
                  la_outtab-sub_status     = la_cat_dis-cat_label.
                  DATA(la_cat_hi)       =  lt_cat_hi[ node_guid = la_cat-cat_guid ].
                  IF line_exists( lt_cat_dis[ cat_guid = la_cat_hi-pare_guid ] ).
                    DATA(la_cat_dis_pi)   =  lt_cat_dis[ cat_guid = la_cat_hi-pare_guid ].
                    la_outtab-status     =   la_cat_dis_pi-cat_label.
                    CONDENSE la_outtab-status NO-GAPS.
                    TRANSLATE la_outtab-status TO UPPER CASE.
                  ENDIF.
                ENDIF.
              ENDIF.
            ENDIF.
            IF   la_outtab-status EQ |APPROVALS|.
              CASE <fs_output>-sub_status .

                WHEN 'I2EX' .
                  lv_code         = |I2EX| . "|NF3D|.
                  iv_cat_id       = |I2EX| . "|AFT_SOM_TIME_6_DOM|.
                  lv_status       = |E0002|.
                  iv_status_prof  = |ZNCSTATU|.

                  mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.

                  IF lv_sucess IS NOT INITIAL.
                    <fs_output>-remark = TEXT-003.
                    <fs_output>-sub_status = 'Approval Pedning External'.
                  ENDIF.

                WHEN 'I2IN' .
                  lv_code         = |I2IN| . "|NF3D|.
                  iv_cat_id       = |I2IN| . "|AFT_SOM_TIME_6_DOM|.
                  lv_status       = |E0002|.
                  iv_status_prof  = |ZNCSTATU|.

                  mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.

                  IF lv_sucess IS NOT INITIAL.
                    <fs_output>-remark = TEXT-003.
                    <fs_output>-sub_status = 'Approval Pedning Internal'.
                  ENDIF.

                WHEN 'I2MD' .
                  lv_code         = |I2MD| . "|NF3D|.
                  iv_cat_id       = |I2MD| . "|AFT_SOM_TIME_6_DOM|.
                  lv_status       = |E0002|.
                  iv_status_prof  = |ZNCSTATU|.

                  mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.

                  IF lv_sucess IS NOT INITIAL.
                    <fs_output>-remark = TEXT-003.
                    <fs_output>-sub_status = 'Approval sent to MD by HOD'.
                  ENDIF.

                WHEN 'I2HD' .
                  lv_code         = |I2HD| . "|NF3D|.
                  iv_cat_id       = |I2HD| . "|AFT_SOM_TIME_6_DOM|.
                  lv_status       = |E0002|.
                  iv_status_prof  = |ZNCSTATU|.

                  mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.

                  IF lv_sucess IS NOT INITIAL.
                    <fs_output>-remark = TEXT-003.
                    <fs_output>-sub_status = 'Approved by MD'.
                  ENDIF.

                WHEN 'I2PC' .
                  lv_code         = |I2PC| . "|NF3D|.
                  iv_cat_id       = |I2PC| . "|AFT_SOM_TIME_6_DOM|.
                  lv_status       = |E0002|.
                  iv_status_prof  = |ZNCSTATU|.

                  mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.

                  IF lv_sucess IS NOT INITIAL.
                    <fs_output>-remark = TEXT-003.
                    <fs_output>-sub_status = 'Proposal shared with customer'.
                  ENDIF.

                WHEN 'I2CA' .
                  lv_code         = |I2CA| . "|NF3D|.
                  iv_cat_id       = |I2CA| . "|AFT_SOM_TIME_6_DOM|.
                  lv_status       = |E0002|.
                  iv_status_prof  = |ZNCSTATU|.

                  mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.

                  IF lv_sucess IS NOT INITIAL.
                    <fs_output>-remark = TEXT-003.
                    <fs_output>-sub_status = 'Customer Accepted The Proposal & agreement Signed'.
                  ENDIF.

                WHEN 'I2CR' .
                  lv_code         = |I2CR| . "|NF3D|.
                  iv_cat_id       = |I2CR| . "|AFT_SOM_TIME_6_DOM|.
                  lv_status       = |E0002|.
                  iv_status_prof  = |ZNCSTATU|.

                  mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.

                  IF lv_sucess IS NOT INITIAL.
                    <fs_output>-remark = TEXT-003.
                    <fs_output>-sub_status = 'Customer Rejected the Proposal'.
                  ENDIF.

                WHEN 'I2RW' .
                  lv_code         = |I2RW| . "|NF3D|.
                  iv_cat_id       = |I2RW| . "|AFT_SOM_TIME_6_DOM|.
                  lv_status       = |E0002|.
                  iv_status_prof  = |ZNCSTATU|.

                  mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.

                  IF lv_sucess IS NOT INITIAL.
                    <fs_output>-remark = TEXT-003.
                    <fs_output>-sub_status = 'Right of Way clearance Done'.
                  ENDIF.
                WHEN 'I2SA' .
                  lv_code         = |I2SA| . "|NF3D|.
                  iv_cat_id       = |I2SA| . "|AFT_SOM_TIME_6_DOM|.
                  lv_status       = |E0002|.
                  iv_status_prof  = |ZNCSTATU|.

                  mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.

                  IF lv_sucess IS NOT INITIAL.
                    <fs_output>-remark = TEXT-003.
                    <fs_output>-sub_status = 'Applied for Statuory Authority'.
                  ENDIF.

                WHEN 'I2PL' .
                  lv_code         = |I2PL| . "|NF3D|.
                  iv_cat_id       = |I2PL| . "|AFT_SOM_TIME_6_DOM|.
                  lv_status       = |E0002|.
                  iv_status_prof  = |ZNCSTATU|.

                  mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.

                  IF lv_sucess IS NOT INITIAL.
                    <fs_output>-remark = TEXT-003.
                    <fs_output>-sub_status = 'Received permission letter'.
                  ENDIF.

                WHEN 'I2CO' .
                  lv_code         = |I2CO| . "|NF3D|.
                  iv_cat_id       = |I2CO| . "|AFT_SOM_TIME_6_DOM|.
                  lv_status       = |E0002|.
                  iv_status_prof  = |ZNCSTATU|.

                  mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.

                  IF lv_sucess IS NOT INITIAL.
                    <fs_output>-remark = TEXT-003.
                   <fs_output>-sub_status = 'Proposal for the engagement for the contractor to finance bidding'.
                  ENDIF.


                WHEN 'I2AM' OR 'I2BC'.
*               ***********                  Conncetion object create**********************************
                  IF ls_dca-vstelle IS INITIAL.
                    CALL METHOD lv_new_conn->create_premise_connection_i
                      EXPORTING
                        iv_partner = ls_dca-bp_number
                      IMPORTING
                        ev_premise = DATA(iv_premise).
                  ELSE.
                    iv_premise = ls_dca-vstelle.
                  ENDIF.
                  IF iv_premise IS NOT INITIAL .
                    IF ls_dca-anlage IS INITIAL.

                      DATA(ls_but000_p) = lt_but000[ partner = ls_dca-bp_number ].

*                      SELECT SINGLE mru INTO @DATA(lv_mru) FROM zagcl_networks
*                        WHERE bp_grouping = @ls_but000_p-bu_group AND
*                        bp_type  = @ls_dca-bp_kind AND
*                              ward_no = @ls_dca-ward_no.

                      CALL METHOD lv_new_conn->create_installation_i
                        EXPORTING
                          iv_premise     = iv_premise
                          iv_bp_grouping = ls_but000_p-bu_group
                          iv_bp_type     = ls_dca-bp_kind
                          iv_ward_no     = '1' "ls_dca-ward_no'
*                         iv_mru         = lv_mru
                        IMPORTING
                          ev_inst        = DATA(iv_inst).
                    ELSE.
                      iv_inst = ls_dca-anlage.
                    ENDIF.
                    IF iv_inst IS NOT INITIAL.
***********                  Connection object create********************************
****************                  SR staus change**********************************
                      lv_code =  |I3CP|. "|PM4D|.
                      iv_cat_id = |I3CP| . "|PLUMBING_METER_INSTALL_PENDING_4_DOM|.
                      lv_status       = |E0002|.
                      iv_status_prof  = |ZNCSTATU|.
                      mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.
*****************                  SR status change********************************
*---Begin of change -Siva-S4DK907687- 24-05-2023
                      IF lv_poinv_flag = abap_true AND lv_sucess IS NOT INITIAL.
                        DATA(lv_po_validity_msg_tf) = <fs_output>-remark.
                        CLEAR <fs_output>-remark.
                        CONCATENATE   TEXT-003 lv_po_validity_msg_tf INTO <fs_output>-remark SEPARATED BY space.
                      ELSEIF lv_sucess IS NOT INITIAL.
*                      IF lv_sucess IS NOT INITIAL.
*---End of change -Siva-S4DK907687- 24-05-2023
*                        <fs_output>-remark = TEXT-003.
                        CONCATENATE <fs_output>-remark  TEXT-003   ' with Instaltion no - ' iv_inst INTO <fs_output>-remark.

                         IF <fs_output>-sub_status = 'I2AM'.
                            <fs_output>-sub_status = 'Approved by MD'.
                          ELSE.
                            <fs_output>-sub_status = 'I2BC'.
                            <fs_output>-sub_status = 'Approved by Purchase Committee / Board'.
                          ENDIF.

                      ENDIF.
                    ELSE.
                      <fs_output>-remark = TEXT-005.
                    ENDIF.
                  ELSE.
                    <fs_output>-remark = TEXT-004.
                  ENDIF.

                WHEN 'I2AC' .
                  lv_code         = |I2AC| . "|NF3D|.
                  iv_cat_id       = |I2AC| . "|AFT_SOM_TIME_6_DOM|.
                  lv_status       = |E0002|.
                  iv_status_prof  = |ZNCSTATU|.

                  mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.

                  IF lv_sucess IS NOT INITIAL.
                    <fs_output>-remark = TEXT-003.
                     <fs_output>-sub_status = 'Award of Contract'.
                  ENDIF.
*
                WHEN  OTHERS.
                  <fs_output>-remark = TEXT-006.
              ENDCASE.

            ELSEIF la_outtab-status EQ |COMMISSIONING|.  "line_exists( lt_sub[ object_id = <fs_output>-sr_request  cat_id       = lc_cat_id_plum ] ).
              CASE <fs_output>-sub_status .

                WHEN 'I3PT' .
                  lv_code         = |I3PT| . "|NF3D|.
                  iv_cat_id         = |I3PT| . "|AFT_SOM_TIME_6_DOM|.
                  lv_status       = |E0002|.
                  iv_status_prof  = |ZNCSTATU|.

                  mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.

                  IF lv_sucess IS NOT INITIAL.
                    <fs_output>-remark = TEXT-003.
                     <fs_output>-sub_status = 'Pressure test report done'.
                  ENDIF.


                WHEN 'I3MI'." OR 'METERINSTALLED(AREANOTCHARGED/AIRRFC)'.   " D4MI At CRM Level
                  IF line_exists( lt_t499s[ ktext = <fs_output>-dev_loc ] ).
                    DATA(la_t499s) = lt_t499s[ ktext = <fs_output>-dev_loc ].
                  ENDIF.
                  IF ls_dca-bp_kind IS INITIAL.
                    ls_dca-bp_kind =  |ZIND|.
                  ENDIF.

                  IF line_exists( lt_evbs[ vstelle = ls_dca-vstelle ] ).
                    DATA(ls_evbs) = lt_evbs[ vstelle = ls_dca-vstelle ].
                    IF line_exists( lt_iflot[ tplma = ls_evbs-haus ] ).
                      DATA(ls_iflot) = lt_iflot[ tplma = ls_evbs-haus ].
                      IF line_exists( lt_egerh[ devloc = ls_iflot-tplnr ] ).
                        DATA(ls_egerh) = lt_egerh[ devloc = ls_iflot-tplnr ].
                        <fs_output>-remark = |Device already exists|.
                        CONTINUE.
                      ENDIF.
                    ENDIF.
                  ENDIF.

* Begin of to check 4 decimal digits
                  DATA: l_length_dig TYPE i.
                  DATA: lv_flag4   TYPE c,
                        lv_4digits TYPE c VALUE '4'.

                  DATA: lv_meteread  TYPE p LENGTH 10 DECIMALS 3,
                        lv_charfield TYPE cha_class_view-sollwert,
                        lv_digits    TYPE cha_class_data-stellen,
                        lv_char21    TYPE cha_class_data-sollwert,
                        lv_var1      TYPE char5,
                        lv_var2      TYPE char5,
                        l_length     TYPE char5.

                  CLEAR: lv_meteread ,
                         lv_flag4,
                         lv_charfield,
                         lv_4digits,
                         lv_digits   ,
                         lv_char21   ,
                         lv_var1     ,
                         lv_var2     .

                  SPLIT <fs_output>-e_zwstand AT '.' INTO lv_var1 lv_var2 .
                  l_length_dig = strlen(  lv_var2 ).
*                  CONDENSE l_length_dig.
                  IF l_length_dig GT 3.
                    <fs_output>-remark = 'Please Check the input Meter Reading'.
                    CONDENSE <fs_output>-remark.
                    CONTINUE.
                  ENDIF.

                  iv_meterread = <fs_output>-e_zwstand.
                  CLEAR: <fs_output>-e_zwstand.
                  <fs_output>-e_zwstand = iv_meterread.
                  CONDENSE <fs_output>-e_zwstand NO-GAPS.

                  CALL FUNCTION 'ZISU_DM_DEV_CREATE_INSTL'
                    EXPORTING
                      i_bpkind    = ls_dca-bp_kind
                      i_city2     = ls_dca-district "ls_dca-district
                      i_anlage    = ls_dca-anlage
                      i_matnr     = <fs_output>-matnr
                      i_msn       = <fs_output>-serge
                      i_datab     = <fs_output>-eadat           "valid_from
                      i_herst     = <fs_output>-herst
                      i_typbz     = <fs_output>-typbz
                      i_baujj     = <fs_output>-baujj
                      i_eadat     = <fs_output>-eadat
                      i_e_zwstand = <fs_output>-e_zwstand
                      i_pmloc     = la_t499s-stand
                      i_vcf       = <fs_output>-vol_corr_fa
                    TABLES
                      et_return   = lt_retune.

                  IF line_exists( lt_retune[ type = |E| ] ).  "gsp
                    DATA(la_remarks) = lt_retune[ type = |E| ] .
                    <fs_output>-remark = la_remarks-message.
                    CONTINUE.
                  ELSE.
                    IF line_exists( lt_retune[ type = |I| ] ).  "gsp
                      DATA(la_remarks1) = lt_retune[ type = |I| ] . "gsp
                      IF la_remarks1-message EQ |Entries for date and year are not consistent|.
                        <fs_output>-remark = 'Device installation failed due to invalid date'.
                        CLEAR la_remarks1.
                        CONTINUE.
                      ENDIF.
                    ENDIF.
*                    ENDIF.
                  ENDIF.
                  CLEAR : la_t499s.

                  IF line_exists( lt_retune[ type = |S| ] ).  "gsp
                    la_remarks1 = lt_retune[ type = |S| ] .
                    lv_code =  |I3MI|. "|PM4D|.
                    iv_cat_id = |I3MI| . "|PLUMBING_METER_INSTALL_PENDING_4_DOM|.
                    lv_status       = |E0002|.
                    iv_status_prof  = |ZNCSTATU|.
                    mig_status ls_head-header_guid lv_status iv_status_prof lv_code iv_cat_id.

                    IF lv_sucess IS NOT INITIAL.

                      <fs_output>-remark = TEXT-003.
                       <fs_output>-sub_status = 'Meter Installation Done'.
                    ENDIF.
                  ENDIF.

                WHEN 'I3CM'.
                  IF line_exists( lt_fkkvk[ vkont = ls_dca-vkont ] ).
                    DATA(ls_fkkvk) = lt_fkkvk[ vkont = ls_dca-vkont ].
                    DATA(ls_fkkvkp) = lt_fkkvkp[ vkont = ls_dca-vkont ].
                    DATA(ls_but000) = lt_but000[ partner = ls_dca-bp_number ].
                  ENDIF.

                  lv_movininput-moveindate = <fs_output>-conv_date.
                  lv_movininput-partner    = <fs_output>-partner.
                  lv_movininput-partnergroup = ls_but000-bu_group .
                  lv_movininput-partnercategory = |1|.
                  lv_movininput-cont_acct       = ls_dca-vkont.
                  lv_movininput-acct_cat        = ls_fkkvk-vktyp.
                  APPEND INITIAL LINE TO lt_contractdata ASSIGNING FIELD-SYMBOL(<fs_contdata>).
                  <fs_contdata>-installation  = ls_dca-anlage.
                  <fs_contdata>-bus_area      = ls_fkkvkp-gsber.
                  <fs_contdata>-bupla         = ls_fkkvkp-bupla.
                  <fs_contdata>-joint_invoice         = '3'.
                  CONCATENATE 'Contract for BP' <fs_output>-partner INTO <fs_contdata>-contr_txt SEPARATED BY space.
                  APPEND INITIAL LINE TO lt_contractdatax ASSIGNING FIELD-SYMBOL(<fs_contdatax>).
                  <fs_contdatax>-installation  = abap_true.
                  <fs_contdatax>-bus_area      = abap_true.
                  <fs_contdatax>-bupla      = abap_true.
                  <fs_contdatax>-joint_invoice      = abap_true.


                  <fs_contdatax>-contr_txt  =  abap_true.

                  IF line_exists( lt_eablg[ anlage = ls_dca-anlage ] ).
                    DATA(ls_eablg) = lt_eablg[ anlage = ls_dca-anlage ]."and ( ablesgr = '21' ) ]." or ablesgr = '22' ) ].
*                     IF ls_eablg IS INITIAL.
*                        IF ls_eablg-ablesgr = '' OR
                    IF ls_eablg-ablesgr = '22'.
                      <fs_output>-remark = |Device is not installed, hence cannot perform Move-In|.
                      CONTINUE.
                    ENDIF.
                  ELSE.
                    <fs_output>-remark = |Device is not installed, hence cannot perform Move-In|.
                    CONTINUE.
                  ENDIF.



*                  Changes for validation of device installation check during Move-In "End

*                  IF <fs_output>-po NE ls_head-zz1_ponumber_srh AND   <fs_output>-vendor NE ls_head-zz1_vendornumber_srh.
*                    ls_cust_fields-zz1_ponumber_srh =    <fs_output>-po .
*                    ls_cust_fields-zz1_vendornumber_srh =    <fs_output>-vendor .
*                  ENDIF.
*                  ls_cust_fields-zz1_conversiondate_srh =    <fs_output>-conv_date .
*                  ls_cust_fields-zz1_srmno_srh =    <fs_output>-srm_no .
*                  ls_cust_fields-zz1_srmcapacity_srh =    <fs_output>-srm_cap.
                  DATA: lv_move_read TYPE p LENGTH 10 DECIMALS 3.

*
                  SPLIT <fs_output>-move_read AT '.' INTO lv_var1 lv_var2 .
                  l_length_dig = strlen(  lv_var2 ).

                  IF l_length_dig GT 3.
                    <fs_output>-remark = 'Please Check the input Meter Reading'.
                    CONDENSE <fs_output>-remark.
                    CONTINUE.  ""
                  ENDIF.

                  lv_move_read = <fs_output>-move_read.
                  <fs_output>-move_read = lv_move_read.
                  CONDENSE <fs_output>-move_read NO-GAPS.

*                  ls_cust_fields-zz1_moveinread_srh = <fs_output>-move_read.

                  IF line_exists( lt_evbs[ vstelle = ls_dca-vstelle ] ).
                    ls_evbs = lt_evbs[ vstelle = ls_dca-vstelle ].
                    IF line_exists( lt_iflot[ tplma = ls_evbs-haus ] ).
                      ls_iflot = lt_iflot[ tplma = ls_evbs-haus ].
                      IF line_exists( lt_egerh[ devloc = ls_iflot-tplnr ] ).
                        ls_egerh = lt_egerh[ devloc = ls_iflot-tplnr ].
                        IF line_exists( lt_msn[ equnr = ls_egerh-equnr ] ).
                          DATA(ls_msn) = lt_msn[ equnr = ls_egerh-equnr ].
                          la_meterread-material    =     ls_msn-matnr.
                          la_meterread-serialno    =     ls_msn-equnr.
                          la_meterread-register    =     |001|.
                          la_meterread-mrreason    =     |06|.
                          la_meterread-actualmrdate =    <fs_output>-conv_date.
                          la_meterread-readingresult =   <fs_output>-move_read.
                          APPEND la_meterread TO lt_meterread.
                        ENDIF.
                      ENDIF.
                    ENDIF.
                  ENDIF.
*                  IF <fs_output>-srm_no  IS NOT INITIAL.
*                    IF <fs_output>-riser_iso IS NOT INITIAL
*                     AND <fs_output>-pipe_conn IS NOT INITIAL
*                     AND <fs_output>-iso_inst IS NOT INITIAL
*                     AND <fs_output>-pipe_conn_ri IS NOT INITIAL
*                     AND <fs_output>-house_pipe IS NOT INITIAL .
*
*                      CONCATENATE '%' <fs_output>-srm_no '%' INTO DATA(iv_srm).
*                      SELECT tplnr FROM iflotx INTO  TABLE @DATA(lt_supfloc) WHERE pltxu LIKE @iv_srm.
*                      IF lt_supfloc IS NOT INITIAL.
*                        SELECT  tplnr FROM iflot INTO TABLE @DATA(lt_sup) FOR ALL ENTRIES IN @lt_supfloc WHERE tplnr = @lt_supfloc-tplnr AND
*                               iwerk = @ls_ca_grp-plant.
*                        IF lt_sup IS NOT INITIAL.
*                          DATA(ls_sup) = lt_sup[ 1 ].
*                          lv_floc = ls_sup-tplnr.
*                        ENDIF.
*                      ENDIF.
*                      REFRESH : lt_supfloc,lt_sup.
*                      CLEAR : ls_sup,iv_srm.
*
*                      IF lv_floc IS INITIAL.
*                        <fs_output>-remark  = |Invalid SRM Number|.
*                        CONTINUE.
*                      ENDIF.

                  CALL FUNCTION 'BAPI_ISUMOVEIN_CREATEFROMDATA'
                    EXPORTING
                      moveincreatecontroldata = lv_moveincndata
                      moveincreateinputdata   = lv_movininput
                    IMPORTING
                      moveindocnumber         = lv_movedoc
                    TABLES
                      treturn                 = lt_retune
                      tcontractdata           = lt_contractdata
                      tcontractdatax          = lt_contractdatax
                      tmeterreadingresults    = lt_meterread.

                  IF lv_movedoc IS NOT INITIAL.
                    <fs_output>-remark  = |Move in created|.
                     <fs_output>-sub_status = 'Commissioning Done'.
                    CALL METHOD lv_new_conn->change_conn_inst_change_ind
                      EXPORTING
                        lv_anlage       = ls_dca-anlage
                        lv_move_in_date = lv_movininput-moveindate
                        lv_haus         = ls_dca-haus
                        iv_srm          = lv_floc
                        lv_distri       = ls_dca-nodistri.
*                       iv_cust_cl      = la_scheme-cust_cl.
**                        lv_total   = ls_dca-amt_paid_pymt1.
*
*
*                        CALL METHOD lv_posting->post_at_movein
*                          EXPORTING
*                       im_gpart        = <fs_output>-partner
*                       im_vkont        = ls_dca-vkont
*                       im_customer_class = ls_dca-dma_scheme
*                       im_scheme_name  = la_scheme-scheme_name
**                           im_register_date  = lv_reg_date
*                       im_moveindate   = sy-datum "lv_movininput-moveindate
*                          IMPORTING
*                       ex_return       = DATA(lv_ret).
*
*                        CALL METHOD lv_new_conn->move_in_letter
*                          EXPORTING
*                       lv_partner      = <fs_output>-partner
*                       lv_vkont        = ls_dca-vkont
*                       lv_move_doc     = lv_movedoc
*                       lv_move_in_date = lv_movininput-moveindate.
*************************************EXTRA KITCHEN POINT UPTO 5 MET***************************
*                       DATA(lo_obj)    = NEW zcl_fica_pm_crm_charges( ).
*                        IF <fs_output>-extra_gi_po GT 0.
*
*                          IF line_exists( lt_fica_rate[ txt30 = |GAS GEYSER POINT UPTO 10M DR| ] ).
*                       DATA(la_fica_rate) = lt_fica_rate[ txt30 = |GAS GEYSER POINT UPTO 10M DR| ].
*                            IF  la_fica_rate-rate GT 0.
*                              APPEND INITIAL LINE TO it_table ASSIGNING FIELD-SYMBOL(<fs_ficatable>).
*                       <fs_ficatable>-partner = <fs_output>-partner.
*                       <fs_ficatable>-vkont   = ls_dca-vkont.
*                       <fs_ficatable>-xblnr   = ls_dca-sr_number.
*                       <fs_ficatable>-hvorg   = la_fica_rate-hvorg.
*                       <fs_ficatable>-tvorg    = la_fica_rate-tvorg.
*                       <fs_ficatable>-amount      = la_fica_rate-rate.
*                            ENDIF.
*
**                            DATA(lo_obj) = NEW zcl_fica_pm_crm_charges( ).
*
*
**                            CALL METHOD lo_obj->post_fpe1
**                              EXPORTING
**                                im_partner = CONV bu_partner( <fs_output>-partner )
**                                im_vkont   = CONV vkont_kk( ls_dca-vkont )
**                                im_xblnr   = CONV xblnr_kk( ls_dca-sr_number )
**                                im_amt     = CONV betrw_kk( la_fica_rate-rate )
**                                im_hvorg   = CONV hvorg_kk( la_fica_rate-hvorg )
**                                im_tvorg   = CONV tvorg_kk( la_fica_rate-tvorg ).
*                          ENDIF.
*                        ENDIF.
***********************************EXTRA KITCHEN POINT UPTO 5 MET***********************
*
*                        IF <fs_output>-extra_po GT 0.
*                          CLEAR : la_fica_rate.
*
*                          IF line_exists( lt_fica_rate[ txt30 = |EXTRA KITCHEN POINT UPTO 5 MET| ] ).
*                       la_fica_rate    = lt_fica_rate[ txt30 = |EXTRA KITCHEN POINT UPTO 5 MET| ].
*
**                            CALL METHOD lv_posting->post_fpe1
**                              EXPORTING
**                                im_gpart        = <fs_output>-partner
**                                im_vkont        = <fs_output>-ca
**                                im_hvorg        =
**                                im_tvorg        =
**                                im_amount       =
***                              IMPORTING
***                                ex_manual_docno =
***                                ex_return       =
*                            .
*
*                            IF la_fica_rate-rate GT 0.
*                              APPEND INITIAL LINE TO it_table ASSIGNING <fs_ficatable>.
*                       <fs_ficatable>-partner = <fs_output>-partner.
*                       <fs_ficatable>-vkont   = ls_dca-vkont.
*                       <fs_ficatable>-xblnr   = ls_dca-sr_number.
*                       <fs_ficatable>-hvorg   = la_fica_rate-hvorg.
*                       <fs_ficatable>-tvorg    = la_fica_rate-tvorg.
*                       <fs_ficatable>-amount      = la_fica_rate-rate.
*                            ENDIF.
*
**                            CALL METHOD lo_obj->post_fpe1
**                              EXPORTING
**                                im_partner = CONV bu_partner( <fs_output>-partner )
**                                im_vkont   = CONV vkont_kk( ls_dca-vkont )
**                                im_xblnr   = CONV xblnr_kk( ls_dca-sr_number )
**                                im_amt     = CONV betrw_kk( la_fica_rate-rate )
**                                im_hvorg   = CONV hvorg_kk( la_fica_rate-hvorg )
**                                im_tvorg   = CONV tvorg_kk( la_fica_rate-tvorg ).
*                          ENDIF.
*                        ENDIF.
***********************************EXTRA GI PIPE CHG PER METER DR***********************
**
*
*                        IF <fs_output>-extra_gi_pi GT 0.
*                          CLEAR : la_fica_rate.
*
*                          IF line_exists( lt_fica_rate[ txt30 = |EXTRA GI PIPE CHG PER METER DR| ] ).
*                       la_fica_rate    = lt_fica_rate[ txt30 = |EXTRA GI PIPE CHG PER METER DR| ].
*
*                            IF la_fica_rate-rate GT 0.
*
*                              APPEND INITIAL LINE TO it_table ASSIGNING <fs_ficatable>.
*                       <fs_ficatable>-partner = <fs_output>-partner.
*                       <fs_ficatable>-vkont   = ls_dca-vkont.
*                       <fs_ficatable>-xblnr   = ls_dca-sr_number.
*                       <fs_ficatable>-hvorg   = la_fica_rate-hvorg.
*                       <fs_ficatable>-tvorg    = la_fica_rate-tvorg.
*                       <fs_ficatable>-amount      = la_fica_rate-rate.
*                            ENDIF.
*
**                            CALL METHOD lo_obj->post_fpe1
**                              EXPORTING
**                                im_partner = CONV bu_partner( <fs_output>-partner )
**                                im_vkont   = CONV vkont_kk( ls_dca-vkont )
**                                im_xblnr   = CONV xblnr_kk( ls_dca-sr_number )
**                                im_amt     = CONV betrw_kk( la_fica_rate-rate )
**                                im_hvorg   = CONV hvorg_kk( la_fica_rate-hvorg )
**                                im_tvorg   = CONV tvorg_kk( la_fica_rate-tvorg ).
*                          ENDIF.
*                        ENDIF.
*                        CLEAR : la_fica_rate.
*
*                        IF it_table IS NOT INITIAL.
*                          CALL METHOD lo_obj->post_fpe1
*                            EXPORTING
*                       it_table        = it_table
*                            IMPORTING
*                       e_documentnumber = DATA(lv_document)
*                       e_return        = DATA(lv_retune).
*
*                        ENDIF.
*                        REFRESH : it_table.
*******************************************
*
*
**                        IF ls_dca-email_address IS NOT INITIAL.
**                          CALL METHOD lv_new_conn->email_send
**                            EXPORTING
**                              iv_appno  = ls_dca-application_number
**                              iv_srreq  = ls_dca-sr_number
***                             iv_crno   =
**                              iv_email  = ls_dca-email_address
***                             iv_cust   =
**                              iv_closer = abap_true
***                             iv_fica_team =
**                            .
**                        ENDIF.
*
*                      ELSE .
*                        IF line_exists( lt_retune[ type = |E| ] ).
*                       la_remarks      = lt_retune[ type = |E| ] .
*                       <fs_output>-remark = la_remarks-message.
*                          CONTINUE.
*                        ENDIF.
                  ENDIF.
*
*
*****************                  SR staus change**********************************
                  lv_code = |I3CM|.
                  iv_cat_id = |I3CM|.
                  lv_status     = |E0006|.
                  iv_status_prof    = |ZNCSTATU|.

                  mig_status ls_head-header_guid  lv_status iv_status_prof lv_code iv_cat_id.
*
*                    ELSE.
*                      <fs_output>-remark = |Flags are not set|.
*                      CONTINUE.
*                    ENDIF.
*
*                  ELSE.
*                    <fs_output>-remark = |SRM Value should be passed|.
*                    CONTINUE.
*                  ENDIF.
******************                  SR status change********************************
*
*                WHEN 'HOUSEUNDERCONSTRUCTION'.
*                  lv_code         = |D6HU|.
*                  iv_cat_id       = |D6HU|.
*
*                  mig_status ls_head-header_guid ls_cust_fields lv_status iv_status_prof lv_code iv_cat_id.
*
*                  IF lv_sucess IS NOT INITIAL.
*                    <fs_output>-remark = TEXT-003.
*                  ENDIF.
*
*                WHEN 'HOUSELOCKED'.
*                  lv_code         = |D6HL|.
*                  iv_cat_id       = |D6HL|.
*
*                  mig_status ls_head-header_guid ls_cust_fields lv_status iv_status_prof lv_code iv_cat_id.
*
*                  IF lv_sucess IS NOT INITIAL.
*                    <fs_output>-remark = TEXT-003.
*                  ENDIF.
*
*                WHEN 'AFTERSOMETIME'.
*                  lv_code         = |D6AS|.
*                  iv_cat_id       = |D6AS|.
*
*                  mig_status ls_head-header_guid ls_cust_fields lv_status iv_status_prof lv_code iv_cat_id.
*
*                  IF lv_sucess IS NOT INITIAL.
*                    <fs_output>-remark = TEXT-003.
*                  ENDIF.
*
**                WHEN 'ADDRESSNOTFOUND'.
**                  lv_code         = |GC6D|.
**                  iv_cat_id       = |D6HL|.
**
**                  mig_status ls_head-header_guid ls_cust_fields lv_status iv_status_prof lv_code iv_cat_id.
**
**                  IF lv_sucess IS NOT INITIAL.
**                    <fs_output>-remark = TEXT-003.
**                  ENDIF.
*
*                WHEN 'KITCHENNOTREADY'.
*                  lv_code         = |D6KI|.
*                  iv_cat_id       = |D6KI|.
*
*                  mig_status ls_head-header_guid ls_cust_fields lv_status iv_status_prof lv_code iv_cat_id.

*                  IF lv_sucess IS NOT INITIAL.
*                    <fs_output>-remark = TEXT-003.
*                  ENDIF.

                WHEN  OTHERS.
                  <fs_output>-remark = TEXT-006.
              ENDCASE.

*            ELSE.

*                ENDIF.
            ELSE.
              <fs_output>-remark = |Check the input status|.
            ENDIF.

          ELSE.
            <fs_output>-remark = |Check the Partner|.
          ENDIF.
*        ELSE.
        ELSE.
          <fs_output>-remark = |Please check the SR Request|.
        ENDIF.

      ENDLOOP.
    ENDIF.

    g_sec = abap_true.

    PERFORM alv_gruid.
*    MESSAGE  TEXT-003 TYPE 'I'.
    LEAVE TO SCREEN 0.


  ENDIF.
*ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form alv_gruid
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM alv_gruid .

  DATA: ls_layout  TYPE slis_layout_alv,
        ls_variant TYPE disvariant.

*  ls_variant-variant  = |DEFAULT|.
  ls_layout-zebra = abap_true.
  ls_layout-colwidth_optimize = abap_true.

  REFRESH : gt_fieldcat.

  mig_fieldcat      1     lc_bp         lc_bp         .
  mig_fieldcat      2     lc_srreq      lc_srname     .
  mig_fieldcat      3     lc_datecre    lc_datename   .
  mig_fieldcat      4     lc_gc         lc_gc         .
  mig_fieldcat      5     lc_plant      lc_plannam   .
  mig_fieldcat      6     lc_dist      	lc_dist_name  .
  mig_fieldcat      7     lc_wa         lc_waname     .
  mig_fieldcat      8     lc_app        lc_appname  .
  mig_fieldcat      9     lc_status     lc_statnam  .
  mig_fieldcat     10     lc_substatus  lc_substanam  .
*  mig_fieldcat     11     lc_vendorn    lc_vennamen  .
  "mig_fieldcat     12     lc_venmanu    lc_venman  .
  "mig_fieldcat     13     lc_poman      lc_pomanname  .
  "mig_fieldcat     14     lc_vendor      lc_venname    .
  "mig_fieldcat     15     lc_po         lc_poname  .
*  mig_fieldcat     12     lc_vendor      lc_venman.
*  mig_fieldcat     13     lc_po         lc_pomanname.
*  mig_fieldcat     14     lc_venmanu    lc_venname.
*  mig_fieldcat     15     lc_poman      lc_poname.
  mig_fieldcat     11     lc_dev_lo     lc_devnam.
  mig_fieldcat     12     lc_matnr      lc_mtrnam     .
  mig_fieldcat     13     lc_baujj      lc_baujjnam   .
*  mig_fieldcat     19     lc_vfrom      lc_vfromnam   .
  mig_fieldcat     14     lc_herst      lc_herstnam   .
  mig_fieldcat     15     lc_typbz      lc_typbznam   .
  mig_fieldcat     16     lc_serge      lc_sergenam   .
  mig_fieldcat     17     lc_eadat      lc_eadatnam   .
  mig_fieldcat     18     lc_ezwstand   lc_ezwnam     .
*  mig_fieldcat     20     lc_mtloc      lc_mtlocnam     .
*  mig_fieldcat     24     lc_extpo      lc_extnam     .
*  mig_fieldcat     25     lc_extgipo    lc_extginam   .
*  mig_fieldcat     26     lc_extgipi    lc_extgpinam  .
  mig_fieldcat     19     lc_volcr      lc_volcrnam   .
*  mig_fieldcat     28     lc_tfno       lc_tfnam   .
  mig_fieldcat     20     lc_movein     lc_moveinnm  .
  mig_fieldcat     21     lc_moverd     lc_moverdnm  .
*  mig_fieldcat     31     lc_nobur       lc_noburnm .
*  mig_fieldcat     32     lc_rubtu       lc_rubtunm .
*  mig_fieldcat     33     lc_TFNOCO     lc_TFnamCONV  .
*  mig_fieldcat     34     lc_drstu       lc_drstunm .
*  mig_fieldcat     35     lc_drsno       lc_drsnounm.
*  mig_fieldcat     36     lc_loop       lc_loopnm .
*  mig_fieldcat     37     lc_srmno      lc_srmnonm  .
*  mig_fieldcat     38     lc_srmcap     lc_srmcapnm .
*  mig_fieldcat     39     lc_risiso     lc_risisonam   .
*  mig_fieldcat     40     lc_picon      lc_piconnam   .
*  mig_fieldcat     41     lc_isoinst    lc_picorinam   .
*  mig_fieldcat     42     lc_piconri    lc_isointnam   .
*  mig_fieldcat     43     lc_hopipe     lc_hopipenam   .
  IF g_sec IS NOT INITIAL.
    mig_fieldcat     22     lc_remark     lc_remarnam    .
  ENDIF.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program       = sy-repid
      i_callback_user_command  = 'USER_COMMAND'
      it_fieldcat              = gt_fieldcat
      is_layout                = ls_layout
      i_callback_pf_status_set = 'SET_PF_STATUS'
      i_save                   = 'A'
      is_variant               = ls_variant
    TABLES
      t_outtab                 = gt_outtab
    EXCEPTIONS
      program_error            = 1
      OTHERS                   = 2.

  IF sy-subrc EQ 0.
*    IF sy-subrc <> 0.
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*  ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form get_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM get_data .
  CONSTANTS : lc_cat_id TYPE crm_erms_cat_as_id VALUE 'C2FP',
              lc_i      TYPE char1 VALUE 'I',
              lc_bis    TYPE biszeitsch VALUE '99991231'.
  SELECT object_id , header_guid , posting_date , sold_to_party
    INTO TABLE @DATA(lt_obj) FROM crms4d_serv_h WHERE object_id     IN @s_tras
                                               AND    posting_date  IN @s_post.
*                                               AND   zz1_gacode_srh IN @s_ga
*                                               AND   zz1_pngrbgadistrictnam_srh IN @s_dist
*                                               AND   zz1_vendornumber_srh IN @s_ven
*                                               AND   zz1_ponumber_srh IN @s_po
  "AND   person_resp      IN @s_emp.
  IF lt_obj IS  INITIAL AND s_app IS NOT INITIAL.
    SELECT application_number, bp_kind , grid_code ,ward_no, district , bp_number ,vstelle ,vkont FROM zcm_bp_data_i INTO TABLE @DATA(lt_dca)
         WHERE application_number   IN @s_app AND grid_code IN @s_gcode .
    IF lt_dca IS NOT INITIAL.
      SELECT object_id , header_guid , posting_date , sold_to_party
  INTO TABLE @lt_obj FROM crms4d_serv_h WHERE object_id     IN @s_tras
                                             AND    posting_date  IN @s_post.
*
    ENDIF.
  ENDIF.


  IF lt_obj IS NOT INITIAL.

    SELECT object_id , number_int , sort , codegruppe , code  , cat_id FROM crms4d_srv_subj INTO TABLE @DATA(lt_sub) FOR ALL ENTRIES IN
             @lt_obj WHERE object_id   = @lt_obj-object_id.
    DELETE lt_sub WHERE number_int NE |000000| .
    DELETE lt_sub WHERE   code IS INITIAL.
    SELECT application_number, bp_kind , grid_code ,ward_no, district , bp_number ,vstelle ,vkont FROM zcm_bp_data_i INTO TABLE @lt_dca FOR ALL ENTRIES IN  @lt_obj
           WHERE application_number IN @s_app AND  grid_code IN @s_gcode AND
                 bp_number   = @lt_obj-sold_to_party
       .

    IF lt_dca IS NOT INITIAL.
      SELECT anlage , vstelle FROM eanl INTO TABLE @DATA(lt_eanl)  FOR ALL ENTRIES IN @lt_dca WHERE vstelle = @lt_dca-vstelle.
*          if lt_ean,,l is NOT INITIAL.
      SELECT vstelle , haus  FROM evbs INTO  TABLE @DATA(lt_evbs) FOR ALL ENTRIES IN @lt_eanl WHERE vstelle = @lt_eanl-vstelle.

      SELECT tplnr , fltyp , tplma FROM iflot INTO TABLE @DATA(lt_iflot) FOR ALL ENTRIES IN @lt_evbs WHERE tplma EQ @lt_evbs-haus AND fltyp EQ @lc_i.
      IF lt_iflot IS NOT INITIAL.
        SELECT equnr , bis , einbdat , devloc , amcg_cap_grp FROM egerh INTO TABLE @DATA(lt_egerh) FOR ALL ENTRIES IN @lt_iflot WHERE bis = @lc_bis AND devloc = @lt_iflot-tplnr.
        SELECT tplnr , stort FROM iloa INTO TABLE @DATA(lt_iloa) FOR ALL ENTRIES IN @lt_iflot WHERE tplnr = @lt_iflot-tplnr.
        IF lt_iloa IS NOT INITIAL.
          SELECT stand, ktext FROM t499s INTO TABLE @DATA(lt_t499s) FOR ALL ENTRIES IN @lt_iloa WHERE stand =  @lt_iloa-stort.
        ENDIF.
        IF lt_egerh IS NOT INITIAL.
          SELECT equnr , matnr , baujj, herst, typbz, serge FROM equi INTO TABLE @DATA(lt_msn) FOR ALL ENTRIES IN @lt_egerh WHERE equnr = @lt_egerh-equnr.

        ENDIF.
      ENDIF.

*      SELECT vkont , vktyp FROM fkkvk INTO TABLE @DATA(lt_fkkvk) FOR ALL ENTRIES IN @lt_dca WHERE vkont = @lt_dca-vkont.




      SELECT bp_type , bp_grouping , plant , grid_code  FROM zcm_group_ca INTO TABLE @DATA(lt_plant) FOR ALL ENTRIES IN @lt_dca WHERE bp_type = @lt_dca-bp_kind.
*      IF lt_plant IS NOT INITIAL.
**        SELECT * FROM zdma_po_assign INTO TABLE @DATA(lt_po_assign) FOR ALL ENTRIES IN @lt_plant WHERE plant = @lt_plant-plant.
*
*        IF lt_po_assign IS NOT INITIAL.
*          SELECT lifnr , name1 FROM lfa1 INTO TABLE @DATA(lt_lfa1) FOR ALL ENTRIES IN   @lt_po_assign WHERE lifnr = @lt_po_assign-vendor.
*        ENDIF.
*      ENDIF.
*    ENDIF.
*    lt_plant
      SELECT * FROM crmc_erms_cat_ca INTO TABLE @DATA(lt_cat) .
      SELECT * FROM crmc_erms_cat_hi INTO TABLE @DATA(lt_cat_hi) .
      SELECT * FROM crmc_erms_cat_cd INTO TABLE @DATA(lt_cat_dis) .

    ENDIF.

    LOOP AT lt_obj ASSIGNING FIELD-SYMBOL(<fs_obj>).
*    TRY .c
*    CLEAR : la_address.
*    IF line_exists( lt_sub[ object_id = <fs_obj>-object_id  cat_id       = lc_CAT_ID ] )..
      IF line_exists( lt_dca[ bp_number   = <fs_obj>-sold_to_party  ] ).
        DATA(la_dca) = lt_dca[ bp_number   = <fs_obj>-sold_to_party ].
*        IF line_exists( lt_address[ addrnumber =  la_partner-addr_nr ] ).
*          DATA(la_address) = lt_address[ addrnumber =  la_partner-addr_nr ].
*        APPEND INITIAL LINE TO gt_outtab ASSIGNING FIELD-SYMBOL(la_outtab).

        IF line_exists( lt_sub[ object_id = <fs_obj>-object_id ] ).
          DATA(la_sub)       =  lt_sub[ object_id = <fs_obj>-object_id ].
          IF line_exists( lt_cat[ cat_id = la_sub-cat_id ] ).
            DATA(la_cat)       =  lt_cat[ cat_id = la_sub-cat_id ].
            IF line_exists( lt_cat_dis[ cat_guid = la_cat-cat_guid ] ).
              DATA(la_cat_dis)   =  lt_cat_dis[ cat_guid = la_cat-cat_guid ].
              la_outtab-sub_status     = la_cat_dis-cat_label.

*        DATA(la_sub)       =  lt_sub[ object_id = <fs_obj>-object_id ].
              DATA(la_cat_hi)       =  lt_cat_hi[ node_guid = la_cat-cat_guid ].
*          IF la_cat_hi-pare_guid IS NOT INITIAL.
              IF line_exists( lt_cat_dis[ cat_guid = la_cat_hi-pare_guid ] ).
                DATA(la_cat_dis_pi)   =  lt_cat_dis[ cat_guid = la_cat_hi-pare_guid ].
                la_outtab-status     =   la_cat_dis_pi-cat_label.
*              CASE la_outtab-status .
*              	WHEN 'Assign to Contractor'.
*              	WHEN .
*              	WHEN OTHERS.
*              ENDCASE.
*              WHEN la_outtab-status .


              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.

        IF la_outtab-status EQ |Approvals| OR
                  la_outtab-status EQ |Commissioning|." OR   la_outtab-status EQ |Ready For Conversion/Gas in|.
          IF la_outtab-sub_status EQ |I3CM|.
            CLEAR : la_cat_dis_pi,la_cat,la_sub,la_cat_dis,la_outtab,la_dca.
            CONTINUE.
          ENDIF.

        ELSE.
          CONTINUE.
          CLEAR : la_cat_dis_pi,la_cat,la_sub,la_cat_dis,la_outtab,la_dca.
        ENDIF.

*      IF la_dca-ga_code EQ 'CVK'.
*        IF line_exists( lt_plant[ pngrb_ga_code  = la_dca-ga_code pngrb_district = la_dca-pngrb_dist ] ).
*          DATA(la_plant) = lt_plant[ pngrb_ga_code = la_dca-ga_code pngrb_district = la_dca-pngrb_dist ].
*          la_outtab-plant = la_plant-plant.
*        ENDIF.

*      ELSE.
*        IF line_exists( lt_plant[ pngrb_ga_code  = la_dca-ga_code ] ).
*          la_plant = lt_plant[ pngrb_ga_code = la_dca-ga_code ].
*          la_outtab-plant = la_plant-plant.
*        ENDIF.
*      ENDIF.

        CLEAR : la_cat_dis_pi,la_cat,la_sub,la_cat_dis.
*      IF <fs_obj>-zz1_ponumber_srh IS NOT INITIAL AND <fs_obj>-zz1_vendornumber_srh IS NOT INITIAL.
**        la_outtab-PO_manual            = <fs_obj>-zz1_ponumber_srh.
**        la_outtab-ven_manu       = <fs_obj>-zz1_vendornumber_srh.
*
*      ELSE.
*        LOOP AT lt_po_assign ASSIGNING FIELD-SYMBOL(<fs_po_assign>) WHERE plant = la_outtab-plant.
*          IF sy-datum BETWEEN <fs_po_assign>-from_date AND <fs_po_assign>-to_date.
*            la_outtab-ven_manu    = <fs_po_assign>-vendor.
*            la_outtab-po_manual   = <fs_po_assign>-po.
*            EXIT.
*          ENDIF.
*
*        ENDLOOP.
*      ENDIF.
*      IF la_outtab-po_manual IS NOT INITIAL AND <fs_obj>-zz1_ponumber_srh IS INITIAL.
*        IF line_exists( lt_lfa1[ lifnr = la_outtab-ven_manu ] ).
*          DATA(la_lfa1) = lt_lfa1[ lifnr = la_outtab-ven_manu ].
*          la_outtab-vrn_name = la_lfa1-name1.
*        ENDIF.
*      ELSE.
*        IF line_exists( lt_lfa1[ lifnr = <fs_obj>-zz1_vendornumber_srh ] ).
*          la_lfa1 = lt_lfa1[ lifnr = <fs_obj>-zz1_vendornumber_srh ].
*          la_outtab-vrn_name = la_lfa1-name1.
*        ENDIF.
*      ENDIF.
*
**      IF la_outtab- IS NOT INITIAL.
*
*
**      IF line_exists( lt_fkkvk[ vkont = ls_dca-vkont ] ).
**      DATA(ls_fkkvk) = lt_fkkvk[ vkont = ls_dca-vkont ].
**      ENDIF.


        la_outtab-sr_request    = <fs_obj>-object_id.
        la_outtab-partner       = <fs_obj>-sold_to_party.
        la_outtab-date_cre      = <fs_obj>-posting_date.
        la_outtab-grid_code     = la_dca-grid_code.
        la_outtab-plant         = '2100'.
        la_outtab-dist          = la_dca-district.
        la_outtab-ward            = la_dca-ward_no.
        la_outtab-app_no        = la_dca-application_number.


*      IF <fs_obj>-zz1_vendornumber_srh IS INITIAL .
*      la_outtab-vendor        = <fs_obj>-zz1_vendornumber_srh.
*      la_outtab-po            = <fs_obj>-zz1_ponumber_srh.
**      ENDIF.
*      la_outtab-tf_no         = <fs_obj>-zz1_tfnumber_srh.
*      la_outtab-no_burner     = <fs_obj>-zz1_noofburners_srh.
*      la_outtab-riser_iso     = <fs_obj>-zz1_isolationvalveinst_srh.
*      la_outtab-extra_po      = <fs_obj>-zz1_extrakitchenpoint_srh.
*      la_outtab-extra_gi_po   = <fs_obj>-zz1_geyserpoint_srh.
*      la_outtab-extra_gi_pi   = <fs_obj>-zz1_geyserpoint_srh.         " needed to check
*      la_outtab-pipe_conn     = <fs_obj>-zz1_pipeconnectedfromm_srh.
*      la_outtab-pipe_conn_ri  = <fs_obj>-zz1_pipeconnectedfromm_srh . "zz1_pepipelength_srh.
*      la_outtab-iso_inst      = <fs_obj>-zz1_isolationvalveinst_srh . "zz1_riserisolvalveinst_srh.
*      la_outtab-house_pipe    = <fs_obj>-zz1_hosepipeinstalled_srh.
*      la_outtab-rubb_date     = <fs_obj>-zz1_rubbertubeexpiryda_srh.

*        CLEAR : la_sub,
*        DATA(la_cat_dis)   =  lt_cat_dis[ CAT_ID = la_sub-cat_id ].
*      la_outtab-status     = |Ready For Conversion/Gas in|.
*      la_outtab-sub_status = |Gas in/Conversion Pending|.
*        CLEAR : la_cat_dis_pi,la_cat,la_sub,la_cat_dis.

        IF line_exists( lt_evbs[ vstelle = la_dca-vstelle ] ).
          DATA(ls_evbs) = lt_evbs[ vstelle = la_dca-vstelle ].


          IF line_exists( lt_iflot[ tplma = ls_evbs-haus ] ).
            DATA(ls_iflot) = lt_iflot[ tplma = ls_evbs-haus ].
            IF line_exists( lt_egerh[ devloc = ls_iflot-tplnr ] ).
              DATA(ls_egerh) = lt_egerh[ devloc = ls_iflot-tplnr ].
              IF line_exists( lt_msn[ equnr = ls_egerh-equnr ] ).
                DATA(ls_msn) = lt_msn[ equnr = ls_egerh-equnr ].
                la_outtab-matnr       =     ls_msn-matnr.
                la_outtab-serge       =     ls_msn-serge.
                la_outtab-baujj       =     ls_msn-baujj.
                la_outtab-herst       =     ls_msn-herst.
                la_outtab-typbz       =     ls_msn-typbz.
                la_outtab-eadat       =     ls_egerh-einbdat.
                la_outtab-vol_corr_fa =     |1.00|.

                IF line_exists( lt_iloa[ tplnr = ls_iflot-tplnr ] ).
                  DATA(la_iloa) = lt_iloa[ tplnr = ls_iflot-tplnr ].
                  IF line_exists( lt_t499s[ stand = la_iloa-stort ] ).
                    DATA(la_t499s) = lt_t499s[ stand = la_iloa-stort ].
                  ENDIF.
                  la_outtab-dev_loc = la_t499s-ktext.
                ENDIF.
*                        la_outtab-actualmrdate =    <fs_outtab>-move_dt.
*                        la_outtab-readingresult =   <fs_outtab>-move_read.
*                        APPEND la_meterread TO lt_meterread.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.

        IF la_outtab-move_read IS INITIAL.
          la_outtab-move_read = '0.000'.
        ENDIF.

        IF la_outtab-e_zwstand IS INITIAL.
          la_outtab-e_zwstand = '0.000'.
        ENDIF.
        CONDENSE: la_outtab-e_zwstand,
                  la_outtab-move_read.

        APPEND la_outtab TO gt_outtab.
        CLEAR : la_outtab.
*        ENDIF.
      ENDIF.
*    ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.

FORM set_pf_status USING rt_extab TYPE slis_t_extab.
  SET PF-STATUS 'STATUS_MAIN'.
ENDFORM.
*siva 22/06/2022
*----------------------------------------------------------*
*       FORM USER_COMMAND                                  *
*----------------------------------------------------------*
*       --> R_UCOMM                                        *
*       --> RS_SELFIELD                                    *
*----------------------------------------------------------*
FORM user_command USING r_ucomm LIKE sy-ucomm
                  rs_selfield TYPE slis_selfield.
* Check function code
  DATA ref1 TYPE REF TO cl_gui_alv_grid.
  DATA sytabix TYPE sy-tabix.
*--call
  IF p_gc IS NOT INITIAL.
    CASE r_ucomm.

      WHEN  'SAVE'.
        IF p_gc IS NOT INITIAL.
          PERFORM update_sr.
        ELSE.
          LEAVE TO SCREEN 0..
        ENDIF.

    ENDCASE.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form get_file_data_excel
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM get_file_data_excel .

  DATA:lr_data TYPE REF TO data,
       wa_data TYPE ty_fica_data,
       lv_int  TYPE i,
       lv_val  TYPE string.


  DATA: lv_meteread  TYPE p LENGTH 10 DECIMALS 3,
        lv_charfield TYPE cha_class_view-sollwert,
        lv_digits    TYPE cha_class_data-stellen,
        lv_char21    TYPE cha_class_data-sollwert,     "string.
        lv_var1      TYPE char5,
        lv_var2      TYPE char5,
        l_length     TYPE char5.

  CONSTANTS: lv_pointer TYPE i VALUE 42.
  FIELD-SYMBOLS:<lt_data> TYPE STANDARD TABLE..
  lr_data = NEW zcl_utility_excel( )->readexcelfile( v_file = CONV string( p_gc ) ).
  ASSIGN lr_data->* TO <lt_data>.

  DATA lv_exp TYPE p DECIMALS 3.

  LOOP AT <lt_data> ASSIGNING FIELD-SYMBOL(<wa_data>).

    IF sy-tabix = 1.
      CONTINUE.
    ENDIF.
    DO lv_pointer TIMES.
      ASSIGN COMPONENT sy-index OF STRUCTURE <wa_data> TO FIELD-SYMBOL(<wa_xl_data>).
      ASSIGN COMPONENT sy-index OF STRUCTURE wa_data TO FIELD-SYMBOL(<wa_tab_data>).
      IF <wa_xl_data> IS ASSIGNED AND <wa_xl_data> IS NOT INITIAL AND <wa_tab_data> IS ASSIGNED.
        CASE sy-index.
          WHEN 003.
            CLEAR : lv_int.
            lv_val = <wa_xl_data>+0(4).
            CALL FUNCTION 'CONVERT_STRING_TO_INTEGER'
              EXPORTING
                p_string      = lv_val
              IMPORTING
                p_int         = lv_int
              EXCEPTIONS
                overflow      = 1
                invalid_chars = 2
                OTHERS        = 3.
            IF sy-subrc <> 0.
* Implement suitable error handling here

              CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data> .
              <wa_tab_data> = <wa_xl_data>.

            ELSE .

              CONCATENATE <wa_xl_data>+0(4) <wa_xl_data>+5(2) <wa_xl_data>+8(2)   INTO  <wa_xl_data> .
              <wa_tab_data> = <wa_xl_data>.

            ENDIF.
*            CONCATENATE <wa_xl_data>+0(4) <wa_xl_data>+5(2) <wa_xl_data>+8(2) INTO  <wa_xl_data>.
*            <wa_tab_data> = <wa_xl_data>.
*          WHEN 012. " Titlte
*            REPLACE ALL OCCURRENCES OF REGEX '[^\d]' IN <wa_xl_data> WITH ''.
*            <wa_tab_data> = <wa_xl_data>.
*
*          WHEN 013. " Titlte
*            REPLACE ALL OCCURRENCES OF REGEX '[^\d]' IN <wa_xl_data> WITH ''.
*            <wa_tab_data> = <wa_xl_data>.
*
*          WHEN 014. " Titlte
*            REPLACE ALL OCCURRENCES OF REGEX '[^\d]' IN <wa_xl_data> WITH ''.
*            <wa_tab_data> = <wa_xl_data>.
*
*          WHEN 015. " Titlte
*            REPLACE ALL OCCURRENCES OF REGEX '[^\d]' IN <wa_xl_data> WITH ''.
*            <wa_tab_data> = <wa_xl_data>.
*
*
          WHEN '017' OR '020'.

            CLEAR : lv_int.
            lv_val = <wa_xl_data>+0(4).
            CALL FUNCTION 'CONVERT_STRING_TO_INTEGER'
              EXPORTING
                p_string      = lv_val
              IMPORTING
                p_int         = lv_int
              EXCEPTIONS
                overflow      = 1
                invalid_chars = 2
                OTHERS        = 3.
            IF sy-subrc <> 0.
* Implement suitable error handling here

              CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data> .
              <wa_tab_data> = <wa_xl_data>.

            ELSE .

              CONCATENATE <wa_xl_data>+0(4) <wa_xl_data>+5(2) <wa_xl_data>+8(2)   INTO  <wa_xl_data> .
              <wa_tab_data> = <wa_xl_data>.

            ENDIF.
*
*            CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data>.
*            <wa_tab_data> = <wa_xl_data>.
          WHEN 018 ."OR 021.

            IF <wa_xl_data> CA 'E'.
              DATA(lv_flag) = abap_true.
            ENDIF.

*            DATA: gv_spl(20) TYPE c VALUE 'E-'.
*            REPLACE ALL OCCURENCES OF gv_spl IN <wa_xl_data> WITH ''.
            CONDENSE <wa_xl_data> NO-GAPS.
            lv_digits = 3.
            IF lv_flag = abap_true.
              lv_char21 = <wa_xl_data>.
              CALL FUNCTION 'QSS0_FLTP_TO_CHAR_CONVERSION'
                EXPORTING
                  i_number_of_digits       = lv_digits
                  i_fltp_value             = lv_char21    "<wa_xl_data>
                  i_value_not_initial_flag = 'X'
                  i_screen_fieldlength     = 16
                IMPORTING
                  e_char_field             = lv_charfield.
*            CONDENSE lv_charfield.
              <wa_tab_data> = lv_charfield.
              CONDENSE <wa_tab_data>.
            ELSE.   " For more than 3 decimal digits, the value should be displayed with 0.000

****              SPLIT <wa_xl_data> AT '.' INTO lv_var1 lv_var2 .
****              l_length = strlen( lv_var2 ).
****              CONDENSE l_length.
****              IF l_length GT lv_digits.
****
****                <wa_tab_data> = '0.000'.
****                CONDENSE <wa_tab_data>.
****              ELSE.
****
              <wa_tab_data> = <wa_xl_data>.
              CONDENSE <wa_tab_data>.
****            ENDIF.
            ENDIF.

            CLEAR: lv_flag, lv_char21, lv_charfield, l_length.

          WHEN 020.
            CLEAR : lv_int.
            lv_val = <wa_xl_data>+0(4).
            CALL FUNCTION 'CONVERT_STRING_TO_INTEGER'
              EXPORTING
                p_string      = lv_val
              IMPORTING
                p_int         = lv_int
              EXCEPTIONS
                overflow      = 1
                invalid_chars = 2
                OTHERS        = 3.
            IF sy-subrc <> 0.
* Implement suitable error handling here

              CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data> .
              <wa_tab_data> = <wa_xl_data>.

            ELSE .

              CONCATENATE <wa_xl_data>+0(4) <wa_xl_data>+5(2) <wa_xl_data>+8(2)   INTO  <wa_xl_data> .
              <wa_tab_data> = <wa_xl_data>.

            ENDIF.
*            CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data>.
*            <wa_tab_data> = <wa_xl_data>.

*          WHEN 032.
*            CLEAR : lv_int.
*            lv_val = <wa_xl_data>+0(4).
*            CALL FUNCTION 'CONVERT_STRING_TO_INTEGER'
*              EXPORTING
*                p_string      = lv_val
*              IMPORTING
*                p_int         = lv_int
*              EXCEPTIONS
*                overflow      = 1
*                invalid_chars = 2
*                OTHERS        = 3.
*            IF sy-subrc <> 0.
** Implement suitable error handling here
*
*              CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data> .
*              <wa_tab_data> = <wa_xl_data>.
*
*            ELSE .
*
*              CONCATENATE <wa_xl_data>+8(2) <wa_xl_data>+5(2) <wa_xl_data>+0(4) INTO  <wa_xl_data>.
*              <wa_tab_data> = <wa_xl_data>.
*
*            ENDIF.
**            CONCATENATE <wa_xl_data>+6(4) <wa_xl_data>+3(2) <wa_xl_data>+0(2) INTO  <wa_xl_data>.
**            <wa_tab_data> = <wa_xl_data>.
*
          WHEN OTHERS.
            <wa_tab_data> = <wa_xl_data>.
        ENDCASE.
      ENDIF.
    ENDDO.
    " Registration date no and KYC Date should be mapped
    wa_data-conv_date = wa_data-move_dt.
    APPEND INITIAL LINE TO gt_outtab ASSIGNING FIELD-SYMBOL(<fs_fica_data>).
    MOVE-CORRESPONDING wa_data TO <fs_fica_data>.
*    IF <fs_dma_data>-application_number IS NOT INITIAL.
*      <fs_dma_data>-created_date = sy-datum.
*    ELSE.
**      APPEND INITIAL LINE TO gt_final ASSIGNING <fs_final>.
**      <fs_final>-app_num = lv_bp.
**      <fs_final>-er_mss  = |Duplicate Application number|.
**      CLEAR : lv_bp.
*    ENDIF.
    CLEAR wa_data.
  ENDLOOP.
*  SORT gt_dma_data  BY application_number.
*  DELETE ADJACENT DUPLICATES FROM gt_dma_data COMPARING application_number.
*  DELETE gt_dma_data WHERE created_date IS INITIAL.

ENDFORM.

*************************************************************************************************************************************************

7th block
ZISU_CM_COMMIS - tcode
ZISU_CM_COMMISSIONING_RPT - prg_name

*************************************************************************************************************************************************

*&---------------------------------------------------------------------*
*& Report ZISU_CM_COMMISSIONING_RPT
*&---------------------------------------------------------------------*
*& Description :Create Report for Commissioning Report
*& Requirement Provided By : Raj Kumar D
*& Code Written By : Syam Gogineni
*& Code Written On (DD.MM.YYYY):
*& Company Name :
*& Transport Request No :DE1K900772
*& Transaction code :
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& CHANGE HISTORY:
*& Date:
*& Changed By:
*& Description:
*"---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*& Report ZISU_CM_COMMISSIONING_RPT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zisu_cm_commissioning_rpt.

INCLUDE ZISU_CM_COMMISSIONING_RPT_top.
INCLUDE ZISU_CM_COMMISSIONING_RPT_form.

*DATA: gt_return TYPE STANDARD TABLE OF ddshretval.
AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_BPTYPE-low.
  SELECT bpkind, text40
     FROM tb004t
     INTO TABLE @DATA(lt_bptype)
     WHERE spras = @sy-langu.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'BPKIND'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_BPTYPE'
      value_org       = 'S'
    TABLES
      value_tab       = lt_bptype
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

*    IF gt_return IS NOT INITIAL.
*      rt_bptype = gt_return[ 1 ]-fieldval.
*    ENDIF.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_bptype-high.
  SELECT bpkind, text40
       FROM tb004t
       INTO TABLE @DATA(lt_bptype)
       WHERE spras = @sy-langu.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'BPKIND'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_BPTYPE'
      value_org       = 'S'
    TABLES
      value_tab       = lt_bptype
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_grid-low.
  SELECT HOUSE_NUM1
       FROM ADRC
       INTO TABLE @DATA(lt_GRID)."#EC CI_NOWHERE
DELETE lt_GRID where HOUSE_NUM1 is initial.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'AD_HSNM1'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_GRID'
      value_org       = 'S'
    TABLES
      value_tab       = lt_GRID
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_GRID-HIGH.
  SELECT HOUSE_NUM1
       FROM ADRC
       INTO TABLE @DATA(lt_GRID). "#EC CI_NOWHERE
DELETE lt_GRID where HOUSE_NUM1 is initial.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'AD_HSNM1'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_GRID'
      value_org       = 'S'
    TABLES
      value_tab       = lt_GRID
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_ward-LOW.
 SELECT BUILDING
       FROM ADRC
       INTO TABLE @DATA(lt_ward)."#EC CI_NOWHERE

DELETE lt_WARD where BUILDING is initial.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'AD_BLDNG'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_WARD'
      value_org       = 'S'
    TABLES
      value_tab       = lt_ward
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_ward-high.
 SELECT BUILDING
       FROM ADRC
       INTO TABLE @DATA(lt_ward)."#EC CI_NOWHERE

DELETE lt_WARD where BUILDING is initial.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'AD_BLDNG'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_WARD'
      value_org       = 'S'
    TABLES
      value_tab       = lt_ward
*    return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

*  SELECT DISTINCT BPKIND  FROM but000 INTO TABLE @DATA(lt_bptype).
*  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
*    EXPORTING
*      retfield        = 'TYPE'
*      dynpprog        = sy-cprog
*      dynpnr          = sy-dynnr
*      dynprofield     = 'I2-LOW'
*      window_title    = 'Select BP TYPE'
*      value_org       = 'S'
*    TABLES
*      value_tab       = lt_bptype
*    EXCEPTIONS
*      parameter_error = 1
*      no_values_found = 2
*      OTHERS          = 3.
*  IF sy-subrc <> 0.
* Implement suitable error handling here
*  ENDIF.
INITIALIZATION.

  s_post-sign  = 'I'.
  s_post-option = 'BT'.
  s_post-low = '20230101'.
  s_post-high = sy-datum.
  APPEND s_post TO s_post[].

  s_BPTYPE-sign  = 'I'.
  s_BPTYPE-option = 'EQ'.

  s_BPTYPE-low = 'ZDOM'.
  s_BPTYPE-high = ''.
  APPEND s_BPTYPE TO s_BPTYPE[].
  s_BPTYPE-low = 'ZCOM'.
  s_BPTYPE-high = ''.
  APPEND s_BPTYPE TO s_BPTYPE[].
  s_BPTYPE-low = 'ZIND'.
  s_BPTYPE-high = ''.
  APPEND s_BPTYPE TO s_BPTYPE[].
*&-------------------------------------------------------------&*
*&                  START-OF-SELECTION
*&-------------------------------------------------------------&*
START-OF-SELECTION.
  PERFORM fetch_data.
  PERFORM display_alv_rpt.

*************************************************************************************************************************************************


*&---------------------------------------------------------------------*
*& Include          ZISU_CM_COMMISSIONING_RPT_TOP
*&---------------------------------------------------------------------*
TYPE-POOLS: slis.
*TABLES : zcm_group_ca,adrc,zcm_bp_data.
RANGES r_date FOR sy-datum.

DATA : gt_BP_data TYPE TABLE OF zcm_bp_data,
       gr_table    TYPE REF TO     cl_salv_table.

TYPES: BEGIN OF ty_final,
         bp_number    TYPE bu_partner,
         bp_name      TYPE name_first,
         bp_address   TYPE bu_name1tx,
         move_in_date TYPE sy-datum,
         move_in_mru  TYPE p DECIMALS 3, "FEEAM_KK,  "N_ZWSTAND, "v_zwstand,Initial Meter Reading
         dev_num      TYPE geraet,      "Device num
         scheme       TYPE char30,      " Scheme   """
         sd_amnt      TYPE augbw_kk,    "Security Deposit Amount
         sd_depbank   TYPE char30,      "SD Deposited Bank
         sd_date      TYPE sy-datum,    "SD Deposited Date
         amc_amount   TYPE  wrbtr,      " AMC Total Amount
         amc_damt_sch TYPE  wrbtr,      " AMC Deposited Amount as per scheme """"
         amc_bank_sch TYPE  fibl_txt50, "char30,      " AMC Deposited Amount as per scheme
         amc_date     TYPE sy-datum,    "AMC  Deposited Date and bank3
         create_on    TYPE erdat,        " created on
         create_by    TYPE  ernam,       " created by
         tel_num      TYPE  ad_tlnmbr,    " Phone number
         grid         TYPE  ad_city1,     " Grid num
         ward_num     TYPE ad_bldng,      " Ward num
*         int_mr       TYPE char20,        "Initial Meter Reading
         vendr        TYPE vkont_kk,      "Vendor
       END OF ty_final.

DATA : gt_final TYPE TABLE OF ty_final,
       wa_final TYPE     ty_final.
DATA: gv_date   TYPE  sy-datum, "posting date .
      gv_bptype TYPE  bu_bpkind, "BP TYPE
      gv_grid   TYPE  ad_hsnm1, " Grid
      gv_ward   TYPE  ad_bldng. "Ward no


SELECTION-SCREEN BEGIN OF BLOCK 0001 WITH FRAME TITLE TEXT-001.

  SELECT-OPTIONS:  s_post         FOR   gv_date OBLIGATORY,
                   s_bptype       FOR   gv_bptype,
                   s_grid         FOR   gv_grid ,
                   s_ward         FOR   gv_ward.

SELECTION-SCREEN END OF BLOCK 0001.

***********************************************************************************************************************************************

*&---------------------------------------------------------------------*
*& Include          ZISU_CM_COMMISSIONING_RPT_FORM
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form fetch_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fetch_data .


  TYPES: BEGIN OF ty_dfkkop1,
           gpart TYPE dfkkop-gpart,
           vkont TYPE dfkkop-vkont,
           betrw TYPE dfkkop-betrw,
           augbt TYPE dfkkop-augbt,
*           waers TYPE dfkkop-waers,
         END OF ty_dfkkop1.

  DATA : lt_dfkkop_sd    TYPE TABLE OF  ty_dfkkop1,
         ls_dfkkop_sd    TYPE  ty_dfkkop1,
         lt_dfkkop_amc1  TYPE TABLE OF  ty_dfkkop1,
         ls_dfkkop_amc1  TYPE  ty_dfkkop1,
         lt_dfkkop_amcd1 TYPE TABLE OF  ty_dfkkop1,
         ls_dfkkop_amcd1 TYPE  ty_dfkkop1.

*  IF s_BPTYPE-low IS NOT INITIAL.
  SELECT partner,                                       "#EC CI_NOFIELD
        type,
        bpkind,
        bu_group,
        name_org1,
        name_org2,
        name_last,
        name_first
   FROM but000
   WHERE bpkind IN @s_bptype
     AND  crdat   IN @s_post
   INTO TABLE @DATA(lt_but).
*  ENDIF.
  SORT lt_but[] BY partner.

  IF lt_but IS NOT INITIAL.
    SELECT vkont,gpart FROM fkkvkp FOR ALL ENTRIES IN @lt_but
       WHERE gpart = @lt_but-partner INTO TABLE @DATA(lt_fkkvkp).
  ENDIF.
  IF lt_fkkvkp[] IS NOT INITIAL.
*    for move in date
    SELECT vertrag,anlage,vkonto,einzdat,          "#EC CI_NO_TRANSFORM
           auszdat, erdat,ernam  FROM ever
           INTO TABLE @DATA(lt_ever)
              FOR ALL ENTRIES IN @lt_fkkvkp
              WHERE vkonto = @lt_fkkvkp-vkont.

    DELETE lt_ever WHERE einzdat IS INITIAL.
  ENDIF.

  IF lt_but[] IS NOT INITIAL.
    SELECT partner, addrnumber
        FROM but020
        FOR ALL ENTRIES IN @lt_but
        WHERE partner = @lt_but-partner
        INTO TABLE @DATA(lt_but020).
  ENDIF.

  IF lt_but020[] IS NOT INITIAL.

    SELECT            addrnumber,                  "#EC CI_NO_TRANSFORM
                      city1,
                      city2,
                      post_code1,
                      street,
                      house_num1,
                      house_num2,
                      str_suppl1,
                      str_suppl2,
                      str_suppl3,
                      location,
                      building,
                      floor,
                      roomnumber,
                      country
                      FROM adrc
                     FOR ALL ENTRIES IN @lt_but020
                      WHERE addrnumber = @lt_but020-addrnumber
                      AND house_num1 IN  @s_grid
                      AND building   IN  @s_ward
                     INTO TABLE @DATA(lt_adrc).
  ENDIF.
  IF lt_but020[] IS NOT INITIAL.
    SELECT addrnumber,                             "#EC CI_NO_TRANSFORM
           persnumber,
           date_from,
           consnumber,
           tel_number,
           r3_user
          FROM adr2
          FOR ALL ENTRIES IN @lt_but020
           WHERE addrnumber = @lt_but020-addrnumber
          AND ( r3_user = '1' OR r3_user = '3' )
          INTO TABLE @DATA(lt_adr2).
  ENDIF.
*    SELECT addrnumber,
*           persnumber,
*           date_from,
*           consnumber,
*           tel_number
*      FROM adr2
*      FOR ALL ENTRIES IN @lt_but020
*      WHERE addrnumber = @lt_but020-addrnumber
*      AND r3_user = '3'
*      AND valid_to LE '99991231235959'
*      INTO TABLE @DATA(lt_adr2).
*  ENDIF.
  IF lt_ever[] IS NOT INITIAL.

    SELECT anlage,logiknr FROM eastl               "#EC CI_NO_TRANSFORM
          FOR ALL ENTRIES IN @lt_ever
          WHERE anlage EQ @lt_ever-anlage
          AND   bis EQ '99991231'
         INTO TABLE @DATA(lt_eastl).
  ENDIF.

*for Initial meter reading
  IF lt_ever[] IS NOT INITIAL.

    SELECT ablbelnr,anlage FROM eablg              "#EC CI_NO_TRANSFORM
          FOR ALL ENTRIES IN @lt_ever
          WHERE anlage EQ @lt_ever-anlage
         AND ablesgr = '06'
         INTO TABLE @DATA(lt_eablg).

  ENDIF.

  IF lt_eablg[] IS NOT INITIAL.
    SELECT ablbelnr,gernr,equnr,v_zwstand,n_zwstand FROM eabl "#EC CI_NO_TRANSFORM
            FOR ALL ENTRIES IN @lt_eablg
            WHERE ablbelnr EQ @lt_eablg-ablbelnr
           INTO TABLE @DATA(lt_eabl).
  ENDIF.

* device number
  IF lt_eabl[] IS NOT INITIAL.
    SELECT  equnr,serge FROM equi                  "#EC CI_NO_TRANSFORM
              FOR ALL ENTRIES IN @lt_eabl
              WHERE equnr EQ @lt_eabl-equnr
             INTO TABLE @DATA(lt_equi).

  ENDIF.
*SD amount
  IF lt_but[] IS NOT INITIAL .
    SELECT   opbel,
             gpart,
             vkont,
             budat,
             betrw,
             augbl
        FROM dfkkop FOR ALL ENTRIES IN @lt_but
        WHERE gpart = @lt_but-partner
           AND hvorg = '6500'
           AND augrd NE '05'
          INTO TABLE @DATA(lt_dfkkop).
  ENDIF.

  LOOP AT lt_dfkkop INTO  DATA(ls_dfkkop).
    ls_dfkkop_sd-gpart          = ls_dfkkop-gpart.
    ls_dfkkop_sd-vkont          = ls_dfkkop-vkont.
    ls_dfkkop_sd-betrw          = ls_dfkkop-betrw.
*  COLLECT <fs_dfkkop> INTO lt_dfkkop.
    COLLECT ls_dfkkop_sd INTO  lt_dfkkop_sd.
  ENDLOOP.

*//  *For AMC Amount
  IF lt_but[] IS NOT INITIAL .
    SELECT   opbel,
             gpart,
             vkont,
             budat,
             betrw,
             augbl
        FROM dfkkop FOR ALL ENTRIES IN @lt_but
        WHERE gpart = @lt_but-partner
           AND hvorg = '6500'
           AND augrd NE '05'
          INTO TABLE @DATA(lt_dfkkop_amc).
  ENDIF.

  LOOP AT lt_dfkkop_amc INTO  DATA(ls_dfkkop_amc).       " amc amount
    ls_dfkkop_amc1-gpart          = ls_dfkkop_amc-gpart.
    ls_dfkkop_amc1-vkont          = ls_dfkkop_amc-vkont.
    ls_dfkkop_amc1-betrw          = ls_dfkkop_amc-betrw.
*  COLLECT <fs_dfkkop> INTO lt_dfkkop.
    COLLECT ls_dfkkop_amc1 INTO  lt_dfkkop_amc1.
  ENDLOOP.

*  for AMC Deposited Amount
  IF lt_but[] IS NOT INITIAL .
    SELECT   opbel,
             gpart,
             vkont,
             budat,
             augbt,
             augdt,
             augbl
        FROM dfkkop FOR ALL ENTRIES IN @lt_but
        WHERE gpart = @lt_but-partner
           AND hvorg = '6500'
           AND tvorg = '0015'
*            AND augst = '9'
          AND augrd NE '05'
          INTO TABLE @DATA(lt_dfkkop_amcd).
  ENDIF.

  LOOP AT lt_dfkkop_amcd INTO  DATA(ls_dfkkop_amcd).
    ls_dfkkop_amcd1-gpart          = ls_dfkkop_amcd-gpart.
    ls_dfkkop_amcd1-vkont          = ls_dfkkop_amcd-vkont.
    ls_dfkkop_amcd1-augbt          = ls_dfkkop_amcd-augbt.
*  COLLECT <fs_dfkkop> INTO lt_dfkkop.
    COLLECT ls_dfkkop_amcd1 INTO  lt_dfkkop_amcd1.
  ENDLOOP.
*for Scheme
  IF lt_but[] IS NOT INITIAL.
    SELECT kunnr,
           kukla
        FROM kna1 FOR ALL ENTRIES IN @lt_but
        WHERE kunnr = @lt_but-partner
          INTO TABLE @DATA(lt_kna1).
  ENDIF.

  IF lt_kna1 IS NOT INITIAL.
    SELECT
         kukla,
         vtext
    FROM tkukt FOR ALL ENTRIES IN @lt_kna1
    WHERE kukla = @lt_kna1-kukla
      AND spras =  @sy-langu
      INTO TABLE @DATA(lt_tkukt).
  ENDIF.

* Sd deposilt_dfkkopt bank
  IF lt_dfkkop[] IS NOT INITIAL .
    SELECT klaeb,
           hbkid,
           hktid
        FROM dfkkzp FOR ALL ENTRIES IN @lt_dfkkop
        WHERE klaeb = @lt_dfkkop-augbl       "OPBEL     "
          INTO TABLE @DATA(lt_dfkkzp_sdd).
  ENDIF.

*Amc deposit bank
  IF  lt_dfkkop_amcd[] IS NOT INITIAL.
    SELECT  klaeb,
            hbkid,
            hktid
        FROM dfkkzp FOR ALL ENTRIES IN @lt_dfkkop_amcd
        WHERE klaeb =  @lt_dfkkop_amcd-augbl
*       or  klaeb = @lt_dfkkop_amcd-OPBEL )
          INTO TABLE @DATA(lt_dfkkzp_amcd).
  ENDIF.

*  IF  lt_dfkkop_amcd[] IS NOT INITIAL.
*    SELECT klaeb,
*           hbkid,
*          hktid
*        FROM dfkkzp FOR ALL ENTRIES IN @lt_dfkkop_amcd
*        WHERE klaeb = @lt_dfkkop_amcd-augbl
*          INTO TABLE @DATA(lt_dfkkzp_amcd).
*  ENDIF.


*sd deposit bank description
  IF lt_dfkkzp_sdd[] IS NOT INITIAL.
    SELECT                                         "#EC CI_NO_TRANSFORM
               hbkid,
               hktid,
                text1
         FROM t012t FOR ALL ENTRIES IN @lt_dfkkzp_sdd
         WHERE  hbkid = @lt_dfkkzp_sdd-hbkid
             AND hktid = @lt_dfkkzp_sdd-hktid
             AND spras =  @sy-langu
           INTO TABLE @DATA(lt_t012t_sdd).
  ENDIF.

*Amc deposit bank description
  IF lt_dfkkzp_amcd[] IS NOT INITIAL.
    SELECT                                         "#EC CI_NO_TRANSFORM
         hbkid,
         hktid,
         text1
         FROM t012t FOR ALL ENTRIES IN @lt_dfkkzp_amcd
         WHERE  hbkid = @lt_dfkkzp_amcd-hbkid
              AND hktid = @lt_dfkkzp_amcd-hktid
             AND spras =  @sy-langu
           INTO TABLE @DATA(lt_t012t_amcd).
  ENDIF.

  LOOP AT lt_ever ASSIGNING FIELD-SYMBOL(<fs_ever>).
    IF line_exists( lt_fkkvkp[ vkont  = <fs_ever>-vkonto ] ).
      DATA(ls_fkkvkp_t)  = lt_fkkvkp[ vkont = <fs_ever>-vkonto ].
      IF line_exists( lt_but020[ partner = ls_fkkvkp_t-gpart  ] ).
        DATA(ls_but020_t)  = lt_but020[ partner = ls_fkkvkp_t-gpart  ].
        IF line_exists( lt_adrc[ addrnumber = ls_but020_t-addrnumber ] ).
          DATA(ls_adrc_t) = lt_adrc[ addrnumber = ls_but020_t-addrnumber ].
          CONCATENATE ls_adrc_t-roomnumber ls_adrc_t-str_suppl2 ls_adrc_t-floor ls_adrc_t-building ls_adrc_t-street ls_adrc_t-house_num1
           ls_adrc_t-house_num2 ls_adrc_t-str_suppl1  ls_adrc_t-city1  ls_adrc_t-city2
           ls_adrc_t-post_code1 ls_adrc_t-country INTO wa_final-bp_address SEPARATED BY ' '.
          wa_final-grid     = ls_adrc_t-city1.
          wa_final-ward_num     = ls_adrc_t-building.
        ELSE.
          CONTINUE.
        ENDIF.
      ENDIF.
    ENDIF.
    IF line_exists( lt_adr2[ addrnumber = ls_but020_t-addrnumber  ] ).
      DATA(ls_adr2_t)  = lt_adr2[ addrnumber = ls_but020_t-addrnumber  ].
      wa_final-tel_num     = ls_adr2_t-tel_number.               "Telephone number
    ENDIF.

    wa_final-move_in_date  = <fs_ever>-einzdat.
    wa_final-create_by  = <fs_ever>-ernam.
    wa_final-create_on   = <fs_ever>-erdat.
*    IF line_exists( lt_eastl[ anlage = <fs_ever>-anlage  ] ).
*      DATA(ls_eastl_t)  =  lt_eastl[ anlage = <fs_ever>-anlage ] .
*      wa_final-dev_num   = ls_eastl_t-logiknr.    "device number
*    ENDIF.

    IF line_exists( lt_eablg[ anlage = <fs_ever>-anlage  ] ).
      DATA(ls_eablg_t)  =  lt_eablg[ anlage = <fs_ever>-anlage ] .
      IF line_exists( lt_eabl[ ablbelnr = ls_eablg_t-ablbelnr  ] ).
        DATA(ls_eabl_t)  =  lt_eabl[ ablbelnr = ls_eablg_t-ablbelnr ] .
        wa_final-dev_num   = ls_eabl_t-gernr.              "device number
*        wa_final-move_in_mru  = ls_eabl_t-v_zwstand.       " initial meter reading
        IF wa_final-move_in_mru IS INITIAL .
          wa_final-move_in_mru  = ls_eabl_t-v_zwstand + ls_eabl_t-n_zwstand.     " initial meter reading
        ENDIF.
      ENDIF.
    ENDIF.
*    IF line_exists( lt_equi[ equnr = ls_eabl_t-equnr  ] ).
*      DATA(ls_equi_t) = lt_equi[ equnr = ls_eabl_t-equnr ] .
*      wa_final-dev_num   = ls_equi_t-serge.    "device number
*    ENDIF.

*  *    for scheme
    IF line_exists( lt_kna1[ kunnr = ls_fkkvkp_t-gpart  ] ).
      DATA(ls_kna1_t)  = lt_kna1[ kunnr = ls_fkkvkp_t-gpart ].
      IF line_exists( lt_tkukt[ kukla = ls_kna1_t-kukla   ] ).
        DATA(ls_tkukt_t)  = lt_tkukt[ kukla = ls_kna1_t-kukla  ].
        wa_final-scheme  = ls_tkukt_t-vtext.
      ENDIF.
    ENDIF.
    IF line_exists( lt_but[ partner = ls_fkkvkp_t-gpart  ] ).
      DATA(ls_but_t) =  lt_but[ partner = ls_fkkvkp_t-gpart ] .
      CONCATENATE ls_but_t-name_first ls_but_t-name_last  INTO wa_final-bp_name SEPARATED BY ''. " bp name
    ENDIF.

    wa_final-bp_number  =  ls_fkkvkp_t-gpart.        " bp number

    IF line_exists( lt_dfkkop_amc1[ gpart = ls_fkkvkp_t-gpart  ] ).
      DATA(ls_dfkkop_amc1_t)  = lt_dfkkop_amc1[ gpart = ls_fkkvkp_t-gpart ].
      wa_final-amc_amount  = ls_dfkkop_amc1_t-betrw.      " AMS  amount
    ENDIF .

**  for AMC amount deposit by scheme
*    IF line_exists( lt_dfkkop_amcd[ gpart = ls_fkkvkp_t-gpart  ] ).
*      DATA(ls_dfkkop_amcd_t)  = lt_dfkkop_amcd[ gpart = ls_fkkvkp_t-gpart ].
*      wa_final-amc_date  = ls_dfkkop_amcd_t-augdt.             "Amc deposit date by scheme
*    ENDIF .

    IF line_exists( lt_dfkkop_amcd1[ gpart = ls_fkkvkp_t-gpart  ] ).
      DATA(ls_dfkkop_amcd1_t)  = lt_dfkkop_amcd1[ gpart = ls_fkkvkp_t-gpart ].
      wa_final-amc_damt_sch  = ls_dfkkop_amcd1_t-augbt.      " AMS deposited amount by scheme
    ENDIF .

*        * for amc bank deposit by scheme
*  for AMC amount deposit by scheme
    IF line_exists( lt_dfkkop_amcd[ gpart = ls_fkkvkp_t-gpart  ] ).
      DATA(ls_dfkkop_amcd_t)  = lt_dfkkop_amcd[ gpart = ls_fkkvkp_t-gpart ].
      wa_final-amc_date  = ls_dfkkop_amcd_t-augdt.             "Amc deposit date by scheme
      IF line_exists( lt_dfkkzp_amcd[ klaeb = ls_dfkkop_amcd_t-augbl  ] ).
        DATA(ls_dfkkzp_amcd_t)  = lt_dfkkzp_amcd[ klaeb = ls_dfkkop_amcd_t-augbl ].
        IF line_exists( lt_t012t_amcd[ hbkid = ls_dfkkzp_amcd_t-hbkid   ] ).   "hktid
          DATA(ls_t012t_amcd_t)  = lt_t012t_amcd[ hbkid = ls_dfkkzp_amcd_t-hbkid  ].   "hktid
          wa_final-amc_bank_sch   =   ls_t012t_amcd_t-text1.
        ENDIF.
      ENDIF.

      IF line_exists( lt_dfkkop_sd[ gpart = ls_fkkvkp_t-gpart  ] ).
        DATA(ls_dfkkop_sd_t)  = lt_dfkkop_sd[ gpart = ls_fkkvkp_t-gpart ].
        wa_final-sd_amnt  = ls_dfkkop_sd_t-betrw.     " sd  amount
        wa_final-sd_date  =  ls_dfkkop_sd_t-augbt.   " SD date
      ENDIF .
    ENDIF .
*
** for SD bank deposit by scheme
    IF line_exists( lt_dfkkop[ gpart = ls_fkkvkp_t-gpart   ] ).
      DATA(ls_dfkkop_t)  = lt_dfkkop[ gpart = ls_fkkvkp_t-gpart ].
      wa_final-sd_date  =  ls_dfkkop_t-budat.   " SD date
      IF line_exists( lt_dfkkzp_sdd[ klaeb = ls_dfkkop_t-augbl  ] ).
        DATA(ls_dfkkzp_sdd_t)  = lt_dfkkzp_sdd[ klaeb = ls_dfkkop_t-augbl ].
        IF line_exists( lt_t012t_sdd[ hbkid = ls_dfkkzp_sdd_t-hbkid  ] ).
          DATA(ls_t012t_sdd_t)  = lt_t012t_sdd[ hbkid = ls_dfkkzp_sdd_t-hbkid ].
          wa_final-sd_depbank   =   ls_t012t_sdd_t-text1.
        ENDIF.
      ENDIF.
    ENDIF .
    APPEND wa_final TO   gt_final .
    CLEAR : wa_final,ls_dfkkzp_sdd_t,ls_dfkkop_t,ls_fkkvkp_t,ls_dfkkzp_amcd_t,ls_t012t_sdd_t,ls_t012t_amcd_t.

  ENDLOOP.

*  LOOP AT lt_but ASSIGNING FIELD-SYMBOL(<fs_but>).
**   APPEND INITIAL LINE TO gt_final ASSIGNING FIELD-SYMBOL(<fs_final>).
*    CONCATENATE <fs_but>-name_first <fs_but>-name_last  INTO wa_final-bp_name SEPARATED BY ''.
*    wa_final-bp_number  =  <fs_but>-partner.
*
**    IF line_exists( lt_dfkkop_amc[ gpart = <fs_but>-partner  ] ).
**      DATA(ls_dfkkop_amc2)  = lt_dfkkop_amc[ gpart = <fs_but>-partner ].
**      wa_final-amc_date  = ls_dfkkop_amc2-budat.             "Amc date
**    ENDIF .
*
*    IF line_exists( lt_dfkkop_amc1[ gpart = <fs_but>-partner  ] ).       "Gsp
*      DATA(ls_dfkkop_amc3)  = lt_dfkkop_amc1[ gpart = <fs_but>-partner ].
*      wa_final-amc_amount  = ls_dfkkop_amc3-betrw.      " AMS  amount
*    ENDIF .
**  for AMC amount deposit by scheme                                     "gsp
*    IF line_exists( lt_dfkkop_amcd[ gpart = <fs_but>-partner  ] ).
*      DATA(ls_dfkkop_amcd2)  = lt_dfkkop_amcd[ gpart = <fs_but>-partner ].
*      wa_final-amc_date  = ls_dfkkop_amcd2-augdt.             "Amc deposit date by scheme
*    ENDIF .
*
*    IF line_exists( lt_dfkkop_amcd1[ gpart = <fs_but>-partner  ] ).
*      DATA(ls_dfkkop_amcd3)  = lt_dfkkop_amcd1[ gpart = <fs_but>-partner ].
*      wa_final-amc_damt_sch  = ls_dfkkop_amcd3-augbt.      " AMS deposited amount by scheme
*    ENDIF .
*
*    IF line_exists( lt_dfkkop_sd[ gpart = <fs_but>-partner  ] ).     "gsp
*      DATA(ls_dfkkop_sd1)  = lt_dfkkop_sd[ gpart = <fs_but>-partner ].
*      wa_final-sd_amnt  = ls_dfkkop_sd1-betrw.     " sd  amount
*    ENDIF .
*
*    IF line_exists( lt_but020[ partner = <fs_but>-partner  ] ).               "Gsp
*      DATA(ls_but020_1)  = lt_but020[ partner = <fs_but>-partner  ].
*      IF line_exists( lt_adr2[ addrnumber = ls_but020_1-addrnumber  ] ).
*        DATA(ls_adr2)  = lt_adr2[ addrnumber = ls_but020_1-addrnumber  ].
*        wa_final-tel_num     = ls_adr2-tel_number.               "Telephone number
*      ENDIF.
*    ENDIF.
*    IF line_exists( lt_but020[ partner = <fs_but>-partner  ] ).      "gsp
*      DATA(ls_but020)  = lt_but020[ partner = <fs_but>-partner  ].
*      IF line_exists( lt_adrc[ addrnumber = ls_but020-addrnumber ] ).
*        DATA(ls_adrc) = lt_adrc[ addrnumber = ls_but020-addrnumber ].
*        CONCATENATE ls_adrc-roomnumber ls_adrc-str_suppl2 ls_adrc-floor ls_adrc-building ls_adrc-street ls_adrc-house_num1
*         ls_adrc-house_num2 ls_adrc-str_suppl1  ls_adrc-city1  ls_adrc-city2
*         ls_adrc-post_code1 ls_adrc-country INTO wa_final-bp_address SEPARATED BY ' '.
*        wa_final-grid     = ls_adrc-city1.
*        wa_final-ward_num     = ls_adrc-building.
*      ELSE.
*        CONTINUE.
*      ENDIF.
*    ENDIF.
*    IF line_exists( lt_fkkvkp[ gpart = <fs_but>-partner  ] ).    " gsp
*      DATA(ls_fkkvkp)  = lt_fkkvkp[ gpart = <fs_but>-partner ].
*      IF line_exists( lt_ever[ vkonto = ls_fkkvkp-vkont  ] ).
*        DATA(ls_ever)  =  lt_ever[ vkonto = ls_fkkvkp-vkont ] .
*        wa_final-move_in_date  = ls_ever-einzdat.
*        wa_final-create_by  = ls_ever-ernam.
*        wa_final-create_on   = ls_ever-erdat.
*        IF line_exists( lt_eastl[ anlage = ls_ever-anlage  ] ).
*          DATA(ls_eastl)  =  lt_eastl[ anlage = ls_ever-anlage ] .
*          wa_final-dev_num   = ls_eastl-logiknr.    "device number
*        ENDIF.
*        IF line_exists( lt_eablg[ anlage = ls_ever-anlage  ] ).       "gsp
*          DATA(ls_eablg)  =  lt_eablg[ anlage = ls_ever-anlage ] .
*          IF line_exists( lt_eabl[ ablbelnr = ls_eablg-ablbelnr  ] ).
*            DATA(ls_eabl)  =  lt_eabl[ ablbelnr = ls_eablg-ablbelnr ] .
*            wa_final-move_in_mru  = ls_eabl-v_zwstand.       " initial meter reading
*            IF wa_final-move_in_mru IS INITIAL .
*              wa_final-move_in_mru  = ls_eabl-n_zwstand.     " initial meter reading
*            ENDIF.
*          ENDIF.
*        ENDIF.
*      ENDIF.
*    ENDIF.
**    for scheme
*    IF line_exists( lt_kna1[ kunnr = <fs_but>-partner  ] ).       " gsp
*      DATA(ls_kna1)  = lt_kna1[ kunnr = <fs_but>-partner ].
*      IF line_exists( lt_tkukt[ kukla = ls_kna1-kukla   ] ).
*        DATA(ls_tkukt)  = lt_tkukt[ kukla = ls_kna1-kukla  ].
*        wa_final-scheme  = ls_tkukt-vtext.
*      ENDIF.
*    ENDIF.
*
** for amc bank deposit by scheme                               " gsp
**    IF line_exists( lt_dfkkop_amcd[ gpart = <fs_but>-partner  ] ).
**      DATA(ls_dfkkop_amcd4)  = lt_dfkkop_amcd[ gpart = <fs_but>-partner ].
*    IF line_exists( lt_dfkkzp_amcd[ klaeb = ls_dfkkop_amcd-augbl  ] ).
*      DATA(ls_dfkkzp_amcd)  = lt_dfkkzp_amcd[ klaeb = ls_dfkkop_amcd-augbl ].
*
*      IF line_exists( lt_t012t_amcd[ hktid = ls_dfkkzp_amcd-hktid  ] ).
*        DATA(ls_t012t_amcd)  = lt_t012t_amcd[ hktid = ls_dfkkzp_amcd-hktid ].
*        wa_final-amc_bank_sch   =   ls_t012t_amcd-text1.
*      ENDIF.
*    ENDIF.
**    ENDIF .
*
*** for SD bank deposit by scheme
*    IF line_exists( lt_dfkkop[ gpart = <fs_but>-partner  ] ).
*      DATA(ls_dfkkop4)  = lt_dfkkop[ gpart = <fs_but>-partner ].
*      IF line_exists( lt_dfkkzp_sdd[ klaeb = ls_dfkkop4-augbl  ] ).
*        DATA(ls_dfkkzp_sdd)  = lt_dfkkzp_sdd[ klaeb = ls_dfkkop4-augbl ].
*
*        IF line_exists( lt_t012t_sdd[ hbkid = ls_dfkkzp_sdd-hbkid  ] ).
*          DATA(ls_t012t_sdd)  = lt_t012t_sdd[ hbkid = ls_dfkkzp_sdd-hbkid ].
*          wa_final-sd_depbank   =   ls_t012t_sdd-text1.
*        ENDIF.
*      ENDIF.
*    ENDIF .
**   SD_DEPBANK
*
*
*
**    CONCATENATE <fs_but>-name_first <fs_but>-name_last  INTO <fs_final>-BP_Name.
**    endif.
*
*    APPEND wa_final TO   gt_final .
*  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form display_alv_rpt
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM display_alv_rpt .
  DATA: lv_count_c   TYPE char10,
        lv_tot_count TYPE p DECIMALS 0.
  DATA :
*         gr_table       TYPE REF TO     cl_salv_table,
    lr_functions TYPE REF TO     cl_salv_functions_list,
    lr_layout    TYPE REF TO     cl_salv_layout,
    ls_key       TYPE            salv_s_layout_key,
    lr_display   TYPE REF TO     cl_salv_display_settings,
    lr_columns   TYPE REF TO     cl_salv_columns,
    lr_column    TYPE REF TO     cl_salv_column.
  DATA: lr_aggregations TYPE REF TO cl_salv_aggregations,
        lr_sort         TYPE REF TO cl_salv_sorts.
  DATA :lr_msg    TYPE REF TO     cx_salv_msg,
        lr_msg1   TYPE REF TO     cx_salv_not_found,
        lv_string TYPE            string.
  CONSTANTS:lc_mtype   TYPE            sy-msgty VALUE 'I'.

* DATA: lo_header  TYPE REF TO cl_salv_form_layout_grid,
*          lo_h_label TYPE REF TO cl_salv_form_label,
*          lo_h_flow  TYPE REF TO cl_salv_form_layout_flow.

**   header object
*    CREATE OBJECT lo_header.
*
*   To create a Lable or Flow we have to specify the target
*     row and column number where we need to set up the output
*     text.
*
*   information in Bold
*    gr_table = lo_header->create_label( row = 1 column = 1 ).
*    lo_h_label->set_text( 'Header in Bold' ).

* Initiate Table
*  IF  gt_final IS NOT INITIAL.
  TRY.
      cl_salv_table=>factory(
        IMPORTING
          r_salv_table = gr_table
        CHANGING
          t_table      = gt_final[]  ).
    CATCH cx_salv_msg.
  ENDTRY.

  DATA(lo_header) = NEW cl_salv_form_layout_grid( ).

  DATA(lo_h_flow) = lo_header->create_flow( row = 2 column = 1 ).
  lv_tot_count = lines( gt_final ).
  lv_count_c = lv_tot_count.
  CONDENSE lv_count_c.
  lo_h_flow->create_text( text = 'Total records:' && | | && lv_count_c ) ##NO_TEXT.
  CLEAR lv_count_c.

  gr_table->set_top_of_list( lo_header ).

* * Get Functions
  lr_functions = gr_table->get_functions( ).
* Get Functions
  lr_functions = gr_table->get_functions( ).

* *. activate ALV generic Functions
  lr_functions->set_all( abap_true ).
*****************
  lr_layout = gr_table->get_layout( ).

  ls_key-report = sy-repid.
  lr_layout->set_key( ls_key ).
  lr_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).

* * Get Columns
  lr_columns = gr_table->get_columns( ).
  gr_table->get_columns( )->set_optimize( abap_true ).
  TRY.

** bp name
      lr_column = lr_columns->get_column( 'BP_NAME' ).   "##NO_TEXT
*      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        lr_column->set_long_text('BP Name' ) ##NO_TEXT.
        lr_column->set_short_text( 'BPName' ) ##NO_TEXT.
        lr_column->set_medium_text('BP Name' ) ##NO_TEXT.
      ENDIF.
**BP number
      lr_column = lr_columns->get_column( 'BP_NUMBER' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        lr_column->set_long_text('BP Number' ) ##NO_TEXT .
        lr_column->set_short_text( 'Bp_Num' ) ##NO_TEXT.
        lr_column->set_medium_text('Bp_num' ) ##NO_TEXT.
      ENDIF.
**  **bp ADRESS
      lr_column = lr_columns->get_column( 'BP_ADDRESS' ).
      lr_column->set_output_length( 80 ).
      IF lr_column IS BOUND.
        lr_column->set_long_text('BP Address' ) ##NO_TEXT.
        lr_column->set_short_text( 'BP_Add' ) ##NO_TEXT.
        lr_column->set_medium_text('BP_Add' ) ##NO_TEXT.
      ENDIF.

* **MOVE in date
      lr_column = lr_columns->get_column( 'MOVE_IN_DATE' ) .
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        lr_column->set_long_text( 'Move in date' ) ##NO_TEXT.
        lr_column->set_short_text( 'MID' ) ##NO_TEXT.
        lr_column->set_medium_text('Move in D' ) ##NO_TEXT.
      ENDIF.

* **  .Commissioing/Move-In Meter Reading   Initial Meter Reading
      lr_column = lr_columns->get_column( 'MOVE_IN_MRU' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT      lr_column->set_long_text('Initial Meter Reading' ).
        ##NO_TEXT     lr_column->set_short_text( 'IMR' ).
        ##NO_TEXT     lr_column->set_medium_text('Move in MR' ).
      ENDIF.

* **  Device Number
      lr_column = lr_columns->get_column( 'DEV_NUM' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT   lr_column->set_long_text('Device Number' ).
        ##NO_TEXT   lr_column->set_short_text( 'DNUMRU' ) .
        ##NO_TEXT    lr_column->set_medium_text('D Number' ).
      ENDIF.

*   *SD  date- DATE
      lr_column = lr_columns->get_column( 'SD_DATE' ) .
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT lr_column->set_long_text('SD Deposited Date' ) ##NO_TEXT.
        ##NO_TEXT lr_column->set_short_text( 'SD DAT' ) ##NO_TEXT.
        ##NO_TEXT  lr_column->set_medium_text('SD DAT' ) ##NO_TEXT.
      ENDIF.

*SD Deposited (Bank)

      lr_column = lr_columns->get_column( 'SD_DEPBANK' ) .
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT lr_column->set_long_text('SD Deposited (Bank)' ) ##NO_TEXT.
        ##NO_TEXT lr_column->set_short_text( 'SD Bannk' ) ##NO_TEXT.
        ##NO_TEXT  lr_column->set_medium_text('SD Bank' ) ##NO_TEXT.
      ENDIF.

* scheme
      lr_column = lr_columns->get_column( 'SCHEME' ) .
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT  lr_column->set_long_text('Scheme' ) ##NO_TEXT .
        ##NO_TEXT  lr_column->set_short_text( 'Scheme' )  ##NO_TEXT.
        ##NO_TEXT lr_column->set_medium_text('Scheme' ) ##NO_TEXT.
      ENDIF.

* Security Deposit Amount
      lr_column = lr_columns->get_column( 'SD_AMNT' ) .
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT  lr_column->set_long_text('Security Deposit Amountr' ) ##NO_TEXT .
        ##NO_TEXT  lr_column->set_short_text( 'SD_AMT' )  ##NO_TEXT.
        ##NO_TEXT lr_column->set_medium_text('SD Amount' ) ##NO_TEXT.
      ENDIF.
*      *  AMC Deposited Bank and date- DATE
      lr_column = lr_columns->get_column( 'AMC_DATE' ) .
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT lr_column->set_long_text('AMC Deposited bank date' ) ##NO_TEXT.
        ##NO_TEXT lr_column->set_short_text( 'AMC DAT' ) ##NO_TEXT.
        ##NO_TEXT  lr_column->set_medium_text('AMC DEP DAT' ) ##NO_TEXT.
      ENDIF.
*      *  AMC Deposited Bank description Amc_bank_sch
      lr_column = lr_columns->get_column( 'AMC_BANK_SCH' ) .
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT lr_column->set_long_text('AMC Deposited bank Description' ) ##NO_TEXT.
        ##NO_TEXT lr_column->set_short_text( 'AMC DD' ) ##NO_TEXT.
        ##NO_TEXT  lr_column->set_medium_text('AMC Bank descrp' ) ##NO_TEXT.
      ENDIF.

*  Additional Material Cost (If any)- Total Amount
      lr_column = lr_columns->get_column( 'AMC_AMOUNT' ) .
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT  lr_column->set_long_text('AMC Amountr' ) ##NO_TEXT.
        ##NO_TEXT lr_column->set_short_text( 'T_AMNT' ) ##NO_TEXT.
        ##NO_TEXT lr_column->set_medium_text('T Amount' ) ##NO_TEXT.
      ENDIF.

*      AMC Deposited Amount as per scheme Amc_damt_sch
      lr_column = lr_columns->get_column( 'AMC_DAMT_SCH' ) .
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT  lr_column->set_long_text(' AMC Deposited Amount as per scheme' ) ##NO_TEXT.
        ##NO_TEXT lr_column->set_short_text( 'AMCDS' ) ##NO_TEXT.
        ##NO_TEXT lr_column->set_medium_text('AMC DepoS AMT BY SCH' ) ##NO_TEXT.
      ENDIF.

*      Created on
      lr_column = lr_columns->get_column( 'CREATE_ON' ) .
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT  lr_column->set_long_text('Created on' ) ##NO_TEXT.
        ##NO_TEXT lr_column->set_short_text( 'CRTON' )  ##NO_TEXT.
        ##NO_TEXT  lr_column->set_medium_text('Create on ' ) ##NO_TEXT.
      ENDIF.

*        created by
      ##NO_TEXT   lr_column = lr_columns->get_column( 'CREATE_BY' ) .
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT      lr_column->set_long_text('Created By ' ) .
        ##NO_TEXT     lr_column->set_short_text( 'CRTBY' ).
        ##NO_TEXT     lr_column->set_medium_text('Create by' ).
      ENDIF.
*      Phone Number
      lr_column = lr_columns->get_column( 'TEL_NUM' ) .
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT      lr_column->set_long_text('Phone Number ' ).
        ##NO_TEXT      lr_column->set_short_text( 'PH NUM' ).
        ##NO_TEXT     lr_column->set_medium_text('PH NUM' ).
      ENDIF.
*    Grid Name
      lr_column = lr_columns->get_column( 'GRID' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT        lr_column->set_long_text('Grid Name ' ).
        ##NO_TEXT     lr_column->set_short_text( 'GName' ).
        ##NO_TEXT    lr_column->set_medium_text('Grid Name' ).
      ENDIF.
*       ward number
      ##NO_TEXT    lr_column = lr_columns->get_column( 'WARD_NUM' ) .
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT        lr_column->set_long_text('Ward Number ' ).
        ##NO_TEXT  lr_column->set_short_text( 'Wardno' ).
        ##NO_TEXT   lr_column->set_medium_text('Ward Num' ).
      ENDIF.
**    Initial Meter Reading
*      ##NO_TEXT    lr_column = lr_columns->get_column( 'INT_MR' ) .
*      lr_column->set_output_length( 30 ).
*      IF lr_column IS BOUND.
*        ##NO_TEXT        lr_column->set_long_text('Initial Meter Reading ' ).
*        ##NO_TEXT  lr_column->set_short_text( 'IMR' ).
*        ##NO_TEXT   lr_column->set_medium_text('INT Meter Read' ).
*      ENDIF.
*    Vendor
      ##NO_TEXT    lr_column = lr_columns->get_column( 'VENDR' ) .
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT        lr_column->set_long_text('Vendor ' ).
        ##NO_TEXT  lr_column->set_short_text( 'VENDR' ).
        ##NO_TEXT   lr_column->set_medium_text('Vendor' ).
      ENDIF.
    CATCH cx_salv_not_found INTO lr_msg1.
      lv_string = lr_msg1->get_text( ).
      MESSAGE lv_string TYPE lc_mtype .
  ENDTRY.
  gr_table->display( ).
*  ENDIF.
ENDFORM.

**************************************************************************************************************************************************

8th block
ZISU_CM_CONTRA - tcode
ZISU_CM_R_CONT_WISE_CONSUMER - prg_name

**************************************************************************************************************************************************

*&---------------------------------------------------------------------*
*& Report ZISU_CM_R_CONT_WISE_CONSUMER
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
*& Description :Create a Report for Contractor wise Consumer Report
*& Requirement Provided By : Raj Kumar D
*& Code Written By : Syam Gogineni
*& Code Written On (DD.MM.YYYY):
*& Company Name :
*& Transport Request No :DE1K900790
*& Transaction code :
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& CHANGE HISTORY:
*& Date:
*& Changed By:
*& Description:
*"---------------------------------------------------------------------*
REPORT zisu_cm_r_cont_wise_consumer.
INCLUDE zisu_cm_r_cont_wise_consmr_top.
INCLUDE zisu_cm_r_cont_wise_consmr_ff.
DATA: gt_return TYPE TABLE OF ddshretval.

INITIALIZATION.

  s_post-sign  = 'I'.
  s_post-option = 'BT'.
  s_post-low = '20230101'.
  s_post-high = sy-datum.
  APPEND s_post TO s_post[].

  s_bptype-sign  = 'I'.
  s_bptype-option = 'EQ'.

  s_bptype-low = 'ZCOM'.
  s_bptype-high = ''.
  APPEND s_bptype TO s_bptype[].
  s_bptype-low = 'ZDOM'.
  s_bptype-high = ''.
  APPEND s_bptype TO s_bptype[].
  s_bptype-low = 'ZIND'.
  s_bptype-high = ''.
  APPEND s_bptype TO s_bptype[].

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_bptype-low.
  SELECT bpkind, text40
     FROM tb004t
     INTO TABLE @DATA(lt_bptype)
  WHERE spras = @sy-langu.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'BPKIND'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_BPTYPE'
      value_org       = 'S'
    TABLES
      value_tab       = lt_bptype
      return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

  IF gt_return IS NOT INITIAL.
*    MESSAGE ' PlZ enter valid value  LIKE ZCOD ZDOM  XXX  : ' TYPE gc_e.
  ENDIF.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_bptype-high.
  SELECT bpkind, text40
       FROM tb004t
       INTO TABLE @DATA(lt_bptype)
  WHERE spras = @sy-langu.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'BPKIND'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_BPTYPE'
      value_org       = 'S'
    TABLES
      value_tab       = lt_bptype
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_grid-low.
  SELECT house_num1
       FROM adrc
  INTO TABLE @DATA(lt_grid).                            "#EC CI_NOWHERE
  DELETE lt_grid WHERE house_num1 IS INITIAL.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'AD_HSNM1'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_GRID'
      value_org       = 'S'
    TABLES
      value_tab       = lt_grid
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_grid-high.
  SELECT house_num1
       FROM adrc
  INTO TABLE @DATA(lt_grid).                            "#EC CI_NOWHERE
  DELETE lt_grid WHERE house_num1 IS INITIAL.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'AD_HSNM1'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_GRID'
      value_org       = 'S'
    TABLES
      value_tab       = lt_grid
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.


*&-------------------------------------------------------------&*
*&                  START-OF-SELECTION
*&-------------------------------------------------------------&*
START-OF-SELECTION.
  PERFORM fetch_data.
  PERFORM display_alv_rpt.

********************************************************************************************************************

*&---------------------------------------------------------------------*
*& Include          ZISU_CM_R_CONT_WISE_CONSMR_TOP
*&---------------------------------------------------------------------*
TYPE-POOLS: slis.
TABLES :erdk.
*  zcm_group_ca,adrc,zcm_bp_data.
RANGES r_date FOR sy-datum.

DATA : gt_dma_data TYPE TABLE OF zcm_bp_data,
       gr_table    TYPE REF TO     cl_salv_table.

constants: gc_e type c value 'E'.

TYPES: BEGIN OF ty_final,
         bp_number    TYPE bu_partner,
         bp_name      TYPE name_first,
         bp_address   TYPE bu_name1tx,
         move_in_date TYPE sy-datum,
         sd_amt       type  wrbtr,      " SD amount
         total_amount TYPE  wrbtr,      " AMC amount
         cont_name    type  char30,     " Name of the Contractor
         work_by      type  char30,      "Work monitored by
       END OF ty_final.

DATA : gt_final    TYPE TABLE OF ty_final.

DATA: gv_date TYPE  sy-datum, "posting date .
      gv_BPTYPE    TYPE  bu_bpkind , "BP TYPE
      gv_cont TYPE  elifn , "vkont_kk, "Contract Accounrt number
      gv_grid TYPE  ad_hsnm1. " Grid.
*      gv_ward TYPE  ad_bldng. "Ward no


SELECTION-SCREEN BEGIN OF BLOCK 0001 WITH FRAME TITLE TEXT-017.

  SELECT-OPTIONS:  s_post         FOR   gv_date OBLIGATORY ,
                   s_BPTYPE       FOR   gv_BPTYPE OBLIGATORY,
                    s_vcont      FOR   gv_cont,
                   s_grid         FOR   gv_grid.
*                   s_ward         FOR   gv_ward.

SELECTION-SCREEN END OF BLOCK 0001.

**********************************************************************************************************

*&---------------------------------------------------------------------*
*& Include          ZISU_CM_R_CONT_WISE_CONSMR_FF
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form fetch_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fetch_data .

  TYPES: BEGIN OF ty_dfkkop1,
           gpart TYPE dfkkop-gpart,
           vkont TYPE dfkkop-vkont,
           betrw TYPE dfkkop-betrw,
*           waers TYPE dfkkop-waers,
         END OF ty_dfkkop1.

  DATA : lt_dfkkop1    TYPE TABLE OF  ty_dfkkop1,
         ls_dfkkop1    TYPE  ty_dfkkop1,
         lt_dfkkop_sdf TYPE TABLE OF  ty_dfkkop1,
         ls_dfkkop_sdf TYPE  ty_dfkkop1.

  SELECT partner,
            type,
            bpkind,
            bu_group,
            name_org1,
            name_org2,
            name_last,
            name_first
       FROM but000
**       WHERE partner IN @s_vcont
     WHERE bpkind IN @s_bptype
        AND partner IN @s_vcont
        AND  crdat   IN @s_post
       INTO TABLE @DATA(lt_but).
* ENDIF.
  SORT lt_but[] BY partner.

  IF lt_but[] IS NOT INITIAL.
    SELECT partner, addrnumber
        FROM but020
        FOR ALL ENTRIES IN @lt_but
        WHERE partner = @lt_but-partner
        INTO TABLE @DATA(lt_but020).
  ENDIF.

  IF lt_but020[] IS NOT INITIAL.

    SELECT            addrnumber, "#EC CI_NO_TRANSFORM  "#EC CI_NOWHERE
                        city1,
                        city2,
                        post_code1,
                        street,
                        house_num1,
                        house_num2,
                        str_suppl1,
                        str_suppl2,
                        str_suppl3,
                        location,
                        building,
                        floor,
                        roomnumber,
                        country
                        FROM adrc
                       FOR ALL ENTRIES IN @lt_but020
                        WHERE addrnumber = @lt_but020-addrnumber "#EC CI_NOWHERE
                       INTO TABLE @DATA(lt_adrc).
*      SELECT addrnumber
*             persnumber
*             date_from
*             consnumber
*             tel_number
*             r3_user    FROM adr2 INTO TABLE it_adr2
*                        WHERE addrnumber = wa_but020-addrnumber
*                        AND ( r3_user = '1' OR r3_user = '3' ).
*
*    SELECT addrnumber,
*           persnumber,
*           date_from,
*           consnumber,
*           tel_number
*      FROM adr2
*      FOR ALL ENTRIES IN @lt_but020
*      WHERE addrnumber = @lt_but020-addrnumber
*      AND r3_user = '3'
*      AND valid_to LE '99991231235959'
*      INTO TABLE @DATA(lt_adr2).
  ENDIF.

  IF lt_but IS NOT INITIAL.
    SELECT vkont,gpart FROM fkkvkp FOR ALL ENTRIES IN @lt_but
       WHERE gpart = @lt_but-partner INTO TABLE @DATA(lt_fkkvkp).
  ENDIF.

  IF lt_fkkvkp[] IS NOT INITIAL.
*    for move in date
    SELECT vertrag,anlage,vkonto,auszdat, erdat,ernam  FROM ever INTO TABLE @DATA(lt_ever) "#EC CI_NO_TRANSFORM
              FOR ALL ENTRIES IN @lt_fkkvkp
              WHERE vkonto = @lt_fkkvkp-vkont.
  ENDIF.
*For AMC
  SELECT opbel,                           "#EC CI_FAE_LINES_ENSURED or "#EC CI_FAE_NO_LINES_OK
           gpart,
           vkont,
           betrw
      FROM dfkkop FOR ALL ENTRIES IN @lt_but
      WHERE gpart = @lt_but-partner
         AND hvorg = '6500'
         AND augrd NE '05'
        INTO TABLE @DATA(lt_dfkkop).


  LOOP AT lt_dfkkop INTO  DATA(ls_dfkkop).
    ls_dfkkop1-gpart          = ls_dfkkop-gpart.
    ls_dfkkop1-vkont          = ls_dfkkop-vkont.
    ls_dfkkop1-betrw          = ls_dfkkop-betrw.
*  COLLECT <fs_dfkkop> INTO lt_dfkkop.
    COLLECT ls_dfkkop1 INTO  lt_dfkkop1.
  ENDLOOP.
*FOR SD
  SELECT opbel,                                "#EC CI_FAE_LINES_ENSURED or "#EC CI_FAE_NO_LINES_OK
          gpart,
          vkont,
          betrw
     FROM dfkkop FOR ALL ENTRIES IN @lt_but
     WHERE gpart = @lt_but-partner
        AND hvorg = 'G001'
        AND tvorg =  '0020'
          AND augrd NE '05'
       INTO TABLE @DATA(lt_dfkkop_sd).


  LOOP AT lt_dfkkop_sd INTO  DATA(ls_dfkkop_sd).
    ls_dfkkop_sdf-gpart          = ls_dfkkop_sd-gpart.
    ls_dfkkop_sdf-vkont          = ls_dfkkop_sd-vkont.
    ls_dfkkop_sdf-betrw          = ls_dfkkop_sd-betrw.
*  COLLECT <fs_dfkkop> INTO lt_dfkkop.
    COLLECT ls_dfkkop_sdf INTO  lt_dfkkop_sdf.
  ENDLOOP.

  IF lt_but[] IS NOT INITIAL.

    SELECT partner, vkont,total_amnt
      FROM erdk INTO TABLE @DATA(lt_erdk)
       FOR ALL ENTRIES IN @lt_but
       WHERE partner = @lt_but-partner.
  ENDIF.

  LOOP AT lt_but ASSIGNING FIELD-SYMBOL(<fs_but>).
    APPEND INITIAL LINE TO gt_final ASSIGNING FIELD-SYMBOL(<fs_final>).
    CONCATENATE <fs_but>-name_first <fs_but>-name_last  INTO <fs_final>-bp_name SEPARATED BY ''.
    <fs_final>-bp_number  =  <fs_but>-partner.

    IF line_exists( lt_but020[ partner = <fs_but>-partner  ] ).
      DATA(ls_but020)  = lt_but020[ partner = <fs_but>-partner  ].
      IF line_exists( lt_adrc[ addrnumber = ls_but020-addrnumber ] ).
        DATA(ls_adrc) = lt_adrc[ addrnumber = ls_but020-addrnumber ].
        CONCATENATE ls_adrc-roomnumber ls_adrc-str_suppl2 ls_adrc-floor ls_adrc-building ls_adrc-street ls_adrc-house_num1
    ls_adrc-house_num2 ls_adrc-str_suppl1  ls_adrc-city1  ls_adrc-city2
    ls_adrc-post_code1 ls_adrc-country INTO <fs_final>-bp_address SEPARATED BY ''.
      ENDIF.
    ENDIF.
*    CONCATENATE <fs_but>-name_first <fs_but>-name_last  INTO <fs_final>-BP_Name.
*    endif.
    IF line_exists( lt_fkkvkp[ gpart = <fs_but>-partner  ] ).
      DATA(ls_fkkvkp)  = lt_fkkvkp[ gpart = <fs_but>-partner ].
      IF line_exists( lt_ever[ vkonto = ls_fkkvkp-vkont  ] ).
        DATA(ls_ever)  =  lt_ever[ vkonto = ls_fkkvkp-vkont ] .
        <fs_final>-move_in_date  = ls_ever-erdat. "auszdat.      " Date of Commissiong
      ENDIF.
    ENDIF.
    IF line_exists( lt_dfkkop1[ gpart = <fs_but>-partner  ] ).
      DATA(ls_dfkkop2)  = lt_dfkkop1[ gpart = <fs_but>-partner ].
      <fs_final>-total_amount  = ls_dfkkop2-betrw.      " AMS Amount
    ENDIF .

    IF line_exists( lt_dfkkop_sdf[ gpart = <fs_but>-partner  ] ).
      DATA(ls_dfkkopsdf1)  = lt_dfkkop_sdf[ gpart = <fs_but>-partner ].
      <fs_final>-sd_amt  = ls_dfkkop_sdf-betrw.      " SD amount
    ENDIF .
*    IF line_exists( lt_erdk[ partner = <fs_but>-partner  ] ).
*      DATA(ls_erdk)  = lt_erdk[ partner = <fs_but>-partner  ].
*      <fs_final>-total_amount  = ls_erdk-total_amnt.
*
*    ENDIF.
    clear:ls_dfkkop_sdf,ls_dfkkop2,ls_dfkkop2,ls_adrc.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form display_alv_rpt
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM display_alv_rpt .
  DATA: lv_count_c   TYPE char10,
        lv_tot_count TYPE p DECIMALS 0.
  DATA :
*         gr_table       TYPE REF TO     cl_salv_table,
    lr_functions TYPE REF TO     cl_salv_functions_list,
    lr_layout    TYPE REF TO     cl_salv_layout,
    ls_key       TYPE            salv_s_layout_key,
    lr_display   TYPE REF TO     cl_salv_display_settings,
    lr_columns   TYPE REF TO     cl_salv_columns,
    lr_column    TYPE REF TO     cl_salv_column.
  DATA: lr_aggregations TYPE REF TO cl_salv_aggregations,
        lr_sort         TYPE REF TO cl_salv_sorts.
  DATA :lr_msg    TYPE REF TO     cx_salv_msg,
        lr_msg1   TYPE REF TO     cx_salv_not_found,
        lv_string TYPE            string.
  CONSTANTS:lc_mtype   TYPE            sy-msgty VALUE 'I'.

* Initiate Table
*  IF  gt_final IS NOT INITIAL.
  TRY.
      cl_salv_table=>factory(
        IMPORTING
          r_salv_table = gr_table
        CHANGING
          t_table      = gt_final[]  ).
    CATCH cx_salv_msg.
  ENDTRY.

  DATA(lo_header) = NEW cl_salv_form_layout_grid( ).

  DATA(lo_h_flow) = lo_header->create_flow( row = 2 column = 1 ).
  lv_tot_count = lines( gt_final ).
  lv_count_c = lv_tot_count.
  CONDENSE lv_count_c.
  lo_h_flow->create_text( text = 'Total records:' && | | && lv_count_c ) ##NO_TEXT.
  CLEAR lv_count_c.

  gr_table->set_top_of_list( lo_header ).


* * Get Functions
  lr_functions = gr_table->get_functions( ).
* Get Functions
  lr_functions = gr_table->get_functions( ).

* *. activate ALV generic Functions
  lr_functions->set_all( abap_true ).
*****************
  lr_layout = gr_table->get_layout( ).

  ls_key-report = sy-repid.
  lr_layout->set_key( ls_key ).
  lr_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
* * Get Columns
  lr_columns = gr_table->get_columns( ).
*   gr_table->get_columns( )->set_optimize( abap_true ).
  TRY.
*        sd_amt       type  wrbtr,      " SD amount
*         total_amount TYPE  wrbtr,      " AMC amount
*         cont_name    type  char30,     " Name of the Contractor
*         work_by      type  char30,      "Work monitored by
*
**BP number
      lr_column = lr_columns->get_column( 'BP_NUMBER' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT  lr_column->set_long_text('Customer Number' ).
        ##NO_TEXT    lr_column->set_short_text( 'CNUM' ).
        ##NO_TEXT   lr_column->set_medium_text('C Number' ).
      ENDIF.
* bp name
      lr_column = lr_columns->get_column( 'BP_NAME' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT   lr_column->set_long_text('Customer Name' ).
        ##NO_TEXT   lr_column->set_short_text( 'C Name' ).
        ##NO_TEXT      lr_column->set_medium_text('Cust Name' ).
      ENDIF.


**  **bp ADRESS
      lr_column = lr_columns->get_column( 'BP_ADDRESS' ).
      lr_column->set_output_length( 80 ).
      IF lr_column IS BOUND.
        ##NO_TEXT    lr_column->set_long_text('Customer Address' ).
        ##NO_TEXT    lr_column->set_short_text( 'C ADD' ).
        ##NO_TEXT    lr_column->set_medium_text('C Address' ).
      ENDIF.

*   move_in_date    Date of Commissiong
      lr_column = lr_columns->get_column( 'MOVE_IN_DATE' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT  lr_column->set_long_text('Date of Commissiong' ).
        ##NO_TEXT    lr_column->set_short_text( 'DOC' ).
        ##NO_TEXT   lr_column->set_medium_text('DAT COMM' ).
      ENDIF.

*SD amount
      lr_column = lr_columns->get_column( 'SD_AMT' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT   lr_column->set_long_text('SD_Total Amount' ).
        ##NO_TEXT   lr_column->set_short_text( 'SD AMT' ).
        ##NO_TEXT   lr_column->set_medium_text('SD Amount' ).
      ENDIF.
** ** AMC Total Amount
      lr_column = lr_columns->get_column( 'TOTAL_AMOUNT' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT   lr_column->set_long_text('AMC(Total Amount}' ).
        ##NO_TEXT   lr_column->set_short_text( 'AMC' ).
        ##NO_TEXT   lr_column->set_medium_text('AMC' ).
      ENDIF.

*Name of the Contractor
      lr_column = lr_columns->get_column( 'CONT_NAME' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT   lr_column->set_long_text('Name of the Contractor' ).
        ##NO_TEXT   lr_column->set_short_text( 'NOC' ).
        ##NO_TEXT   lr_column->set_medium_text('Name od Cont' ).
      ENDIF.
* "Work monitored by
      lr_column = lr_columns->get_column( 'WORK_BY' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT   lr_column->set_long_text('Work monitored by' ).
        ##NO_TEXT   lr_column->set_short_text( 'wBY' ).
        ##NO_TEXT   lr_column->set_medium_text('Work By' ).
      ENDIF.
    CATCH cx_salv_not_found INTO lr_msg1.
      lv_string = lr_msg1->get_text( ).
      MESSAGE lv_string TYPE lc_mtype .
  ENDTRY.
  gr_table->display( ).
ENDFORM.

*****************************************************************************************************************************************

9th block
ZISU_CM_MONTH_TD - tcode
ZISU_CM_R_MNTLY_TEMP_DISC - prg_name

*****************************************************************************************************************************************

*&---------------------------------------------------------------------*
*& Report ZISU_CM_R_MNTLY_TEMP_DISC
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
*& Description :Monthly Temporary Disconnection Report to be performed
*for Domestic, Commercial & Industrial consumers
*& Requirement Provided By : Raj Kumar D
*& Code Written By : Syam Gogineni
*& Code Written On (DD.MM.YYYY):
*& Company Name :
*& Transport Request No : DE1K900796
*& Transaction code :
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& CHANGE HISTORY:
*& Date:
*& Changed By:
*& Description:
*"---------------------------------------------------------------------*
REPORT zisu_cm_r_mntly_temp_disc.
INCLUDE zisu_cm_r_mntly_temp_disc_top.
INCLUDE zisu_cm_r_mntly_temp_disc_form.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_bptype-low.
  SELECT bpkind, text40
     FROM tb004t
     INTO TABLE @DATA(lt_bptype)
     WHERE spras = @sy-langu.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'BPKIND'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_BPTYPE'
      value_org       = 'S'
    TABLES
      value_tab       = lt_bptype
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

*    IF gt_return IS NOT INITIAL.
*      rt_bptype = gt_return[ 1 ]-fieldval.
*    ENDIF.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_bptype-high.
  SELECT bpkind, text40
       FROM tb004t
       INTO TABLE @DATA(lt_bptype)
       WHERE spras = @sy-langu.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'BPKIND'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_BPTYPE'
      value_org       = 'S'
    TABLES
      value_tab       = lt_bptype
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_grid-low.
  SELECT house_num1                                     "#EC CI_NOWHERE
       FROM adrc
       INTO TABLE @DATA(lt_grid).
  DELETE lt_grid WHERE house_num1 IS INITIAL.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'AD_HSNM1'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_GRID'
      value_org       = 'S'
    TABLES
      value_tab       = lt_grid
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_grid-high.
  SELECT house_num1                                     "#EC CI_NOWHERE
       FROM adrc
       INTO TABLE @DATA(lt_grid).
  DELETE lt_grid WHERE house_num1 IS INITIAL.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'AD_HSNM1'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_GRID'
      value_org       = 'S'
    TABLES
      value_tab       = lt_grid
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

INITIALIZATION.
*  s_post-low = '20230101'.
*  s_post-high = sy-datum.
*  APPEND s_post.
  s_post-sign  = 'I'.
  s_post-option = 'BT'.
  s_post-low = '20230101'.
  s_post-high = sy-datum.
  APPEND s_post TO s_post[].

  s_bptype-sign  = 'I'.
  s_bptype-option = 'EQ'.

  s_bptype-low = 'ZDOM'.
  s_bptype-high = ''.
  APPEND s_bptype TO s_bptype[].
  s_bptype-low = 'ZCOM'.
  s_bptype-high = ''.
  APPEND s_bptype TO s_bptype[].
  s_bptype-low = 'ZIND'.
  s_bptype-high = ''.
  APPEND s_bptype TO s_bptype[].


*&-------------------------------------------------------------&*
*&                  START-OF-SELECTION
*&-------------------------------------------------------------&*
START-OF-SELECTION.
  PERFORM fetch_data.
  PERFORM display_alv_rpt.

*************************************************************************************************************************************

*&---------------------------------------------------------------------*
*& Include          ZISU_CM_R_MNTLY_TEMP_DISC_TOP
*&---------------------------------------------------------------------*

TYPE-POOLS: slis.
*TABLES : zcm_group_ca,adrc,zcm_bp_data.
RANGES r_date FOR sy-datum.

DATA : gt_dma_data TYPE TABLE OF zcm_bp_data,
       gr_table    TYPE REF TO     cl_salv_table.

TYPES: BEGIN OF ty_final,
         bp_number TYPE    bu_partner,
         bp_name   TYPE    name_first,
         disc_date TYPE    sy-datum,
         disc_resn TYPE    char30,
         pend_amnt TYPE    wrbtr,
         prc_date TYPE    sy-datum,
       END OF ty_final.

DATA : gt_final    TYPE TABLE OF ty_final.

DATA: gv_date   TYPE  sy-datum, "posting date .
      gv_bptype TYPE  bu_bpkind, "BP TYPE
      gv_grid   TYPE  ad_hsnm1. " Grid


SELECTION-SCREEN BEGIN OF BLOCK 0001 WITH FRAME TITLE TEXT-001.

  SELECT-OPTIONS:  s_post         FOR   gv_date OBLIGATORY ,
                   s_bptype       FOR   gv_bptype,
                   s_grid         FOR   gv_grid.

SELECTION-SCREEN END OF BLOCK 0001.
*************************************************************************************************************************************8

*&---------------------------------------------------------------------*
*& Include          ZISU_CM_R_MNTLY_TEMP_DISC_FORM
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form fetch_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fetch_data .

  DATA: lc_20000101 TYPE sydatum  VALUE '20000101',
        lc_99991231 TYPE sydatum  VALUE '99991231'.
  DATA: lv_bal_amount TYPE betrh_kk,
        lv_start_time TYPE coitm_kk,
        lv_end_time   TYPE coitm_kk.

  TYPES: BEGIN OF ty_but000_r,
           refobjkey TYPE edc_refkey,  "BP/REF NO
         END OF ty_but000_r.
  DATA: lt_but000_r TYPE STANDARD TABLE OF ty_but000_r,
        wa_but000_r TYPE ty_but000_r.

*  IF s_BPTYPE-low IS NOT INITIAL.
  SELECT partner,                                       "#EC CI_NOFIELD
        type,
        bpkind,
        bu_group,
        name_org1,
        name_org2,
        name_last,
        name_first
   FROM but000
   WHERE bpkind IN @s_bptype
     AND  crdat   IN @s_post
   INTO TABLE @DATA(lt_but).
*  ENDIF.
  SORT lt_but[] BY partner.

  IF lt_but[] IS NOT INITIAL.
    SELECT partner, addrnumber
        FROM but020
        FOR ALL ENTRIES IN @lt_but
        WHERE partner = @lt_but-partner
        INTO TABLE @DATA(lt_but020).
  ENDIF.

  IF lt_but020[] IS NOT INITIAL.

    SELECT            addrnumber,                  "#EC CI_NO_TRANSFORM
                      city1,
                      city2,
                      post_code1,
                      street,
                      house_num1,
                      house_num2,
                      str_suppl1,
                      str_suppl2,
                      str_suppl3,
                      location,
                      building   FROM adrc
                     FOR ALL ENTRIES IN @lt_but020
                      WHERE addrnumber = @lt_but020-addrnumber
                      AND house_num1  IN  @s_grid
                     INTO TABLE @DATA(lt_adrc).
*      SELECT addrnumber
*             persnumber
*             date_from
*             consnumber
*             tel_number
*             r3_user    FROM adr2 INTO TABLE it_adr2
*                        WHERE addrnumber = wa_but020-addrnumber
*                        AND ( r3_user = '1' OR r3_user = '3' ).
*
*    SELECT addrnumber,
*           persnumber,
*           date_from,
*           consnumber,
*           tel_number
*      FROM adr2
*      FOR ALL ENTRIES IN @lt_but020
*      WHERE addrnumber = @lt_but020-addrnumber
*      AND r3_user = '3'
*      AND valid_to LE '99991231235959'
*      INTO TABLE @DATA(lt_adr2).
  ENDIF.

*  SELECT dat_obsolt,discreason FROM ediscdoc
*       FOR ALL ENTRIES IN @lt_but
*        WHERE refobjkey = @lt_but-partner
*        INTO TABLE @DATA(lt_ediscdoc).

*      IF it_ediscdoc IS NOT INITIAL.
*        SORT it_ediscdoc BY discno DESCENDING.
*      endif .
  LOOP AT lt_but ASSIGNING FIELD-SYMBOL(<fs_but1>).
    wa_but000_r-refobjkey = <fs_but1>-partner.

    APPEND wa_but000_r TO lt_but000_r.
    CLEAR  wa_but000_r.

  ENDLOOP.
  IF lt_but[] IS NOT INITIAL.

    SELECT vkont,gpart FROM fkkvkp
      INTO TABLE @DATA(lt_fkkvkp)
      FOR ALL ENTRIES IN @lt_but
      WHERE gpart EQ @lt_but-partner.

  ENDIF.

  LOOP AT lt_fkkvkp ASSIGNING FIELD-SYMBOL(<fs_fkkvkp1>).
    CONCATENATE <fs_fkkvkp1>-vkont <fs_fkkvkp1>-gpart  INTO wa_but000_r-refobjkey .
*     wa_but000_r-refobjkey = <fs_fkkvkp1>-vkont.
    APPEND wa_but000_r TO lt_but000_r.
    CLEAR  wa_but000_r.
  ENDLOOP .


  IF lt_fkkvkp[] IS NOT INITIAL.

    SELECT  vertrag ,anlage, vkonto,auszdat  FROM ever
      INTO TABLE @DATA(lt_ever)
      FOR ALL ENTRIES IN @lt_fkkvkp
      WHERE vkonto EQ @lt_fkkvkp-vkont.
*      AND   auszdat NE '99991231'.   "Move-out Date
*ANLAGE LOGIKNR
  ENDIF.
  IF lt_ever IS NOT INITIAL.
    SELECT anlage, logiknr FROM eastl              "#EC CI_NO_TRANSFORM
      INTO TABLE @DATA(lt_eastl)
      FOR ALL ENTRIES IN @lt_ever
      WHERE anlage EQ @lt_ever-anlage.
*      AND   bis EQ '99991231'.
  ENDIF.


  LOOP AT lt_eastl ASSIGNING FIELD-SYMBOL(<fs_eastl>).
    wa_but000_r-refobjkey = <fs_eastl>-anlage.
    APPEND wa_but000_r TO lt_but000_r.
    CLEAR  wa_but000_r.

  ENDLOOP.

  IF lt_but000_r IS NOT INITIAL.
    SELECT discno, refobjkey, dat_obsolt,discreason,erdat,aedat FROM ediscdoc
         FOR ALL ENTRIES IN @lt_but000_r
          WHERE refobjkey = @lt_but000_r-refobjkey
           AND discprocv = 'CUST'
*         and REFOBJTYPE = 'BPXXXXXXXX'
          INTO TABLE @DATA(lt_ediscdoc).
  ENDIF.

  IF lt_ediscdoc IS NOT INITIAL.
    SORT lt_ediscdoc BY discno erdat DESCENDING.
  ENDIF.

  LOOP AT lt_but ASSIGNING FIELD-SYMBOL(<fs_but>).

    APPEND INITIAL LINE TO gt_final ASSIGNING FIELD-SYMBOL(<fs_final>).
    CONCATENATE <fs_but>-name_first <fs_but>-name_last  INTO <fs_final>-bp_name SEPARATED BY ''.
    <fs_final>-bp_number  =  <fs_but>-partner.
*
*     IF line_exists( lt_but020[ partner = <fs_but>-partner  ] ).
*         DATA(ls_but020)  = lt_but020[ partner = <fs_but>-partner  ].
*           IF line_exists( lt_adrc[ addrnumber = ls_but020-addrnumber ] ).
*              DATA(ls_adrc) = lt_adrc[ addrnumber = ls_but020-addrnumber ].
*              CONCATENATE ls_adrc-house_num1 ls_adrc-house_num2  ls_adrc-city1  ls_adrc-city2  ls_adrc-street
*               ls_adrc-post_code1 ls_adrc-str_suppl1 INTO <fs_final>-BP_Address SEPARATED BY ','.
*           ENDIF.
*         ENDIF.
*    CONCATENATE <fs_but>-name_first <fs_but>-name_last  INTO <fs_final>-BP_Name.
*    endif.

*      TRY.
    IF line_exists( lt_ediscdoc[ refobjkey = <fs_but>-partner  ] ).
      DATA(ls_ediscdoc)  = lt_ediscdoc[ refobjkey = <fs_but>-partner  ].
      <fs_final>-disc_date  =   ls_ediscdoc-erdat.
*      <fs_final>-disc_resn  =   ls_ediscdoc-discreason.
      IF ls_ediscdoc-discreason EQ '03'.
        ##NO_TEXT        <fs_final>-disc_resn = 'Customer Request'.
      ENDIF.

    ELSE.

      IF line_exists( lt_fkkvkp[ gpart = <fs_but>-partner  ] ).
        DATA(ls_fkkvkp)  = lt_fkkvkp[ gpart = <fs_but>-partner  ].
        IF line_exists( lt_ediscdoc[ refobjkey+0(12) = ls_fkkvkp-vkont  ] ).
          DATA(ls_ediscdoc1)  = lt_ediscdoc[ refobjkey+0(12) = ls_fkkvkp-vkont  ].
          <fs_final>-disc_date  =   ls_ediscdoc1-erdat.
*          <fs_final>-disc_resn  =   ls_ediscdoc1-discreason.
          IF ls_ediscdoc1-discreason EQ '03'.
            ##NO_TEXT                <fs_final>-disc_resn = 'Customer Request'.
          ENDIF.
        ELSE.
          IF line_exists( lt_ever[ vkonto = ls_fkkvkp-vkont  ] ).
            DATA(ls_ever)  = lt_ever[ vkonto = ls_fkkvkp-vkont  ].
            IF line_exists( lt_eastl[ anlage = ls_ever-anlage  ] ).
              DATA(ls_eastl)  = lt_eastl[ anlage = ls_ever-anlage  ].
              IF line_exists( lt_ediscdoc[ refobjkey+0(10) = ls_eastl-anlage  ] ).
                DATA(ls_ediscdoc2)  = lt_ediscdoc[ refobjkey+0(10) = ls_eastl-anlage  ].
                <fs_final>-disc_date  =   ls_ediscdoc2-erdat.
                IF ls_ediscdoc2-discreason EQ '03'.
                  ##NO_TEXT  <fs_final>-disc_resn = 'Customer Request'.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
*        IF line_exists( lt_fkkvkp[ gpart = <fs_but>-partner  ] ).
*          DATA(ls_fkkvkp3)  = lt_fkkvkp[ gpart = <fs_but>-partner  ].
*          IF line_exists( lt_ever[ vkonto = ls_fkkvkp3-vkont  ] ).
*            DATA(ls_ever)  = lt_ever[ vkonto = ls_fkkvkp3-vkont  ].
*            IF line_exists( lt_eastl[ anlage = ls_ever-anlage  ] ).
*              DATA(ls_eastl)  = lt_eastl[ anlage = ls_ever-anlage  ].
*              IF line_exists( lt_ediscdoc[ refobjkey+0(10) = ls_eastl-anlage  ] ).
*                DATA(ls_ediscdoc2)  = lt_ediscdoc[ refobjkey+0(10) = ls_eastl-anlage  ].
*                <fs_final>-disc_date  =   ls_ediscdoc2-aedat.
*                IF ls_ediscdoc2-discreason EQ '03'.
*                  ##NO_TEXT  <fs_final>-disc_resn = 'Customer Request'.
*                ENDIF.
*              ENDIF.
*            ENDIF.
*          ENDIF.
        ENDIF.

      ENDIF.

      IF line_exists( lt_fkkvkp[ gpart = <fs_but>-partner  ] ).
        DATA(ls_fkkvkp1)  = lt_fkkvkp[ gpart = <fs_but>-partner  ].
        CLEAR lv_bal_amount.
        CALL FUNCTION 'FKK_ACCOUNT_BALANCE_COMPUTE'
          EXPORTING
            i_vkont      = ls_fkkvkp1-vkont
            i_gpart      = <fs_but>-partner
*           I_VTREF      = ' '
            i_start_date = lc_20000101
            i_start_time = lv_start_time
            i_end_date   = lc_99991231
            i_end_time   = lv_end_time
*           I_XALLF      = ' '
*           I_SUBAP      = ' '
          IMPORTING
            e_balance    = lv_bal_amount.
*          E_SUM_OPENITEMS           =

        <fs_final>-pend_amnt = lv_bal_amount.

      ENDIF.

    ENDIF.
*    CATCH cx_sy_itab_line_not_found.
*      ENDTRY .
    CLEAR : ls_ever,ls_fkkvkp1,lv_bal_amount,ls_ediscdoc.
  ENDLOOP.

  DELETE gt_final WHERE disc_date IS INITIAL.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form display_alv_rpt
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM display_alv_rpt .
   DATA: lv_count_c   TYPE char10,
        lv_tot_count TYPE p DECIMALS 0.
  DATA :
*         gr_table       TYPE REF TO     cl_salv_table,
    lr_functions TYPE REF TO     cl_salv_functions_list,
    lr_layout    TYPE REF TO     cl_salv_layout,
    ls_key       TYPE            salv_s_layout_key,
    lr_display   TYPE REF TO     cl_salv_display_settings,
    lr_columns   TYPE REF TO     cl_salv_columns,
    lr_column    TYPE REF TO     cl_salv_column.
  DATA: lr_aggregations TYPE REF TO cl_salv_aggregations,
        lr_sort         TYPE REF TO cl_salv_sorts.
  DATA :lr_msg    TYPE REF TO     cx_salv_msg,
        lr_msg1   TYPE REF TO     cx_salv_not_found,
        lv_string TYPE            string.
  CONSTANTS:lc_mtype   TYPE            sy-msgty VALUE 'I'.

* Initiate Table
*  IF  gt_final IS NOT INITIAL.
  TRY.
      cl_salv_table=>factory(
        IMPORTING
          r_salv_table = gr_table
        CHANGING
          t_table      = gt_final[]  ).
    CATCH cx_salv_msg.
  ENDTRY.

*Header declaration
DATA(lo_header) = NEW cl_salv_form_layout_grid( ).

  DATA(lo_h_flow) = lo_header->create_flow( row = 2 column = 1 ).
  lv_tot_count = lines( gt_final ).
  lv_count_c = lv_tot_count.
  CONDENSE lv_count_c.
  lo_h_flow->create_text( text = 'Total records:' && | | && lv_count_c ) ##NO_TEXT.
  CLEAR lv_count_c.
  gr_table->set_top_of_list( lo_header ).

* * Get Functions
  lr_functions = gr_table->get_functions( ).
* Get Functions
  lr_functions = gr_table->get_functions( ).

* *. activate ALV generic Functions
  lr_functions->set_all( abap_true ).
*****************
  lr_layout = gr_table->get_layout( ).

  ls_key-report = sy-repid.
  lr_layout->set_key( ls_key ).
  lr_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
* * Get Columns
  lr_columns = gr_table->get_columns( ).
  TRY.

**BP number
      lr_column = lr_columns->get_column( 'BP_NUMBER' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT    lr_column->set_long_text('Consumer Number' ).
        ##NO_TEXT    lr_column->set_short_text( 'C_Num' ).
        ##NO_TEXT    lr_column->set_medium_text('Consumer Number' ).
      ENDIF.

** bp name
      lr_column = lr_columns->get_column( 'BP_NAME' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT     lr_column->set_long_text('Consumer Name' ).
        ##NO_TEXT     lr_column->set_short_text( 'CName' ).
        ##NO_TEXT    lr_column->set_medium_text('Cons Name' ).
      ENDIF.

**  Diconnection Date
      lr_column = lr_columns->get_column( 'DISC_DATE' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT      lr_column->set_long_text('Disconection Date' ).
        ##NO_TEXT      lr_column->set_short_text( 'Disc D' ).
        ##NO_TEXT     lr_column->set_medium_text('DIsc Date' ).
      ENDIF.


*Pending Amount - If not, then display Zero Rupees.
      lr_column = lr_columns->get_column( 'PEND_AMNT' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT      lr_column->set_long_text('Pending Amount' ).
        ##NO_TEXT      lr_column->set_short_text( 'PAMNT' ).
        ##NO_TEXT     lr_column->set_medium_text('p Amount' ).
      ENDIF.

* * Disconnection Reason – Customer Request/Dunning
      lr_column = lr_columns->get_column( 'DISC_RESN' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT      lr_column->set_long_text('Disconnection Reason' ).
        ##NO_TEXT      lr_column->set_short_text( 'D reasn' ).
        ##NO_TEXT        lr_column->set_medium_text('Disc Reason' ).
      ENDIF.

*   * Probable Reconnection Date(On customer request)
      lr_column = lr_columns->get_column( 'PRC_DATE' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT      lr_column->set_long_text(' Probable Reconnection Date' ).
        ##NO_TEXT      lr_column->set_short_text( 'PR date' ).
        ##NO_TEXT        lr_column->set_medium_text('Pro Recont Date' ).
      ENDIF.

    CATCH cx_salv_not_found INTO lr_msg1.
      lv_string = lr_msg1->get_text( ).
      MESSAGE lv_string TYPE lc_mtype .
  ENDTRY.
  gr_table->display( ).
*  ENDIF.
ENDFORM.

********************************************************************************************************************************************************

10th block
ZISU_CM_MONTH_PD_FB - tcode
ZISU_CM_R_MNTLY_PERM_DISC - prg_name

********************************************************************************************************************************************************

*&---------------------------------------------------------------------*
*& Report ZISU_CM_R_MNTLY_PERM_DISC
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
*& Description :Monthly Temporary Disconnection Report to be performed
*for Domestic, Commercial & Industrial consumers
*& Requirement Provided By : Raj Kumar D
*& Code Written By : Syam Gogineni
*& Code Written On (DD.MM.YYYY):
*& Company Name :
*& Transport Request No :DE1K900818
*& Transaction code :
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& CHANGE HISTORY:
*& Date:
*& Changed By:
*& Description:
*"---------------------------------------------------------------------*

REPORT zisu_cm_r_mntly_perm_disc.
INCLUDE zisu_cm_r_mntly_perm_disc_top.
INCLUDE zisu_cm_r_mntly_perm_disc_form.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_bptype-low.
  SELECT bpkind, text40
     FROM tb004t
     INTO TABLE @DATA(lt_bptype)
     WHERE spras = @sy-langu.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'BPKIND'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_BPTYPE'
      value_org       = 'S'
    TABLES
      value_tab       = lt_bptype
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

*    IF gt_return IS NOT INITIAL.
*      rt_bptype = gt_return[ 1 ]-fieldval.
*    ENDIF.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_bptype-high.
  SELECT bpkind, text40
       FROM tb004t
       INTO TABLE @DATA(lt_bptype)
       WHERE spras = @sy-langu.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'BPKIND'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_BPTYPE'
      value_org       = 'S'
    TABLES
      value_tab       = lt_bptype
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_grid-low.
  SELECT house_num1                                     "#EC CI_NOWHERE
       FROM adrc
       INTO TABLE @DATA(lt_grid).
  DELETE lt_grid WHERE house_num1 IS INITIAL.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'AD_HSNM1'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_GRID'
      value_org       = 'S'
    TABLES
      value_tab       = lt_grid
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_grid-high.
  SELECT house_num1                                     "#EC CI_NOWHERE
       FROM adrc
       INTO TABLE @DATA(lt_grid).
  DELETE lt_grid WHERE house_num1 IS INITIAL.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'AD_HSNM1'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_GRID'
      value_org       = 'S'
    TABLES
      value_tab       = lt_grid
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.


INITIALIZATION.
*  s_post-low = '20230101'.
*  s_post-high = sy-datum.
*  APPEND s_post.
  s_post-sign  = 'I'.
  s_post-option = 'BT'.
  s_post-low = '20230101'.
  s_post-high = sy-datum.
  APPEND s_post TO s_post[].

  s_bptype-sign  = 'I'.
  s_bptype-option = 'EQ'.

  s_bptype-low = 'ZDOM'.
  s_bptype-high = ''.
  APPEND s_bptype TO s_bptype[].
  s_bptype-low = 'ZCOM'.
  s_bptype-high = ''.
  APPEND s_bptype TO s_bptype[].
  s_bptype-low = 'ZIND'.
  s_bptype-high = ''.
  APPEND s_bptype TO s_bptype[].


*&-------------------------------------------------------------&*
*&                  START-OF-SELECTION
*&-------------------------------------------------------------&*
START-OF-SELECTION.
  PERFORM fetch_data.
  PERFORM display_alv_rpt.

******************************************************************************************************************************************
*&---------------------------------------------------------------------*
*& Include          ZISU_CM_R_MNTLY_PERM_DISC_TOP
*&---------------------------------------------------------------------*

TYPE-POOLS: slis.
*TABLES : zcm_group_ca,adrc,zcm_bp_data.
RANGES r_date FOR sy-datum.

DATA : gt_dma_data TYPE TABLE OF zcm_bp_data,
       gr_table    TYPE REF TO     cl_salv_table.

TYPES: BEGIN OF ty_final,
         bp_number   TYPE    bu_partner,
          bp_name     TYPE    name_first,
         bp_address   TYPE bu_name1tx,
         tel_num      TYPE  ad_tlnmbr,    " Phone number
         dev_num      TYPE geraet,          "Device num
         disc_date   TYPE    sy-datum,
*         disc_resn   TYPE    char30,
         pend_amnt   TYPE    wrbtr,
         sd_ref_amt  TYPE   augbt_kk ,             " SD Refund Amount
         sd_ref_dat  TYPE   augvd_kk,              " SD Refund Date
         mode_of_ref TYPE   TX042Z_KK,              " Mode Of Refund
         remarks     TYPE   char30,                " Remarks
       END OF ty_final.

DATA : gt_final    TYPE TABLE OF ty_final.

DATA: gv_date   TYPE  sy-datum, "posting date .
      gv_bptype TYPE  bu_bpkind, "BP TYPE
      gv_grid   TYPE  ad_hsnm1. " Grid


SELECTION-SCREEN BEGIN OF BLOCK 0001 WITH FRAME TITLE TEXT-001.

  SELECT-OPTIONS:  s_post         FOR   gv_date ,
                   s_bptype       FOR   gv_bptype,
                   s_grid         FOR   gv_grid.

SELECTION-SCREEN END OF BLOCK 0001.

*****************************************************************************************************

*&---------------------------------------------------------------------*
*& Include          ZISU_CM_R_MNTLY_PERM_DISC_FORM
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form fetch_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fetch_data .

  DATA: lc_20000101 TYPE sydatum  VALUE '20000101',
        lc_99991231 TYPE sydatum  VALUE '99991231'.
  DATA: lv_bal_amount TYPE betrh_kk,
        lv_start_time TYPE coitm_kk,
        lv_end_time   TYPE coitm_kk,
        ls_final      TYPE ty_final.

  TYPES: BEGIN OF ty_but000_r,
           refobjkey TYPE edc_refkey,  "BP/REF NO
         END OF ty_but000_r.
  DATA: lt_but000_r TYPE STANDARD TABLE OF ty_but000_r,
        wa_but000_r TYPE ty_but000_r.

  TYPES: BEGIN OF ty_dfkkop1,
           gpart TYPE dfkkop-gpart,
           vkont TYPE dfkkop-vkont,
           betrw TYPE dfkkop-betrw,
           pymet TYPE dfkkop-pymet,
           augbt TYPE dfkkop-augbt,
           augvd TYPE dfkkop-augvd,
         END OF ty_dfkkop1.

  DATA : lt_dfkkop1 TYPE TABLE OF  ty_dfkkop1,
         ls_dfkkop1 TYPE  ty_dfkkop1.


*  IF s_BPTYPE-low IS NOT INITIAL.
  SELECT partner,                                       "#EC CI_NOFIELD
        type,
        bpkind,
        bu_group,
        name_org1,
        name_org2,
        name_last,
        name_first
   FROM but000
   WHERE bpkind IN @s_bptype
     AND  crdat   IN @s_post
   INTO TABLE @DATA(lt_but).
*  ENDIF.
  SORT lt_but[] BY partner.

  IF lt_but[] IS NOT INITIAL.
    SELECT partner, addrnumber
        FROM but020
        FOR ALL ENTRIES IN @lt_but
        WHERE partner = @lt_but-partner
        INTO TABLE @DATA(lt_but020).
  ENDIF.
  IF lt_but IS NOT INITIAL.
    SELECT opbel,
               gpart,
               vkont,
               betrw,
               pymet,
               augbt,
               augvd
          FROM dfkkop FOR ALL ENTRIES IN @lt_but
          WHERE gpart = @lt_but-partner
             AND hvorg = '0020'
             AND tvorg = '0010'
             AND augrd EQ '02'
             AND augst = '9'
            INTO TABLE @DATA(lt_dfkkop).
  ENDIF.

  LOOP AT lt_dfkkop INTO  DATA(ls_dfkkop).
    ls_dfkkop1-gpart          = ls_dfkkop-gpart.
    ls_dfkkop1-vkont          = ls_dfkkop-vkont.
    ls_dfkkop1-betrw          = ls_dfkkop-betrw.
*    ls_dfkkop1-pymet          = ls_dfkkop-pymet.
    ls_dfkkop1-augbt          = ls_dfkkop-augbt.
*    ls_dfkkop1-augvd          = ls_dfkkop-augvd .
*  COLLECT <fs_dfkkop> INTO lt_dfkkop.
    COLLECT ls_dfkkop1 INTO  lt_dfkkop1.
  ENDLOOP.

  IF lt_but020[] IS NOT INITIAL.

    SELECT            addrnumber,                  "#EC CI_NO_TRANSFORM
                      city1,
                      city2,
                      post_code1,
                      street,
                      house_num1,
                      house_num2,
                      str_suppl1,
                      str_suppl2,
                      str_suppl3,
                      location,
                      building,
                      floor,
                      roomnumber,
                      country
                      FROM adrc
                     FOR ALL ENTRIES IN @lt_but020
                      WHERE addrnumber = @lt_but020-addrnumber
                      AND house_num1  IN  @s_grid
                     INTO TABLE @DATA(lt_adrc).
    IF lt_but020[] IS NOT INITIAL.
      SELECT addrnumber,                           "#EC CI_NO_TRANSFORM
             persnumber,
             date_from,
             consnumber,
             tel_number,
             r3_user
            FROM adr2
            FOR ALL ENTRIES IN @lt_but020
             WHERE addrnumber = @lt_but020-addrnumber
            AND ( r3_user = '1' OR r3_user = '3' )
            INTO TABLE @DATA(lt_adr2).
    ENDIF.
*    SELECT addrnumber,
*           persnumber,
*           date_from,
*           consnumber,
*           tel_number
*      FROM adr2
*      FOR ALL ENTRIES IN @lt_but020
*      WHERE addrnumber = @lt_but020-addrnumber
*      AND r3_user = '3'
*      AND valid_to LE '99991231235959'
*      INTO TABLE @DATA(lt_adr2).
  ENDIF.

*  SELECT dat_obsolt,discreason FROM ediscdoc
*       FOR ALL ENTRIES IN @lt_but
*        WHERE refobjkey = @lt_but-partner
*        INTO TABLE @DATA(lt_ediscdoc).

*      IF it_ediscdoc IS NOT INITIAL.
*        SORT it_ediscdoc BY discno DESCENDING.
*      endif .
  LOOP AT lt_but ASSIGNING FIELD-SYMBOL(<fs_but1>).
    wa_but000_r-refobjkey = <fs_but1>-partner.

    APPEND wa_but000_r TO lt_but000_r.
    CLEAR  wa_but000_r.

  ENDLOOP.
  IF lt_but[] IS NOT INITIAL.

    SELECT vkont,gpart FROM fkkvkp
      INTO TABLE @DATA(lt_fkkvkp)
      FOR ALL ENTRIES IN @lt_but
      WHERE gpart EQ @lt_but-partner.

  ENDIF.

*  IF lt_fkkvkp[]  IS NOT INITIAL .
*    SELECT anlage, vkonto, auszdat FROM ever       "#EC CI_NO_TRANSFORM
*        INTO TABLE @DATA(lt_ever)
*        FOR ALL ENTRIES IN @lt_fkkvkp
*        WHERE vkonto EQ @lt_fkkvkp-vkont
*        AND   auszdat EQ '99991231'.   "Move-out Date
*
*  ENDIF.

  LOOP AT lt_fkkvkp ASSIGNING FIELD-SYMBOL(<fs_fkkvkp1>).

*    wa_but000_r-refobjkey =  <fs_fkkvkp1>-gpart.
*    APPEND wa_but000_r TO lt_but000_r.
*    CLEAR  wa_but000_r.

    CONCATENATE <fs_fkkvkp1>-vkont <fs_fkkvkp1>-gpart  INTO wa_but000_r-refobjkey .
*     wa_but000_r-refobjkey = <fs_fkkvkp1>-vkont.
    APPEND wa_but000_r TO lt_but000_r.
    CLEAR  wa_but000_r.

  ENDLOOP .

  SELECT  zlsch,
         text1 FROM tfk042zt
        INTO TABLE @DATA(lt_tek04)
        WHERE spras EQ @sy-langu..

  IF lt_fkkvkp[] IS NOT INITIAL.

    SELECT  vertrag ,anlage, vkonto,auszdat  FROM ever
      INTO TABLE @DATA(lt_ever)
      FOR ALL ENTRIES IN @lt_fkkvkp
      WHERE vkonto EQ @lt_fkkvkp-vkont
      AND   auszdat NE '99991231'.   "Move-out Date
*ANLAGE LOGIKNR
  ENDIF.
  IF lt_ever IS NOT INITIAL.
    SELECT anlage, logiknr FROM eastl              "#EC CI_NO_TRANSFORM
      INTO TABLE @DATA(lt_eastl)
      FOR ALL ENTRIES IN @lt_ever
      WHERE anlage EQ @lt_ever-anlage.
*      AND   bis EQ '99991231'.
  ENDIF.

*  for device number
  IF lt_ever[] IS NOT INITIAL.

    SELECT ablbelnr,anlage FROM eablg              "#EC CI_NO_TRANSFORM
          FOR ALL ENTRIES IN @lt_ever
          WHERE anlage EQ @lt_ever-anlage
         AND ablesgr = '06'
         INTO TABLE @DATA(lt_eablg).

  ENDIF.

  IF lt_eablg[] IS NOT INITIAL.
    SELECT ablbelnr,equnr,v_zwstand,n_zwstand FROM eabl "#EC CI_NO_TRANSFORM
            FOR ALL ENTRIES IN @lt_eablg
            WHERE ablbelnr EQ @lt_eablg-ablbelnr
           INTO TABLE @DATA(lt_eabl).
  ENDIF.

* device number
  IF lt_eabl[] IS NOT INITIAL.
    SELECT  equnr,serge FROM equi                  "#EC CI_NO_TRANSFORM
              FOR ALL ENTRIES IN @lt_eabl
              WHERE equnr EQ @lt_eabl-equnr
             INTO TABLE @DATA(lt_equi).

  ENDIF.


  LOOP AT lt_eastl ASSIGNING FIELD-SYMBOL(<fs_eastl>).
    wa_but000_r-refobjkey = <fs_eastl>-anlage.
    APPEND wa_but000_r TO lt_but000_r.
    CLEAR  wa_but000_r.

  ENDLOOP.

  IF lt_but000_r IS NOT INITIAL.
    SELECT discno, refobjkey, dat_obsolt,discreason,erdat,aedat FROM ediscdoc
         FOR ALL ENTRIES IN @lt_but000_r
          WHERE refobjkey = @lt_but000_r-refobjkey
           AND discprocv = 'CUST'
*         and REFOBJTYPE = 'BPXXXXXXXX'
          INTO TABLE @DATA(lt_ediscdoc).
  ENDIF.

  IF lt_ediscdoc IS NOT INITIAL.
    SORT lt_ediscdoc BY discno aedat DESCENDING.
  ENDIF.

  LOOP AT lt_fkkvkp ASSIGNING FIELD-SYMBOL(<fs_fkkvkp>).

    IF line_exists( lt_ever[ vkonto = <fs_fkkvkp>-vkont  ] ).
      DATA(ls_ever_t)  = lt_ever[ vkonto = <fs_fkkvkp>-vkont  ].
      ls_final-disc_date  =   ls_ever_t-auszdat.    " move_out date( Disconnection date )
*            if ls_ever1-auszdat EQ  '99991231'.
    ELSE.
      CONTINUE.
    ENDIF.
    ls_final-bp_number = <fs_fkkvkp>-gpart.
    IF line_exists( lt_but[ partner = <fs_fkkvkp>-gpart  ] ).
      DATA(ls_but_t)  = lt_but[  partner = <fs_fkkvkp>-gpart  ].
      CONCATENATE ls_but_t-name_first ls_but_t-name_last  INTO ls_final-bp_name SEPARATED BY ''.

    ENDIF.

    IF line_exists( lt_but020[ partner = <fs_fkkvkp>-gpart  ] ).
      DATA(ls_but020_t)  = lt_but020[ partner = <fs_fkkvkp>-gpart ].
      IF line_exists( lt_adrc[ addrnumber = ls_but020_t-addrnumber ] ).
        DATA(ls_adrc_t) = lt_adrc[ addrnumber = ls_but020_t-addrnumber ].
        CONCATENATE ls_adrc_t-roomnumber ls_adrc_t-str_suppl2 ls_adrc_t-floor ls_adrc_t-building ls_adrc_t-street ls_adrc_t-house_num1
          ls_adrc_t-house_num2 ls_adrc_t-str_suppl1  ls_adrc_t-city1  ls_adrc_t-city2
          ls_adrc_t-post_code1 ls_adrc_t-country INTO ls_final-bp_address SEPARATED BY ' '.
      ENDIF.
    ENDIF.
    IF line_exists( lt_adr2[ addrnumber = ls_but020_t-addrnumber  ] ).
      DATA(ls_adr2_t)  = lt_adr2[ addrnumber = ls_but020_t-addrnumber  ].
      ls_final-tel_num     = ls_adr2_t-tel_number.               "Telephone number
    ENDIF.

    IF line_exists( lt_dfkkop1[ gpart = <fs_fkkvkp>-gpart  ] ).
      DATA(ls_dfkkop1_t)  = lt_dfkkop1[ gpart = <fs_fkkvkp>-gpart  ].
      ls_final-sd_ref_amt  =   ls_dfkkop1_t-augbt.

    ENDIF.
    IF line_exists( lt_dfkkop[ gpart = <fs_fkkvkp>-gpart  ] ).
      DATA(ls_dfkkop_t)  = lt_dfkkop1[ gpart = <fs_fkkvkp>-gpart ].

      ls_final-sd_ref_dat  =   ls_dfkkop_t-augvd.
***      <fs_final>-mode_of_ref  =   ls_dfkkop3-pymet.
******          IF ls_dfkkop_t-pymet  IS NOT INITIAL.
***
      IF line_exists( lt_tek04[ zlsch = ls_dfkkop_t-pymet  ] ).
        DATA(ls_tek04)  = lt_tek04[ zlsch = ls_dfkkop_t-pymet  ].
        ls_final-mode_of_ref  =   ls_tek04-text1.
      ENDIF .
    ENDIF.

* gsp <
    IF line_exists( lt_eablg[ anlage = ls_ever_t-anlage  ] ).
      DATA(ls_eablg_t)  =  lt_eablg[ anlage = ls_ever_t-anlage ] .
      IF line_exists( lt_eabl[ ablbelnr = ls_eablg_t-ablbelnr  ] ).
        DATA(ls_eabl_t)  =  lt_eabl[ ablbelnr = ls_eablg_t-ablbelnr ] .
        IF line_exists( lt_equi[ equnr = ls_eabl_t-equnr  ] ).
          DATA(ls_equi_t) = lt_equi[ equnr = ls_eabl_t-equnr ] .
          ls_final-dev_num   = ls_equi_t-serge.    "device number
        ENDIF.
      ENDIF.
    ENDIF.


    CLEAR lv_bal_amount.
    CALL FUNCTION 'FKK_ACCOUNT_BALANCE_COMPUTE'
      EXPORTING
        i_vkont      = <fs_fkkvkp>-vkont
        i_gpart      = <fs_fkkvkp>-gpart
*       I_VTREF      = ' '
        i_start_date = lc_20000101
        i_start_time = lv_start_time
        i_end_date   = lc_99991231
        i_end_time   = lv_end_time
*       I_XALLF      = ' '
*       I_SUBAP      = ' '
      IMPORTING
        e_balance    = lv_bal_amount.
*          E_SUM_OPENITEMS           =

    ls_final-pend_amnt = lv_bal_amount.

    APPEND ls_final TO gt_final.
    CLEAR: ls_final,lv_bal_amount,ls_equi_t,ls_tek04,ls_adrc_t,ls_dfkkop1_t.
  ENDLOOP.
  DELETE gt_final WHERE disc_date IS INITIAL.

*  LOOP AT lt_but ASSIGNING FIELD-SYMBOL(<fs_but>).
*
*    APPEND INITIAL LINE TO gt_final ASSIGNING FIELD-SYMBOL(<fs_final>).
*    CONCATENATE <fs_but>-name_first <fs_but>-name_last  INTO <fs_final>-bp_name SEPARATED BY ''.
*    <fs_final>-bp_number  =  <fs_but>-partner.
*
*    IF line_exists( lt_fkkvkp[ gpart = <fs_but>-partner  ] ).
*      DATA(ls_fkkvkp2)  = lt_fkkvkp[ gpart = <fs_but>-partner  ].
*      IF line_exists( lt_ever[ vkonto = ls_fkkvkp2-vkont  ] ).
*        DATA(ls_ever1)  = lt_ever[ vkonto = ls_fkkvkp2-vkont  ].
*        <fs_final>-disc_date  =   ls_ever1-auszdat.    " move_out date( Disconnection date )
**            if ls_ever1-auszdat EQ  '99991231'.
*      ELSE.
*        CONTINUE.
**              endif.
*      ENDIF.
*    IF line_exists( lt_dfkkop1[ gpart = <fs_but>-partner  ] ).
*      DATA(ls_dfkkop2)  = lt_dfkkop1[ gpart = <fs_but>-partner  ].
*      <fs_final>-sd_ref_amt  =   ls_dfkkop2-augbt.
*
*    ENDIF.
**
**     IF line_exists( lt_but020[ partner = <fs_but>-partner  ] ).
**         DATA(ls_but020)  = lt_but020[ partner = <fs_but>-partner  ].
**           IF line_exists( lt_adrc[ addrnumber = ls_but020-addrnumber ] ).
**              DATA(ls_adrc) = lt_adrc[ addrnumber = ls_but020-addrnumber ].
**              CONCATENATE ls_adrc-house_num1 ls_adrc-house_num2  ls_adrc-city1  ls_adrc-city2  ls_adrc-street
**               ls_adrc-post_code1 ls_adrc-str_suppl1 INTO <fs_final>-BP_Address SEPARATED BY ','.
**           ENDIF.
**         ENDIF.
**    CONCATENATE <fs_but>-name_first <fs_but>-name_last  INTO <fs_final>-BP_Name.
**    endif.
*
**gsp ever sd amount  required
**    IF line_exists( lt_dfkkop1[ gpart = <fs_but>-partner  ] ).
**      DATA(ls_dfkkop2)  = lt_dfkkop1[ gpart = <fs_but>-partner  ].
**      <fs_final>-sd_ref_amt  =   ls_dfkkop2-augbt.
***      <fs_final>-sd_ref_dat  =   ls_dfkkop2-augvd.
***      <fs_final>-mode_of_ref  =   ls_dfkkop2-pymet.
**    ENDIF.
**
**    IF line_exists( lt_dfkkop[ gpart = <fs_but>-partner  ] ).
**      DATA(ls_dfkkop3)  = lt_dfkkop1[ gpart = <fs_but>-partner  ].
***      <fs_final>-sd_ref_amt  =   ls_dfkkop3-augbt.
**      <fs_final>-sd_ref_dat  =   ls_dfkkop3-augvd.
***      <fs_final>-mode_of_ref  =   ls_dfkkop3-pymet.
***      IF ls_dfkkop3-pymet  IS NOT INITIAL.
***
**      IF line_exists( lt_tek04[ zlsch = ls_dfkkop3-pymet  ] ).
**        DATA(ls_tek04)  = lt_tek04[ zlsch = ls_dfkkop3-pymet  ].
**        <fs_final>-mode_of_ref  =   ls_tek04-text1.
**      ENDIF .
**    ENDIF.
**gsp ever logic implement
**      TRY.
**    IF line_exists( lt_ediscdoc[ refobjkey = <fs_but>-partner  ] ).
**      DATA(ls_ediscdoc)  = lt_ediscdoc[ refobjkey = <fs_but>-partner  ].
**      <fs_final>-disc_date  =   ls_ediscdoc-erdat.
**      <fs_final>-disc_resn  =   ls_ediscdoc-discreason.
**      IF ls_ediscdoc-discreason EQ '03'.
**        ##NO_TEXT        <fs_final>-disc_resn = 'Customer Request'.
**      ENDIF.
**
**    ELSE.
**
**      IF line_exists( lt_fkkvkp[ gpart = <fs_but>-partner  ] ).
**        DATA(ls_fkkvkp)  = lt_fkkvkp[ gpart = <fs_but>-partner  ].
**        IF line_exists( lt_ediscdoc[ refobjkey+0(12) = ls_fkkvkp-vkont  ] ).
**          DATA(ls_ediscdoc1)  = lt_ediscdoc[ refobjkey+0(12) = ls_fkkvkp-vkont  ].
**          <fs_final>-disc_date  =   ls_ediscdoc1-erdat.
**          <fs_final>-disc_resn  =   ls_ediscdoc1-discreason.
**          IF ls_ediscdoc1-discreason EQ '03'.
**            ##NO_TEXT                <fs_final>-disc_resn = 'Customer Request'.
**          ENDIF.
**        ELSE.
**          IF line_exists( lt_ever[ vkonto = ls_fkkvkp-vkont  ] ).
**            DATA(ls_ever)  = lt_ever[ vkonto = ls_fkkvkp-vkont  ].
**            IF line_exists( lt_eastl[ anlage = ls_ever-anlage  ] ).
**              DATA(ls_eastl)  = lt_eastl[ anlage = ls_ever-anlage  ].
**              IF line_exists( lt_ediscdoc[ refobjkey+0(10) = ls_eastl-anlage  ] ).
**                DATA(ls_ediscdoc2)  = lt_ediscdoc[ refobjkey+0(10) = ls_eastl-anlage  ].
**                <fs_final>-disc_date  =   ls_ediscdoc2-erdat. "aedat.
**                IF ls_ediscdoc2-discreason EQ '03'.
**                  ##NO_TEXT  <fs_final>-disc_resn = 'Customer Request'.
**                ENDIF.
**              ENDIF.
**            ENDIF.
**          ENDIF.
**
**        ENDIF.
**
**      ENDIF.
*
*    IF line_exists( lt_fkkvkp[ gpart = <fs_but>-partner  ] ).
*      DATA(ls_fkkvkp1)  = lt_fkkvkp[ gpart = <fs_but>-partner  ].
**      CLEAR lv_bal_amount.
**      CALL FUNCTION 'FKK_ACCOUNT_BALANCE_COMPUTE'
**        EXPORTING
**          i_vkont      = ls_fkkvkp1-vkont
**          i_gpart      = <fs_but>-partner
***         I_VTREF      = ' '
**          i_start_date = lc_20000101
**          i_start_time = lv_start_time
**          i_end_date   = lc_99991231
**          i_end_time   = lv_end_time
***         I_XALLF      = ' '
***         I_SUBAP      = ' '
**        IMPORTING
**          e_balance    = lv_bal_amount.
***          E_SUM_OPENITEMS           =
**
**      <fs_final>-pend_amnt = lv_bal_amount.
*
*    ENDIF.
*
**    ENDIF.
**    CATCH cx_sy_itab_line_not_found.
**      ENDTRY .
*  ENDLOOP.
*  DELETE gt_final WHERE disc_date IS INITIAL.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form display_alv_rpt
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM display_alv_rpt .
   DATA: lv_count_c   TYPE char10,
        lv_tot_count TYPE p DECIMALS 0.
  DATA :
*         gr_table       TYPE REF TO     cl_salv_table,
    lr_functions TYPE REF TO     cl_salv_functions_list,
    lr_layout    TYPE REF TO     cl_salv_layout,
    ls_key       TYPE            salv_s_layout_key,
    lr_display   TYPE REF TO     cl_salv_display_settings,
    lr_columns   TYPE REF TO     cl_salv_columns,
    lr_column    TYPE REF TO     cl_salv_column.
  DATA: lr_aggregations TYPE REF TO cl_salv_aggregations,
        lr_sort         TYPE REF TO cl_salv_sorts.
  DATA :lr_msg    TYPE REF TO     cx_salv_msg,
        lr_msg1   TYPE REF TO     cx_salv_not_found,
        lv_string TYPE            string.
  CONSTANTS:lc_mtype   TYPE            sy-msgty VALUE 'I'.

* Initiate Table
*  IF  gt_final IS NOT INITIAL.
  TRY.
      cl_salv_table=>factory(
        IMPORTING
          r_salv_table = gr_table
        CHANGING
          t_table      = gt_final[]  ).
    CATCH cx_salv_msg.
  ENDTRY.
 DATA(lo_header) = NEW cl_salv_form_layout_grid( ).

  DATA(lo_h_flow) = lo_header->create_flow( row = 2 column = 1 ).
  lv_tot_count = lines( gt_final ).
  lv_count_c = lv_tot_count.
  CONDENSE lv_count_c.
  lo_h_flow->create_text( text = 'Total records:' && | | && lv_count_c ) ##NO_TEXT.
  CLEAR lv_count_c.

  gr_table->set_top_of_list( lo_header ).

* * Get Functions
  lr_functions = gr_table->get_functions( ).
* Get Functions
  lr_functions = gr_table->get_functions( ).

* *. activate ALV generic Functions
  lr_functions->set_all( abap_true ).
*****************
  lr_layout = gr_table->get_layout( ).

  ls_key-report = sy-repid.
  lr_layout->set_key( ls_key ).
  lr_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
* * Get Columns
  lr_columns = gr_table->get_columns( ).
  TRY.

**BP number
      lr_column = lr_columns->get_column( 'BP_NUMBER' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT    lr_column->set_long_text('Consumer Number' ).
        ##NO_TEXT     lr_column->set_short_text( 'C_Num' ).
        ##NO_TEXT    lr_column->set_medium_text('Consumer Number' ).
      ENDIF.


* Bp name
      ##NO_TEXT  lr_column = lr_columns->get_column( 'BP_NAME' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT     lr_column->set_long_text('Consumer Name' ).
        ##NO_TEXT    lr_column->set_short_text( 'CName' ).
        ##NO_TEXT     lr_column->set_medium_text('Consumer Name' ).
      ENDIF.

**  **bp ADRESS
      lr_column = lr_columns->get_column( 'BP_ADDRESS' ).
      lr_column->set_output_length( 80 ).
      IF lr_column IS BOUND.
        lr_column->set_long_text('Customer  Address' ) ##NO_TEXT.
        lr_column->set_short_text( 'C_Add' ) ##NO_TEXT.
        lr_column->set_medium_text('Cust Add' ) ##NO_TEXT.
      ENDIF.

* * **  Device Number
      lr_column = lr_columns->get_column( 'DEV_NUM' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT   lr_column->set_long_text('Device Number' ).
        ##NO_TEXT   lr_column->set_short_text( 'DNUMRU' ) .
        ##NO_TEXT    lr_column->set_medium_text('D Number' ).
      ENDIF.

* *      Phone Number
      lr_column = lr_columns->get_column( 'TEL_NUM' ) .
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT      lr_column->set_long_text('Phone Number ' ).
        ##NO_TEXT      lr_column->set_short_text( 'PH NUM' ).
        ##NO_TEXT     lr_column->set_medium_text('PH NUM' ).
      ENDIF.

**  Diconnection Date
      ##NO_TEXT     lr_column = lr_columns->get_column( 'DISC_DATE' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT lr_column->set_long_text('Permanent Disconection Date' ).
        ##NO_TEXT lr_column->set_short_text( 'P Disc D' ).
        ##NO_TEXT lr_column->set_medium_text('P DIsc Date' ).
      ENDIF.

** Disconnection Reason – Customer Request/Dunning
*      ##NO_TEXT lr_column = lr_columns->get_column( 'DISC_RESN' ).
*      lr_column->set_output_length( 30 ).
*      IF lr_column IS BOUND.
*        ##NO_TEXT      lr_column->set_long_text('Disconnection Reason' ).
*        ##NO_TEXT      lr_column->set_short_text( 'D reasn' ).
*        ##NO_TEXT     lr_column->set_medium_text('Disc Reason' ).
*      ENDIF.
*Pending Amount - If not, then display Zero Rupees.
      ##NO_TEXT  lr_column = lr_columns->get_column( 'PEND_AMNT' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT     lr_column->set_long_text('Balance Amount' ).
        ##NO_TEXT     lr_column->set_short_text( 'B PAMNT' ).
        ##NO_TEXT     lr_column->set_medium_text('B Amount' ).
      ENDIF.


* *SD Refund Amount
      ##NO_TEXT  lr_column = lr_columns->get_column( 'SD_REF_AMT' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT     lr_column->set_long_text('SD Refund Amount' ).
        ##NO_TEXT     lr_column->set_short_text( 'SD R AM' ).
        ##NO_TEXT     lr_column->set_medium_text('SD REF AMT' ).
      ENDIF.

* SD Refund Date
      ##NO_TEXT  lr_column = lr_columns->get_column( 'SD_REF_DAT' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT     lr_column->set_long_text('SD Refund Date' ).
        ##NO_TEXT     lr_column->set_short_text( 'SD R DAT' ).
        ##NO_TEXT     lr_column->set_medium_text('SD REF DATT' ).
      ENDIF.

*      " Mode Of Refund
      ##NO_TEXT  lr_column = lr_columns->get_column( 'MODE_OF_REF' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT     lr_column->set_long_text(' Mode Of Refund ' ).
        ##NO_TEXT     lr_column->set_short_text( 'M OF REF' ).
        ##NO_TEXT     lr_column->set_medium_text('MOD OF REF' ).
      ENDIF.

* Remarks
      ##NO_TEXT  lr_column = lr_columns->get_column( 'REMARKS' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT     lr_column->set_long_text(' Remarks ' ).
        ##NO_TEXT     lr_column->set_short_text( 'Remrk' ).
        ##NO_TEXT     lr_column->set_medium_text('Remarks' ).
      ENDIF.

    CATCH cx_salv_not_found INTO lr_msg1.
      lv_string = lr_msg1->get_text( ).
      MESSAGE lv_string TYPE lc_mtype .
  ENDTRY.
  gr_table->display( ).
*  ENDIF.
ENDFORM.

************************************************************************************************************************************************************************

11th block
ZISU_CM_COMP - tcode
ZISU_CM_COMPLAINTS_RPT - prg_name

*************************************************************************************************************************************************************************

*&---------------------------------------------------------------------*
*& Report ZISU_CM_COMPLAINTS_RPT
*&---------------------------------------------------------------------*
*& Description :Opened Complaints Report to be performed for Domestic,
*                 Commercial & Industrial consumers
*& Requirement Provided By : Raj Kumar D
*& Code Written By : Syam Gogineni
*& Code Written On (DD.MM.YYYY):
*& Company Name :
*& Transport Request No : DE1K901024
*& Transaction code :
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& CHANGE HISTORY:
*& Date:
*& Changed By:
*& Description:
*"---------------------------------------------------------------------*

REPORT ZISU_CM_COMPLAINTS_RPT.
INCLUDE ZISU_CM_COMPLAINTS_RPT_top.
INCLUDE ZISU_CM_COMPLAINTS_RPT_form.
*DATA: gt_return TYPE STANDARD TABLE OF ddshretval.
AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_BPTYPE-low.
  SELECT bpkind, text40
     FROM tb004t
     INTO TABLE @DATA(lt_bptype)
     WHERE spras = @sy-langu.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'BPKIND'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_BPTYPE'
      value_org       = 'S'
    TABLES
      value_tab       = lt_bptype
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

*    IF gt_return IS NOT INITIAL.
*      rt_bptype = gt_return[ 1 ]-fieldval.
*    ENDIF.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_bptype-high.
  SELECT bpkind, text40
       FROM tb004t
       INTO TABLE @DATA(lt_bptype)
       WHERE spras = @sy-langu.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'BPKIND'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_BPTYPE'
      value_org       = 'S'
    TABLES
      value_tab       = lt_bptype
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_grid-low.
  SELECT HOUSE_NUM1
       FROM ADRC
       INTO TABLE @DATA(lt_GRID)."#EC CI_NOWHERE
DELETE lt_GRID where HOUSE_NUM1 is initial.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'AD_HSNM1'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_GRID'
      value_org       = 'S'
    TABLES
      value_tab       = lt_GRID
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_GRID-HIGH.
  SELECT HOUSE_NUM1
       FROM ADRC
       INTO TABLE @DATA(lt_GRID). "#EC CI_NOWHERE
DELETE lt_GRID where HOUSE_NUM1 is initial.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'AD_HSNM1'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_GRID'
      value_org       = 'S'
    TABLES
      value_tab       = lt_GRID
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_ward-LOW.
 SELECT BUILDING
       FROM ADRC
       INTO TABLE @DATA(lt_ward)."#EC CI_NOWHERE

DELETE lt_WARD where BUILDING is initial.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'AD_BLDNG'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_WARD'
      value_org       = 'S'
    TABLES
      value_tab       = lt_ward
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_ward-high.
 SELECT BUILDING
       FROM ADRC
       INTO TABLE @DATA(lt_ward)."#EC CI_NOWHERE

DELETE lt_WARD where BUILDING is initial.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'AD_BLDNG'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_WARD'
      value_org       = 'S'
    TABLES
      value_tab       = lt_ward
*    return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

*  SELECT DISTINCT BPKIND  FROM but000 INTO TABLE @DATA(lt_bptype).
*  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
*    EXPORTING
*      retfield        = 'TYPE'
*      dynpprog        = sy-cprog
*      dynpnr          = sy-dynnr
*      dynprofield     = 'I2-LOW'
*      window_title    = 'Select BP TYPE'
*      value_org       = 'S'
*    TABLES
*      value_tab       = lt_bptype
*    EXCEPTIONS
*      parameter_error = 1
*      no_values_found = 2
*      OTHERS          = 3.
*  IF sy-subrc <> 0.
* Implement suitable error handling here
*  ENDIF.
INITIALIZATION.

  s_post-sign  = 'I'.
  s_post-option = 'BT'.
  s_post-low = '20230101'.
  s_post-high = sy-datum.
  APPEND s_post TO s_post[].

  s_BPTYPE-sign  = 'I'.
  s_BPTYPE-option = 'EQ'.

  s_BPTYPE-low = 'ZDOM'.
  s_BPTYPE-high = ''.
  APPEND s_BPTYPE TO s_BPTYPE[].
  s_BPTYPE-low = 'ZCOM'.
  s_BPTYPE-high = ''.
  APPEND s_BPTYPE TO s_BPTYPE[].
  s_BPTYPE-low = 'ZIND'.
  s_BPTYPE-high = ''.
  APPEND s_BPTYPE TO s_BPTYPE[].
*&-------------------------------------------------------------&*
*&                  START-OF-SELECTION
*&-------------------------------------------------------------&*
START-OF-SELECTION.
  PERFORM fetch_data.
  PERFORM display_alv_rpt.

**********************************************************************************************************************************************

*&---------------------------------------------------------------------*
*& Include          ZISU_CM_COMPLAINTS_RPT_TOP
*&---------------------------------------------------------------------*
*TABLES : zcm_group_ca,adrc,zcm_bp_data.
RANGES: r_date FOR sy-datum.

DATA : gt_bp_data TYPE TABLE OF zcm_bp_data,
       gr_table   TYPE REF TO     cl_salv_table.

TYPES: BEGIN OF ty_final,
         bp_number   TYPE bu_partner,
         bp_name     TYPE name_first,
         ca_number   TYPE  vkont_kk,
*         bp_address  TYPE bu_name1tx,
         date        TYPE sy-datum,
         Compl_num  TYPE char10,      "Complaint number
         Compl_desc  TYPE char50,      " Complaint Description
         Compl_stat  TYPE char10,      "Complaint Status
         compl_dat TYPE sy-datum,    "Completion Date
         attendee    TYPE char30 ,     "Attendee- AGCL/Contractor
         sr_repair   type char30,       "Service,Repair or Replacement Amount
         aging_days  TYPE char10 ,     "Aging Days
         grid        TYPE  ad_city1,     " Grid num
         ward_num    TYPE ad_bldng,      " Ward num
*         vendr       TYPE vkont_kk,      "Vendor
         curr_stat     TYPE    char50,
         curr_substat  TYPE    char50,
       END OF ty_final.

DATA : gt_final TYPE TABLE OF ty_final,
       wa_final TYPE     ty_final.

DATA: gv_date   TYPE  sy-datum, "posting date .
      gv_bptype TYPE  bu_bpkind, "BP TYPE
      gv_grid   TYPE  ad_hsnm1, " Grid
      gv_vkont  TYPE  vkont_kk,  "Contract Account Number
      gv_ward   TYPE  ad_bldng, "Ward no
      gv_qtype  TYPE  CRMT_OBJECT_ID_DB. "object_id. "char30.   " Query Type

SELECTION-SCREEN BEGIN OF BLOCK 0001 WITH FRAME TITLE TEXT-001.

  SELECT-OPTIONS:  s_post         FOR   gv_date OBLIGATORY,
                   s_bptype       FOR   gv_bptype,
                   s_grid         FOR   gv_grid ,
                   s_vkont        for   gv_vkont,
                   s_ward         FOR   gv_ward,
                   s_qtype        FOR   gv_qtype.

SELECTION-SCREEN END OF BLOCK 0001.

**********************************************************************************************************************************

*&---------------------------------------------------------------------*
*& Include          ZISU_CM_COMPLAINTS_RPT_FORM
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form fetch_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fetch_data .
  DATA:  ls_final TYPE ty_final .
  DATA:lv_agingdays   TYPE i.

  SELECT partner,                                       "#EC CI_NOFIELD
         type,
         bpkind,
         bu_group,
         name_org1,
         name_org2,
         name_last,
         name_first
    FROM but000
        INTO TABLE @DATA(lt_but)
  WHERE bpkind IN @s_bptype.

*  ENDIF.
  SORT lt_but[] BY partner.
  IF lt_but IS NOT INITIAL.

    SELECT  object_id ,                                 "#EC CI_NOFIELD
            process_type ,
            sold_to_party,
            posting_date
       FROM crms4d_serv_h
      INTO TABLE @DATA(lt_header)
       FOR ALL ENTRIES IN @lt_but
       WHERE sold_to_party = @lt_but-partner
       AND   posting_date  IN @s_post
        AND ( process_type  = 'ZCSD'
            OR  process_type  = 'ZCSC'
           OR  process_type  = 'ZCSI' ).
    .
  ENDIF.
  IF lt_header[] IS NOT INITIAL.
    SELECT object_type, object_id, created_at_h, created_by_h, header_guid, "#EC CI_NO_TRANSFORM
        process_type, description,sold_to_party, person_resp, inbox_status,inbox_assigned_to,
       stat_error,gross_value_h,service_team , posting_date,catlvlguid02_01
        FROM crms4_serv_h_search
      INTO TABLE @DATA(lt_header_f)
      FOR ALL ENTRIES IN @lt_header
      WHERE sold_to_party EQ  @lt_header-sold_to_party
      AND object_id IN @s_qtype
       AND   posting_date  IN @s_post
      AND ( process_type  = 'ZCSD'
            OR  process_type  = 'ZCSC'
           OR  process_type  = 'ZCSI' ).

  ENDIF.
  DELETE lt_header_f WHERE catlvlguid02_01 IS INITIAL.
  SORT lt_header_f BY person_resp.
  DESCRIBE TABLE lt_header_f LINES DATA(lv_line).

* Get Inbox Status Text Values
  SELECT * FROM crmc_aui_stat_t INTO TABLE @DATA(lt_inboxstatus) WHERE langu = @sy-langu.

  IF lt_but[] IS NOT INITIAL.
    SELECT vkont,gpart FROM fkkvkp FOR ALL ENTRIES IN @lt_but
       WHERE gpart = @lt_but-partner
      AND vkont IN @s_vkont
      INTO TABLE @DATA(lt_fkkvkp).
  ENDIF.
  IF lt_fkkvkp[] IS NOT INITIAL.
*    for move in date
    SELECT vertrag,anlage,vkonto,einzdat,          "#EC CI_NO_TRANSFORM
           auszdat, erdat,ernam  FROM ever
           INTO TABLE @DATA(lt_ever)
              FOR ALL ENTRIES IN @lt_fkkvkp
              WHERE vkonto = @lt_fkkvkp-vkont.

    DELETE lt_ever WHERE einzdat IS INITIAL.
  ENDIF.

  IF lt_but[] IS NOT INITIAL.
    SELECT partner, addrnumber
        FROM but020
        FOR ALL ENTRIES IN @lt_but
        WHERE partner = @lt_but-partner
        INTO TABLE @DATA(lt_but020).
  ENDIF.

  IF lt_but020[] IS NOT INITIAL.

    SELECT            addrnumber,                  "#EC CI_NO_TRANSFORM
                      city1,
                      city2,
                      post_code1,
                      street,
                      house_num1,
                      house_num2,
                      str_suppl1,
                      str_suppl2,
                      str_suppl3,
                      location,
                      building,
                      floor,
                      roomnumber,
                      country
                      FROM adrc
                     FOR ALL ENTRIES IN @lt_but020
                      WHERE addrnumber = @lt_but020-addrnumber
                      AND house_num1 IN  @s_grid
                      AND building   IN  @s_ward
                     INTO TABLE @DATA(lt_adrc).
  ENDIF.
  IF lt_but020[] IS NOT INITIAL.
    SELECT addrnumber,                             "#EC CI_NO_TRANSFORM
           persnumber,
           date_from,
           consnumber,
           tel_number,
           r3_user
          FROM adr2
          FOR ALL ENTRIES IN @lt_but020
           WHERE addrnumber = @lt_but020-addrnumber
          AND ( r3_user = '1' OR r3_user = '3' )
          INTO TABLE @DATA(lt_adr2).
  ENDIF.

  IF lt_header IS NOT INITIAL.

    SELECT object_id , number_int , sort ,         "#EC CI_NO_TRANSFORM
           timestamp , codegruppe , code  , cat_id
           FROM crms4d_srv_subj
      INTO TABLE @DATA(lt_sub)
      FOR ALL ENTRIES IN  @lt_header
      WHERE object_id   = @lt_header-object_id.    "#EC CI_NO_TRANSFORM

    SELECT * FROM crmc_erms_cat_ca INTO TABLE @DATA(lt_cat) . "#EC CI_NOWHERE
    SELECT * FROM crmc_erms_cat_hi INTO TABLE @DATA(lt_cat_hi) . "#EC CI_ALL_FIELDS_NEEDED "#EC CI_SGLSELECT
    SELECT * FROM crmc_erms_cat_cd INTO TABLE @DATA(lt_cat_dis) .
  ENDIF.

  LOOP AT lt_fkkvkp ASSIGNING FIELD-SYMBOL(<fs_fkkvkp>).

    IF line_exists( lt_but020[ partner = <fs_fkkvkp>-gpart  ] ).
      DATA(ls_but020_t)  = lt_but020[ partner = <fs_fkkvkp>-gpart ].
      IF line_exists( lt_adrc[ addrnumber = ls_but020_t-addrnumber ] ).
        DATA(ls_adrc_t) = lt_adrc[ addrnumber = ls_but020_t-addrnumber ].
*        CONCATENATE ls_adrc_t-roomnumber ls_adrc_t-str_suppl2 ls_adrc_t-floor ls_adrc_t-building ls_adrc_t-street ls_adrc_t-house_num1
*          ls_adrc_t-house_num2 ls_adrc_t-str_suppl1  ls_adrc_t-city1  ls_adrc_t-city2
*          ls_adrc_t-post_code1 ls_adrc_t-country INTO ls_final-bp_address SEPARATED BY ' '.
*
        ls_final-grid     = ls_adrc_t-city1.
        ls_final-ward_num     = ls_adrc_t-building.
      ELSE.
        CONTINUE.
      ENDIF.

    ENDIF.
    ls_final-bp_number  =  <fs_fkkvkp>-gpart.        " bp number
    ls_final-ca_number  =  <fs_fkkvkp>-vkont.        " CA number

    IF line_exists( lt_but[ partner = <fs_fkkvkp>-gpart  ] ).
      DATA(ls_but_t)  = lt_but[  partner = <fs_fkkvkp>-gpart  ].
      CONCATENATE ls_but_t-name_first ls_but_t-name_last  INTO ls_final-bp_name SEPARATED BY ''. " BP Name
      IF line_exists( lt_header[ sold_to_party = <fs_fkkvkp>-gpart  ] ).
        DATA(ls_header_t)  = lt_header[ sold_to_party = <fs_fkkvkp>-gpart  ].
        ls_final-bp_number = ls_header_t-sold_to_party.
        ls_final-date = ls_header_t-posting_date.
        ls_final-compl_num = ls_header_t-object_id.
      ELSE.
        CONTINUE.
      ENDIF.
    ENDIF.
    IF line_exists( lt_header_f[ sold_to_party = ls_header_t-sold_to_party  ] ).
      DATA(ls_header_f)  = lt_header_f[ sold_to_party = ls_header_t-sold_to_party  ].
      ls_final-compl_desc  =  ls_header_f-description.
*      ls_final-compl_stat   =  ls_header_f-inbox_status. "stat_error. ". "created_at_h.
      ls_final-compl_dat    =  ls_header_f-posting_date.
      ls_final-sr_repair    =  ls_header_f-gross_value_h.
      ls_final-attendee    =  ls_header_f-inbox_assigned_to. "service_team.

      IF line_exists( lt_inboxstatus[ inbox_status = ls_header_f-inbox_status  ] ).
        DATA(ls_inboxstatus)  = lt_inboxstatus[ inbox_status = ls_header_f-inbox_status  ].
        ls_final-compl_stat   =  ls_inboxstatus-description.
      ENDIF.

      CALL FUNCTION 'DAYS_BETWEEN_TWO_DATES'
        EXPORTING
          i_datum_bis             = sy-datum
          i_datum_von             = ls_header_f-posting_date
*         I_KZ_EXCL_VON           = '0'
*         I_KZ_INCL_BIS           = '0'
*         I_KZ_ULT_BIS            = ' '
*         I_KZ_ULT_VON            = ' '
*         I_STGMETH               = '0'
*         I_SZBMETH               = '1'
        IMPORTING
          e_tage                  = lv_agingdays
        EXCEPTIONS
          days_method_not_defined = 1
          OTHERS                  = 2.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.

      ls_final-aging_days    = lv_agingdays.
      CLEAR:lv_agingdays.
    ELSE.
      CONTINUE.
    ENDIF.

    LOOP AT lt_sub ASSIGNING FIELD-SYMBOL(<fs_sub>) WHERE object_id = ls_header_t-object_id.
      IF <fs_sub>-number_int = |000000|.
        IF line_exists( lt_cat[ cat_id = <fs_sub>-cat_id ] ).
          DATA(la_cat)       =  lt_cat[ cat_id = <fs_sub>-cat_id ].
          IF line_exists( lt_cat_dis[ cat_guid = la_cat-cat_guid ] ).
            DATA(la_cat_dis)   =  lt_cat_dis[ cat_guid = la_cat-cat_guid ].
            ls_final-curr_substat     = la_cat_dis-cat_label.
            DATA(la_cat_hi)       =  lt_cat_hi[ node_guid = la_cat-cat_guid ].
            IF line_exists( lt_cat_dis[ cat_guid = la_cat_hi-pare_guid ] ).
              DATA(la_cat_dis_pi)   =  lt_cat_dis[ cat_guid = la_cat_hi-pare_guid ].
              ls_final-curr_stat     =   la_cat_dis_pi-cat_label.
            ENDIF.
          ENDIF.
        ENDIF.

      ELSE.
        CASE <fs_sub>-code.

          WHEN 'D2SD' OR 'SD2D'.
*                CONVERT TIME STAMP <fs_sub>-timestamp
*            TIME ZONE sy-zonlo
*            INTO DATE lv_date_sd TIME DATA(tim).
*
**            lv_date_sd = <fs_sub>-timestamp+0(8).
*              WHEN 'D3AP' OR 'AP3D'.
*                CONVERT TIME STAMP <fs_sub>-timestamp
*            TIME ZONE sy-zonlo
*            INTO DATE lv_date_ac TIME tim.
*                <fs_final>-con_asi_da =    lv_date_ac.
*
*
*              WHEN 'D4PM' OR 'PM4D'.
*
*                CONVERT TIME STAMP <fs_sub>-timestamp
*                TIME ZONE sy-zonlo
*                INTO DATE lv_date_pm TIME tim.
*
*
*              WHEN 'D5GC' OR 'GC5D'.
*                CONVERT TIME STAMP <fs_sub>-timestamp
*                TIME ZONE sy-zonlo
*                INTO DATE lv_date_gc TIME tim.
*
*              WHEN 'D6GC' OR 'GC6D'.
*                CONVERT TIME STAMP <fs_sub>-timestamp
*                TIME ZONE sy-zonlo
*                INTO DATE lv_date_rc TIME tim.

        ENDCASE.

      ENDIF.

    ENDLOOP.
*  ls_final-bp_number = <fs_fkkvkp>-gpart.
*    IF line_exists( lt_but[ partner = <fs_fkkvkp>-gpart  ] ).
*      DATA(ls_but_t)  = lt_but[  partner = <fs_fkkvkp>-gpart  ].
*      CONCATENATE ls_but_t-name_first ls_but_t-name_last  INTO ls_final-bp_name SEPARATED BY ''. " BP Name
*    ENDIF.


**DATA : it_header_guid TYPE crmt_object_guid_tab,
**           et_orderadm_h  TYPE crmt_orderadm_h_wrkt,
**           et_partner     TYPE crmt_partner_external_wrkt,
**           et_service_os  TYPE crmt_srv_osset_wrkt.
**    CONSTANTS : lc_part_e TYPE comt_partner_fct VALUE '00000014',
**                lc_y1     TYPE bapi2080-notif_type      VALUE 'Y1'.
**data : lv_order_guid     TYPE  crmt_object_guid.
**lv_order_guid   =  ls_header_f-catlvlguid01_02.
**INSERT lv_order_guid INTO TABLE it_header_guid.
**   CALL FUNCTION 'CRM_ORDER_READ'
**      EXPORTING
**        it_header_guid       =  it_header_guid
***       IT_ITEM_GUID         =
***       IV_MODE              =
***       IV_ONLY_SPEC_ITEMS   =
***       IT_REQUESTED_OBJECTS =
***       IV_NO_AUTH_CHECK     =
***       IT_ITEM_USAGE_RANGE  =
***       IV_SUBITEM_DEPTH     = -1
***       IT_OBJECT_FILTER     =
***       IV_ONLY_CHANGED_OBJ  = FALSE
***       IV_STATUS_H_CHECK_RELEVANCE       = FALSE
***       IV_TEXT_LOG_SINGLE   = FALSE
**      IMPORTING
**        et_orderadm_h        = et_orderadm_h
**        et_partner           = et_partner
***       et_service_os        = et_service_os
**      EXCEPTIONS
**        document_not_found   = 1
**        error_occurred       = 2
**        document_locked      = 3
**        no_change_authority  = 4
**        no_display_authority = 5
**        no_change_allowed    = 6
**        OTHERS               = 7.
**    IF sy-subrc <> 0.
*** Implement suitable error handling here
**    ENDIF.
    APPEND ls_final TO   gt_final .
    CLEAR : ls_final,ls_but020_t,ls_but020_t,ls_header_t,ls_header_f.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form display_alv_rpt
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM display_alv_rpt .
  DATA: lv_count_c   TYPE char10,
        lv_tot_count TYPE p DECIMALS 0.
  DATA :
*         gr_table       TYPE REF TO     cl_salv_table,
    lr_functions TYPE REF TO     cl_salv_functions_list,
    lr_layout    TYPE REF TO     cl_salv_layout,
    ls_key       TYPE            salv_s_layout_key,
    lr_display   TYPE REF TO     cl_salv_display_settings,
    lr_columns   TYPE REF TO     cl_salv_columns,
    lr_column    TYPE REF TO     cl_salv_column.
  DATA: lr_aggregations TYPE REF TO cl_salv_aggregations,
        lr_sort         TYPE REF TO cl_salv_sorts.
  DATA :lr_msg    TYPE REF TO     cx_salv_msg,
        lr_msg1   TYPE REF TO     cx_salv_not_found,
        lv_string TYPE            string.
  CONSTANTS:lc_mtype   TYPE            sy-msgty VALUE 'I'.

* Initiate Table
*  IF  gt_final IS NOT INITIAL.
  TRY.
      cl_salv_table=>factory(
        IMPORTING
          r_salv_table = gr_table
        CHANGING
          t_table      = gt_final[]  ).
    CATCH cx_salv_msg.
  ENDTRY.
  DATA(lo_header) = NEW cl_salv_form_layout_grid( ).

  DATA(lo_h_flow) = lo_header->create_flow( row = 2 column = 1 ).
  lv_tot_count = lines( gt_final ).
  lv_count_c = lv_tot_count.
  CONDENSE lv_count_c.
  lo_h_flow->create_text( text = 'Total records:' && | | && lv_count_c ) ##NO_TEXT.
  CLEAR lv_count_c.

  gr_table->set_top_of_list( lo_header ).

* * Get Functions
  lr_functions = gr_table->get_functions( ).
* Get Functions
  lr_functions = gr_table->get_functions( ).

* *. activate ALV generic Functions
  lr_functions->set_all( abap_true ).
*****************
  lr_layout = gr_table->get_layout( ).

  ls_key-report = sy-repid.
  lr_layout->set_key( ls_key ).
  lr_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
* * Get Columns
  lr_columns = gr_table->get_columns( ).
  TRY.

**Customer  number
      lr_column = lr_columns->get_column( 'BP_NUMBER' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT    lr_column->set_long_text('Customer Number' ).
        ##NO_TEXT     lr_column->set_short_text( 'BP_Num' ).
        ##NO_TEXT    lr_column->set_medium_text('BP Number' ).
      ENDIF.

*   * Customer name
      ##NO_TEXT  lr_column = lr_columns->get_column( 'BP_NAME' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT     lr_column->set_long_text('Customer Name' ).
        ##NO_TEXT    lr_column->set_short_text( 'CPName' ).
        ##NO_TEXT     lr_column->set_medium_text('Cust Name' ).
      ENDIF.


*   * CA Number
      ##NO_TEXT  lr_column = lr_columns->get_column( 'CA_NUMBER' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT     lr_column->set_long_text('CA Number' ).
        ##NO_TEXT    lr_column->set_short_text( 'CA Num' ).
        ##NO_TEXT     lr_column->set_medium_text('CA Number' ).
      ENDIF.


* *   * Date
      ##NO_TEXT  lr_column = lr_columns->get_column( 'DATE' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT     lr_column->set_long_text('Date' ).
        ##NO_TEXT    lr_column->set_short_text( 'Date' ).
        ##NO_TEXT     lr_column->set_medium_text('Date' ).
      ENDIF.

**   * Complaint Type
      ##NO_TEXT  lr_column = lr_columns->get_column( 'COMPL_NUM' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT     lr_column->set_long_text('Complaint Number' ).
        ##NO_TEXT    lr_column->set_short_text( 'C Type' ).
        ##NO_TEXT     lr_column->set_medium_text('Compl Num' ).
      ENDIF.
*
**   * Complaint Description
      ##NO_TEXT  lr_column = lr_columns->get_column( 'COMPL_DESC' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT     lr_column->set_long_text('Complaint Description' ).
        ##NO_TEXT    lr_column->set_short_text( 'C Desc' ).
        ##NO_TEXT     lr_column->set_medium_text('Compl Desc' ).
      ENDIF.

*Compl_stat: "Complaint Status
      ##NO_TEXT  lr_column = lr_columns->get_column( 'COMPL_STAT' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT     lr_column->set_long_text('Complaint Status' ).
        ##NO_TEXT    lr_column->set_short_text( 'C status' ).
        ##NO_TEXT     lr_column->set_medium_text('Compl Status' ).
      ENDIF.

*complnt_dat    "Completion Date
      ##NO_TEXT  lr_column = lr_columns->get_column( 'COMPL_DAT' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT     lr_column->set_long_text('Completion Date' ).
        ##NO_TEXT    lr_column->set_short_text( 'C Date' ).
        ##NO_TEXT     lr_column->set_medium_text('Compl Date' ).
      ENDIF.

*Attendee     "Attendee- AGCL/Contractor
      ##NO_TEXT  lr_column = lr_columns->get_column( 'ATTENDEE' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT     lr_column->set_long_text('Attendee AGCL-Contractor' ).
        ##NO_TEXT    lr_column->set_short_text( 'Attendee' ).
        ##NO_TEXT     lr_column->set_medium_text('Attendee AGCL' ).
      ENDIF.

**sr_repair  : "Service,Repair or Replacement Amount

      lr_column = lr_columns->get_column( 'SR_REPAIR' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT        lr_column->set_long_text('Service Repair or Replacement Amount ' ).
        ##NO_TEXT     lr_column->set_short_text( 'SR Repair' ).
        ##NO_TEXT    lr_column->set_medium_text('SR Repair Amount' ).
      ENDIF.

* aging_days      "Aging Days
      lr_column = lr_columns->get_column( 'AGING_DAYS' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT        lr_column->set_long_text('Aging Days ' ).
        ##NO_TEXT     lr_column->set_short_text( 'Aging Days' ).
        ##NO_TEXT    lr_column->set_medium_text('Aging Days' ).
      ENDIF.

*    Grid Name

      lr_column = lr_columns->get_column( 'GRID' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT        lr_column->set_long_text('Grid Name ' ).
        ##NO_TEXT     lr_column->set_short_text( 'GName' ).
        ##NO_TEXT    lr_column->set_medium_text('Grid Name' ).
      ENDIF.

**       ward number
      ##NO_TEXT    lr_column = lr_columns->get_column( 'WARD_NUM' ) .
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT        lr_column->set_long_text('Ward Number ' ).
        ##NO_TEXT  lr_column->set_short_text( 'Wardno' ).
        ##NO_TEXT   lr_column->set_medium_text('Ward Num' ).
      ENDIF.
**  curr_stat
      ##NO_TEXT    lr_column = lr_columns->get_column( 'CURR_STAT' ) .
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT        lr_column->set_long_text('Category 2'  ).
        ##NO_TEXT  lr_column->set_short_text( 'Category 2' ).
        ##NO_TEXT   lr_column->set_medium_text('Category 2' ).
      ENDIF.
**  curr_substat
      ##NO_TEXT    lr_column = lr_columns->get_column( 'CURR_SUBSTAT' ) .
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT        lr_column->set_long_text('Category 3' ).
        ##NO_TEXT  lr_column->set_short_text( 'Category 3'  ).
        ##NO_TEXT   lr_column->set_medium_text('Category 3'  ).
      ENDIF.
    CATCH cx_salv_not_found INTO lr_msg1.
      lv_string = lr_msg1->get_text( ).
      MESSAGE lv_string TYPE lc_mtype .
  ENDTRY.
  gr_table->display( ).
*  ENDIF.
ENDFORM.

*************************************************************************************************************************************************

12th block
ZISU_CM_QUERY - tcode
ZISU_CM_CUSTOMER_QUERY - prg_name

**************************************************************************************************************************************************

*&---------------------------------------------------------------------*
*& Report ZISU_CM_CUSTOMER_QUERY
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Description :Opened Customer Query Report to be performed for Domestic,
*                *Commercial & Industrial consumers
*& Requirement Provided By : Raj Kumar D
*& Code Written By : Syam Gogineni
*& Code Written On (DD.MM.YYYY):
*& Company Name :
*& Transport Request No :DE1K901028
*& Transaction code :
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& CHANGE HISTORY:
*& Date:
*& Changed By:
*& Description:
*"---------------------------------------------------------------------*
REPORT zisu_cm_customer_query.
INCLUDE zisu_cm_customer_query_top.
INCLUDE zisu_cm_customer_query_form.
*DATA: gt_return TYPE STANDARD TABLE OF ddshretval.
AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_bptype-low.
  SELECT bpkind, text40
     FROM tb004t
     INTO TABLE @DATA(lt_bptype)
     WHERE spras = @sy-langu.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'BPKIND'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_BPTYPE'
      value_org       = 'S'
    TABLES
      value_tab       = lt_bptype
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

*    IF gt_return IS NOT INITIAL.
*      rt_bptype = gt_return[ 1 ]-fieldval.
*    ENDIF.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_bptype-high.
  SELECT bpkind, text40
       FROM tb004t
       INTO TABLE @DATA(lt_bptype)
       WHERE spras = @sy-langu.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'BPKIND'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_BPTYPE'
      value_org       = 'S'
    TABLES
      value_tab       = lt_bptype
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_grid-low.
  SELECT house_num1
       FROM adrc
       INTO TABLE @DATA(lt_grid).                       "#EC CI_NOWHERE
  DELETE lt_grid WHERE house_num1 IS INITIAL.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'AD_HSNM1'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_GRID'
      value_org       = 'S'
    TABLES
      value_tab       = lt_grid
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_grid-high.
  SELECT house_num1
       FROM adrc
       INTO TABLE @DATA(lt_grid).                       "#EC CI_NOWHERE
  DELETE lt_grid WHERE house_num1 IS INITIAL.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'AD_HSNM1'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_GRID'
      value_org       = 'S'
    TABLES
      value_tab       = lt_grid
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_ward-low.
  SELECT building
        FROM adrc
        INTO TABLE @DATA(lt_ward).                      "#EC CI_NOWHERE

  DELETE lt_ward WHERE building IS INITIAL.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'AD_BLDNG'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_WARD'
      value_org       = 'S'
    TABLES
      value_tab       = lt_ward
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_ward-high.
  SELECT building
        FROM adrc
        INTO TABLE @DATA(lt_ward).                      "#EC CI_NOWHERE

  DELETE lt_ward WHERE building IS INITIAL.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'AD_BLDNG'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'S_WARD'
      value_org       = 'S'
    TABLES
      value_tab       = lt_ward
*     return_tab      = gt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3 ##FM_SUBRC_OK.

*  SELECT DISTINCT BPKIND  FROM but000 INTO TABLE @DATA(lt_bptype).
*  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
*    EXPORTING
*      retfield        = 'TYPE'
*      dynpprog        = sy-cprog
*      dynpnr          = sy-dynnr
*      dynprofield     = 'I2-LOW'
*      window_title    = 'Select BP TYPE'
*      value_org       = 'S'
*    TABLES
*      value_tab       = lt_bptype
*    EXCEPTIONS
*      parameter_error = 1
*      no_values_found = 2
*      OTHERS          = 3.
*  IF sy-subrc <> 0.
* Implement suitable error handling here
*  ENDIF.
INITIALIZATION.

  s_post-sign  = 'I'.
  s_post-option = 'BT'.
  s_post-low = '20230101'.
  s_post-high = sy-datum.
  APPEND s_post TO s_post[].

  s_bptype-sign  = 'I'.
  s_bptype-option = 'EQ'.

  s_bptype-low = 'ZDOM'.
  s_bptype-high = ''.
  APPEND s_bptype TO s_bptype[].
  s_bptype-low = 'ZCOM'.
  s_bptype-high = ''.
  APPEND s_bptype TO s_bptype[].
  s_bptype-low = 'ZIND'.
  s_bptype-high = ''.
  APPEND s_bptype TO s_bptype[].
*&-------------------------------------------------------------&*
*&                  START-OF-SELECTION
*&-------------------------------------------------------------&*
START-OF-SELECTION.
  PERFORM fetch_data.
  PERFORM display_alv_rpt.

***************************************************************************************************************************

*&---------------------------------------------------------------------*
*& Include          ZISU_CM_CUSTOMER_QUERY_TOP
*&---------------------------------------------------------------------*
RANGES r_date FOR sy-datum.

DATA : gt_bp_data TYPE TABLE OF zcm_bp_data,
       gr_table   TYPE REF TO     cl_salv_table.

TYPES: BEGIN OF ty_final,
         bp_number   TYPE bu_partner,
         bp_name     TYPE name_first,
         ca_number   TYPE  vkont_kk,
*         bp_address  TYPE bu_name1tx,
         date        TYPE sy-datum,
         query_num  TYPE char10,      "Query number
         query_desc  TYPE char50,      " Query Description
         query_stat  TYPE char10,      "Query Status
         compl_dat TYPE sy-datum,    "Completion Date
         attendee    TYPE char30 ,     "Attendee- AGCL/Contractor
         aging_days  TYPE char10 ,     "Aging Days
         grid        TYPE  ad_city1,     " Grid num
         ward_num    TYPE ad_bldng,      " Ward num
*         vendr       TYPE vkont_kk,      "Vendor
          curr_stat     TYPE    char50,
         curr_substat  TYPE    char50,
       END OF ty_final.

DATA : gt_final TYPE TABLE OF ty_final,
       wa_final TYPE     ty_final.

DATA: gv_date   TYPE  sy-datum, "posting date .
      gv_bptype TYPE  bu_bpkind, "BP TYPE
      gv_grid   TYPE  ad_hsnm1, " Grid
      gv_vkont  TYPE  vkont_kk,  "Contract Account Number
      gv_ward   TYPE  ad_bldng, "Ward no
      gv_qtype  TYPE  char30.   " Query Type

SELECTION-SCREEN BEGIN OF BLOCK 0001 WITH FRAME TITLE TEXT-001.

  SELECT-OPTIONS:  s_post         FOR   gv_date OBLIGATORY,
                   s_bptype       FOR   gv_bptype,
                   s_grid         FOR   gv_grid ,
                   s_vkont        for   gv_vkont,
                   s_ward         FOR   gv_ward,
                   s_qtype        FOR   gv_qtype.

SELECTION-SCREEN END OF BLOCK 0001.

***********************************************************************************************************************

*&---------------------------------------------------------------------*
*& Include          ZISU_CM_CUSTOMER_QUERY_FORM
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form fetch_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fetch_data .
  DATA:  ls_final TYPE ty_final .
  DATA:lv_agingdays   TYPE i.

  SELECT partner,                                       "#EC CI_NOFIELD
         type,
         bpkind,
         bu_group,
         name_org1,
         name_org2,
         name_last,
         name_first
    FROM but000
    WHERE bpkind IN @s_bptype
      AND  crdat   IN @s_post
    INTO TABLE @DATA(lt_but).
*  ENDIF.
  SORT lt_but[] BY partner.

  IF lt_but IS NOT INITIAL.
    SELECT  object_id ,                                 "#EC CI_NOFIELD
            process_type ,
            sold_to_party,
            posting_date
       FROM crms4d_serv_h
       FOR ALL ENTRIES IN @lt_but
       WHERE sold_to_party = @lt_but-partner
       INTO TABLE @DATA(lt_header).

  ENDIF.
  IF lt_header[] IS NOT INITIAL.
    SELECT object_type, object_id, created_at_h, created_by_h, header_guid, "#EC CI_NO_TRANSFORM
       process_type, description,sold_to_party, person_resp, inbox_status,
      stat_error,gross_value_h,service_team , posting_date,catlvlguid01_02
   FROM crms4_serv_h_search
      FOR ALL ENTRIES IN @lt_header
*    WHERE process_type EQ @lt_header-process_type
     WHERE sold_to_party EQ  @lt_header-sold_to_party
**    AND object_id = '7000000590'
*    AND  inbox_status NE '0003'
*    ORDER BY object_id DESCENDING
     INTO TABLE @DATA(lt_header_f).
  ENDIF.

  DELETE lt_header_f WHERE catlvlguid01_02 IS INITIAL.
  SORT lt_header_f BY person_resp.
  DESCRIBE TABLE lt_header_f LINES DATA(lv_line).

* Get Inbox Status Text Values
  SELECT * FROM crmc_aui_stat_t INTO TABLE @DATA(lt_inboxstatus) WHERE langu = @sy-langu.

  IF lt_but IS NOT INITIAL.
    SELECT vkont,gpart FROM fkkvkp FOR ALL ENTRIES IN @lt_but
       WHERE gpart = @lt_but-partner
      AND vkont IN @s_vkont
      INTO TABLE @DATA(lt_fkkvkp).
  ENDIF.
  IF lt_fkkvkp[] IS NOT INITIAL.
*    for move in date
    SELECT vertrag,anlage,vkonto,einzdat,          "#EC CI_NO_TRANSFORM
           auszdat, erdat,ernam  FROM ever
           INTO TABLE @DATA(lt_ever)
              FOR ALL ENTRIES IN @lt_fkkvkp
              WHERE vkonto = @lt_fkkvkp-vkont.

    DELETE lt_ever WHERE einzdat IS INITIAL.
  ENDIF.

  IF lt_but[] IS NOT INITIAL.
    SELECT partner, addrnumber
        FROM but020
        FOR ALL ENTRIES IN @lt_but
        WHERE partner = @lt_but-partner
        INTO TABLE @DATA(lt_but020).
  ENDIF.

  IF lt_but020[] IS NOT INITIAL.

    SELECT            addrnumber,                  "#EC CI_NO_TRANSFORM
                      city1,
                      city2,
                      post_code1,
                      street,
                      house_num1,
                      house_num2,
                      str_suppl1,
                      str_suppl2,
                      str_suppl3,
                      location,
                      building,
                      floor,
                      roomnumber,
                      country
                      FROM adrc
                     FOR ALL ENTRIES IN @lt_but020
                      WHERE addrnumber = @lt_but020-addrnumber
                      AND house_num1 IN  @s_grid
                      AND building   IN  @s_ward
                     INTO TABLE @DATA(lt_adrc).
  ENDIF.
  IF lt_but020[] IS NOT INITIAL.
    SELECT addrnumber,                             "#EC CI_NO_TRANSFORM
           persnumber,
           date_from,
           consnumber,
           tel_number,
           r3_user
          FROM adr2
          FOR ALL ENTRIES IN @lt_but020
           WHERE addrnumber = @lt_but020-addrnumber
          AND ( r3_user = '1' OR r3_user = '3' )
          INTO TABLE @DATA(lt_adr2).
  ENDIF.

  IF lt_header IS NOT INITIAL.

    SELECT object_id , number_int , sort , timestamp , codegruppe , "#EC CI_ALL_FIELDS_NEEDED
      code , cat_id FROM crms4d_srv_subj INTO TABLE @DATA(lt_sub)
       FOR ALL ENTRIES IN
         @lt_header WHERE object_id   = @lt_header-object_id. "#EC CI_NO_TRANSFORM

    SELECT * FROM crmc_erms_cat_ca INTO TABLE @DATA(lt_cat) . "#EC CI_NOWHERE
    SELECT * FROM crmc_erms_cat_hi INTO TABLE @DATA(lt_cat_hi) . "#EC CI_ALL_FIELDS_NEEDED "#EC CI_SGLSELECT
    SELECT * FROM crmc_erms_cat_cd INTO TABLE @DATA(lt_cat_dis) .
  ENDIF.

  LOOP AT lt_fkkvkp ASSIGNING FIELD-SYMBOL(<fs_fkkvkp>).

    IF line_exists( lt_but020[ partner = <fs_fkkvkp>-gpart  ] ).
      DATA(ls_but020_t)  = lt_but020[ partner = <fs_fkkvkp>-gpart ].
      IF line_exists( lt_adrc[ addrnumber = ls_but020_t-addrnumber ] ).
        DATA(ls_adrc_t) = lt_adrc[ addrnumber = ls_but020_t-addrnumber ].
*        CONCATENATE ls_adrc_t-roomnumber ls_adrc_t-str_suppl2 ls_adrc_t-floor ls_adrc_t-building ls_adrc_t-street ls_adrc_t-house_num1
*          ls_adrc_t-house_num2 ls_adrc_t-str_suppl1  ls_adrc_t-city1  ls_adrc_t-city2
*          ls_adrc_t-post_code1 ls_adrc_t-country INTO ls_final-bp_address SEPARATED BY ' '.
*
        ls_final-grid     = ls_adrc_t-city1.
        ls_final-ward_num     = ls_adrc_t-building.
      ELSE.
        CONTINUE.
      ENDIF.
    ENDIF.
*    ls_final-bp_number  =  <fs_fkkvkp>-gpart.        " bp number
    ls_final-ca_number  =  <fs_fkkvkp>-vkont.        " CA number

*    ls_final-bp_number = <fs_fkkvkp>-gpart.
    IF line_exists( lt_but[ partner = <fs_fkkvkp>-gpart  ] ).
      DATA(ls_but_t)  = lt_but[  partner = <fs_fkkvkp>-gpart  ].
      CONCATENATE ls_but_t-name_first ls_but_t-name_last  INTO ls_final-bp_name SEPARATED BY ''. " BP Name
      IF line_exists( lt_header[ sold_to_party = <fs_fkkvkp>-gpart  ] ).
        DATA(ls_header_t)  = lt_header[ sold_to_party = <fs_fkkvkp>-gpart  ].
        ls_final-bp_number = ls_header_t-sold_to_party.
        ls_final-date = ls_header_t-posting_date.
        ls_final-query_num = ls_header_t-object_id.
      ELSE.
        CONTINUE.
      ENDIF.
    ENDIF.
    IF line_exists( lt_header_f[ sold_to_party = ls_header_t-sold_to_party  ] ).
      DATA(ls_header_f)  = lt_header_f[ sold_to_party = ls_header_t-sold_to_party  ].
      ls_final-query_desc  =  ls_header_f-description.
*      ls_final-query_stat   =  ls_header_f-inbox_status. "stat_error. ". "created_at_h.
      ls_final-compl_dat    =  ls_header_f-posting_date.
*      ls_final-sr_repair    =  ls_header_f-gross_value_h.
*      ls_final-attendee    =  ls_header_f-service_team.

      IF line_exists( lt_inboxstatus[ inbox_status = ls_header_f-inbox_status  ] ).
        DATA(ls_inboxstatus)  = lt_inboxstatus[ inbox_status = ls_header_f-inbox_status  ].
        ls_final-query_stat   =  ls_inboxstatus-description.
      ENDIF.
      CALL FUNCTION 'DAYS_BETWEEN_TWO_DATES'
        EXPORTING
          i_datum_bis             = sy-datum
          i_datum_von             = ls_header_f-posting_date
*         I_KZ_EXCL_VON           = '0'
*         I_KZ_INCL_BIS           = '0'
*         I_KZ_ULT_BIS            = ' '
*         I_KZ_ULT_VON            = ' '
*         I_STGMETH               = '0'
*         I_SZBMETH               = '1'
        IMPORTING
          e_tage                  = lv_agingdays
        EXCEPTIONS
          days_method_not_defined = 1
          OTHERS                  = 2.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.

      ls_final-aging_days    = lv_agingdays.
      CLEAR:lv_agingdays.
    ELSE.
      CONTINUE.
    ENDIF.

    LOOP AT lt_sub ASSIGNING FIELD-SYMBOL(<fs_sub>) WHERE object_id = ls_header_t-object_id.
      IF <fs_sub>-number_int = |000000|.
        IF line_exists( lt_cat[ cat_id = <fs_sub>-cat_id ] ).
          DATA(la_cat)       =  lt_cat[ cat_id = <fs_sub>-cat_id ].
          IF line_exists( lt_cat_dis[ cat_guid = la_cat-cat_guid ] ).
            DATA(la_cat_dis)   =  lt_cat_dis[ cat_guid = la_cat-cat_guid ].
            ls_final-curr_substat     = la_cat_dis-cat_label.
            DATA(la_cat_hi)       =  lt_cat_hi[ node_guid = la_cat-cat_guid ].
            IF line_exists( lt_cat_dis[ cat_guid = la_cat_hi-pare_guid ] ).
              DATA(la_cat_dis_pi)   =  lt_cat_dis[ cat_guid = la_cat_hi-pare_guid ].
              ls_final-curr_stat     =   la_cat_dis_pi-cat_label.
            ENDIF.
          ENDIF.
        ENDIF.

      ELSE.
        CASE <fs_sub>-code.

          WHEN 'D2SD' OR 'SD2D'.
*                CONVERT TIME STAMP <fs_sub>-timestamp
*            TIME ZONE sy-zonlo
*            INTO DATE lv_date_sd TIME DATA(tim).
*
**            lv_date_sd = <fs_sub>-timestamp+0(8).
*              WHEN 'D3AP' OR 'AP3D'.
*                CONVERT TIME STAMP <fs_sub>-timestamp
*            TIME ZONE sy-zonlo
*            INTO DATE lv_date_ac TIME tim.
*                <fs_final>-con_asi_da =    lv_date_ac.
*
*
*              WHEN 'D4PM' OR 'PM4D'.
*
*                CONVERT TIME STAMP <fs_sub>-timestamp
*                TIME ZONE sy-zonlo
*                INTO DATE lv_date_pm TIME tim.
*
*
*              WHEN 'D5GC' OR 'GC5D'.
*                CONVERT TIME STAMP <fs_sub>-timestamp
*                TIME ZONE sy-zonlo
*                INTO DATE lv_date_gc TIME tim.
*
*              WHEN 'D6GC' OR 'GC6D'.
*                CONVERT TIME STAMP <fs_sub>-timestamp
*                TIME ZONE sy-zonlo
*                INTO DATE lv_date_rc TIME tim.

        ENDCASE.


      ENDIF.
    ENDLOOP.
    APPEND ls_final TO   gt_final .
    CLEAR : ls_final,ls_but020_t,ls_but020_t,ls_header_t,ls_header_f.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form display_alv_rpt
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM display_alv_rpt .
  DATA: lv_count_c   TYPE char10,
        lv_tot_count TYPE p DECIMALS 0.
  DATA :
*         gr_table       TYPE REF TO     cl_salv_table,
    lr_functions TYPE REF TO     cl_salv_functions_list,
    lr_layout    TYPE REF TO     cl_salv_layout,
    ls_key       TYPE            salv_s_layout_key,
    lr_display   TYPE REF TO     cl_salv_display_settings,
    lr_columns   TYPE REF TO     cl_salv_columns,
    lr_column    TYPE REF TO     cl_salv_column.
  DATA: lr_aggregations TYPE REF TO cl_salv_aggregations,
        lr_sort         TYPE REF TO cl_salv_sorts.
  DATA :lr_msg    TYPE REF TO     cx_salv_msg,
        lr_msg1   TYPE REF TO     cx_salv_not_found,
        lv_string TYPE            string.
  CONSTANTS:lc_mtype   TYPE            sy-msgty VALUE 'I'.

* Initiate Table
*  IF  gt_final IS NOT INITIAL.
  TRY.
      cl_salv_table=>factory(
        IMPORTING
          r_salv_table = gr_table
        CHANGING
          t_table      = gt_final[]  ).
    CATCH cx_salv_msg.
  ENDTRY.
  DATA(lo_header) = NEW cl_salv_form_layout_grid( ).

  DATA(lo_h_flow) = lo_header->create_flow( row = 2 column = 1 ).
  lv_tot_count = lines( gt_final ).
  lv_count_c = lv_tot_count.
  CONDENSE lv_count_c.
  lo_h_flow->create_text( text = 'Total records:' && | | && lv_count_c ) ##NO_TEXT.
  CLEAR lv_count_c.

  gr_table->set_top_of_list( lo_header ).

* * Get Functions
  lr_functions = gr_table->get_functions( ).
* Get Functions
  lr_functions = gr_table->get_functions( ).

* *. activate ALV generic Functions
  lr_functions->set_all( abap_true ).
*****************
  lr_layout = gr_table->get_layout( ).

  ls_key-report = sy-repid.
  lr_layout->set_key( ls_key ).
  lr_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
* * Get Columns
  lr_columns = gr_table->get_columns( ).
  TRY.

**BP number
      lr_column = lr_columns->get_column( 'BP_NUMBER' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT    lr_column->set_long_text('Customer Number' ).
        ##NO_TEXT     lr_column->set_short_text( 'C_Num' ).
        ##NO_TEXT    lr_column->set_medium_text('Customer Number' ).
      ENDIF.
*   * Bp name
      ##NO_TEXT  lr_column = lr_columns->get_column( 'BP_NAME' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT     lr_column->set_long_text('Customer Name' ).
        ##NO_TEXT    lr_column->set_short_text( 'CustName' ).
        ##NO_TEXT     lr_column->set_medium_text('Customer Name' ).
      ENDIF.


*   * CA Number
      ##NO_TEXT  lr_column = lr_columns->get_column( 'CA_NUMBER' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT     lr_column->set_long_text('CA Number' ).
        ##NO_TEXT    lr_column->set_short_text( 'CA Num' ).
        ##NO_TEXT     lr_column->set_medium_text('CA Number' ).
      ENDIF.


* *   * Date
      ##NO_TEXT  lr_column = lr_columns->get_column( 'DATE' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT     lr_column->set_long_text('Date' ).
        ##NO_TEXT    lr_column->set_short_text( 'Date' ).
        ##NO_TEXT     lr_column->set_medium_text('Date' ).
      ENDIF.

**   * query  Type
      ##NO_TEXT  lr_column = lr_columns->get_column( 'QUERY_NUM ' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT     lr_column->set_long_text('Query Number' ).
        ##NO_TEXT    lr_column->set_short_text( 'Q Num' ).
        ##NO_TEXT     lr_column->set_medium_text('Query Number' ).
      ENDIF.

**   * Query Description
      ##NO_TEXT  lr_column = lr_columns->get_column( 'QUERY_DESC' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT     lr_column->set_long_text('Query Description' ).
        ##NO_TEXT    lr_column->set_short_text( 'Q Desc' ).
        ##NO_TEXT     lr_column->set_medium_text('Query Desc' ).
      ENDIF.

*Query Status: "query  Status
      ##NO_TEXT  lr_column = lr_columns->get_column( 'QUERY_STAT' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT     lr_column->set_long_text('Query Status' ).
        ##NO_TEXT    lr_column->set_short_text( 'Q status' ).
        ##NO_TEXT     lr_column->set_medium_text('Query Status' ).
      ENDIF.

*compl_dat    "Completion Date
      ##NO_TEXT  lr_column = lr_columns->get_column( 'COMPL_DAT' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT     lr_column->set_long_text('Completion Date' ).
        ##NO_TEXT    lr_column->set_short_text( 'C Date' ).
        ##NO_TEXT     lr_column->set_medium_text('Compl Date' ).
      ENDIF.
*Attendee     "Attendee- AGCL/Contractor
      ##NO_TEXT  lr_column = lr_columns->get_column( 'ATTENDEE' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT     lr_column->set_long_text('Attendee AGCL-Contractor' ).
        ##NO_TEXT    lr_column->set_short_text( 'Attendee' ).
        ##NO_TEXT     lr_column->set_medium_text('Attendee AGCL' ).
      ENDIF.

***sr_repair  : "Service,Repair or Replacement Amount
* lr_column = lr_columns->get_column( 'SR_REPAIR' ).
*      lr_column->set_output_length( 30 ).
*      IF lr_column IS BOUND.
*        ##NO_TEXT        lr_column->set_long_text('Service Repair or Replacement Amount ' ).
*        ##NO_TEXT     lr_column->set_short_text( 'SR Repair' ).
*        ##NO_TEXT    lr_column->set_medium_text('SR Repair Amount' ).
*      ENDIF.
* aging_days      "Aging Days
      lr_column = lr_columns->get_column( 'AGING_DAYS' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT        lr_column->set_long_text('Aging Days ' ).
        ##NO_TEXT     lr_column->set_short_text( 'Aging Days' ).
        ##NO_TEXT    lr_column->set_medium_text('Aging Days' ).
      ENDIF.
*    Grid Name
      lr_column = lr_columns->get_column( 'GRID' ).
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT        lr_column->set_long_text('Grid Name ' ).
        ##NO_TEXT     lr_column->set_short_text( 'GName' ).
        ##NO_TEXT    lr_column->set_medium_text('Grid Name' ).
      ENDIF.
*       ward number
      ##NO_TEXT    lr_column = lr_columns->get_column( 'WARD_NUM' ) .
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT        lr_column->set_long_text('Ward Number ' ).
        ##NO_TEXT  lr_column->set_short_text( 'Wardno' ).
        ##NO_TEXT   lr_column->set_medium_text('Ward Num' ).
      ENDIF.

* **  curr_stat
      ##NO_TEXT    lr_column = lr_columns->get_column( 'CURR_STAT' ) .
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT        lr_column->set_long_text('Current Status ' ).
        ##NO_TEXT  lr_column->set_short_text( 'cstatus' ).
        ##NO_TEXT   lr_column->set_medium_text('Curr Status' ).
      ENDIF.
**  curr_substat
      ##NO_TEXT    lr_column = lr_columns->get_column( 'CURR_SUBSTAT' ) .
      lr_column->set_output_length( 30 ).
      IF lr_column IS BOUND.
        ##NO_TEXT        lr_column->set_long_text('Current Sub Status ' ).
        ##NO_TEXT  lr_column->set_short_text( 'CSstatus' ).
        ##NO_TEXT   lr_column->set_medium_text('Curr Sub Status' ).
      ENDIF.

    CATCH cx_salv_not_found INTO lr_msg1.
      lv_string = lr_msg1->get_text( ).
      MESSAGE lv_string TYPE lc_mtype .
  ENDTRY.
  gr_table->display( ).
*  ENDIF.
ENDFORM.

*************************************************************************************************************************************8888

